//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AbstractionLevels.ABSTRACTIONLEVELNAMERepository.ParameterTypes
{
    using System;
    
    
    [System.ComponentModel.Description("Your description for the PARAMETERTYPENAME. You can use the PARAMETERTYPENAME as " +
        "PARAMETERTYPE for an Object")]
    public enum PARAMETERTYPENAME
    {
        
        [System.ComponentModel.Description("Your description for the discrete VALUE that PARAMETERTYPENAME can take.")]
        VALUE = 0,
        
        [System.ComponentModel.Description("Your description for the discrete ANOTHERVALUE that PARAMETERTYPENAME can take. T" +
            "his doesn\'t really need \r\na descrption so I will leave the next description away" +
            ".")]
        ANOTHERVALUE = 1,
        
        [System.ComponentModel.Description("")]
        ONEMOREVALUE = 2,
        
        [System.ComponentModel.Description("Your description for the discrete LASTVALUE. Of course feel free to add as many m" +
            "ore values as you wish")]
        LASTVALUE = 3,
    }
    
    [System.ComponentModel.Description("Note that ANOTHERPARAMETERTYPENAME can take multiple values at the same time beca" +
        "use of the [Multiple] tag.")]
    [Flags()]
    public enum ANOTHERPARAMETERTYPENAME
    {
        
        [System.ComponentModel.Description("")]
        VALUE = 1,
        
        [System.ComponentModel.Description("")]
        SECONDVALUE = 2,
        
        [System.ComponentModel.Description("")]
        THATSENOUGHVALUE = 4,
    }
}
namespace AbstractionLevels.ABSTRACTIONLEVELNAMERepository.ObjectTypes
{
    using System;
    using AbstractionLevels.ABSTRACTIONLEVELNAMERepository.ParameterTypes;
    using SemIOLibrary.Parameters;
    using SemIOLibrary.Parameters.GeometryParameters;
    using SemIOLibrary.Parameters.GeometryParameters.Surfaces;
    using SemIOLibrary.Parameters.GeometryParameters.Solids;
    using SemIOLibrary.Parameters.GeometryParameters.Points;
    using SemIOLibrary.Parameters.GeometryParameters.Curves;
    using SemIOLibrary.Parameters.BaseParameters;
    using SemIOLibrary.Parameters.BaseParameters.Numbers;
    
    
    [System.ComponentModel.Description("This is your first Object that has parameters. The PARAMETERTYPE can be a Paramet" +
        "er from above \r\n\tor a standard one like Point, Text, Curve, Number, ...")]
    public class OBJECTNAME
    {
        
        private Text _pARMATERNAMEOFTEXT;
        
        [System.ComponentModel.Description("Does it need to start with text? No of course not. Feel free to add any parameter" +
            " to define an object")]
        public Text PARMATERNAMEOFTEXT
        {
            get
            {
                return this._pARMATERNAMEOFTEXT;
            }
            set
            {
                this._pARMATERNAMEOFTEXT = value;
            }
        }
        
        private Point _pARMATERNAMEOFPoint;
        
        [System.ComponentModel.Description("")]
        public Point PARMATERNAMEOFPoint
        {
            get
            {
                return this._pARMATERNAMEOFPoint;
            }
            set
            {
                this._pARMATERNAMEOFPoint = value;
            }
        }
        
        private PARAMETERTYPENAME _pARAMTERTYPENAMENAME;
        
        [System.ComponentModel.Description("Wowoo this looks funky. Actually it is only a Paramter from above with a name.")]
        public PARAMETERTYPENAME PARAMTERTYPENAMENAME
        {
            get
            {
                return this._pARAMTERTYPENAMENAME;
            }
            set
            {
                this._pARAMTERTYPENAMENAME = value;
            }
        }
        
        private ANOTHERPARAMETERTYPENAME _aNOTHERPARAMETERTYPENAME;
        
        [System.ComponentModel.Description("Feel free you use the same name.")]
        public ANOTHERPARAMETERTYPENAME ANOTHERPARAMETERTYPENAME
        {
            get
            {
                return this._aNOTHERPARAMETERTYPENAME;
            }
            set
            {
                this._aNOTHERPARAMETERTYPENAME = value;
            }
        }
    }
    
    [System.ComponentModel.Description("You can make mark an Object as a specification of another Object. For example if " +
        "the first object is opening then\r\n\tyou can make two more objects door and window" +
        " that both are openings.")]
    public class ANOTHEROBJECTNAME : OBJECTNAME
    {
        
        private Number _nUMBERNAME;
        
        [System.ComponentModel.Description("You understood that it doesn\'t need to necissaraly be a Number")]
        public Number NUMBERNAME
        {
            get
            {
                return this._nUMBERNAME;
            }
            set
            {
                this._nUMBERNAME = value;
            }
        }
    }
}
namespace AbstractionLevels.ABSTRACTIONLEVELNAMERepository
{
    using System;
    using AbstractionLevels.ABSTRACTIONLEVELNAMERepository.ObjectTypes;
    
    
    [System.ComponentModel.Description("Your description for the ABSTRACTION LEVEL. By the way you don\'t have to change a" +
        "nything\r\nin this file to compile it. It is 100& correct by default and will comp" +
        "ile out of the box.")]
    public class ABSTRACTIONLEVELNAME
    {
        
        private System.Collections.Generic.List<OBJECTNAME> _oBJECTNAMECollection;
        
        [System.ComponentModel.Description("This is your first Object that has parameters. The PARAMETERTYPE can be a Paramet" +
            "er from above \r\n\tor a standard one like Point, Text, Curve, Number, ...")]
        public System.Collections.Generic.List<OBJECTNAME> OBJECTNAMECollection
        {
            get
            {
                return this._oBJECTNAMECollection;
            }
            set
            {
            }
        }
        
        private System.Collections.Generic.List<ANOTHEROBJECTNAME> _aNOTHEROBJECTNAMECollection;
        
        [System.ComponentModel.Description("You can make mark an Object as a specification of another Object. For example if " +
            "the first object is opening then\r\n\tyou can make two more objects door and window" +
            " that both are openings.")]
        public System.Collections.Generic.List<ANOTHEROBJECTNAME> ANOTHEROBJECTNAMECollection
        {
            get
            {
                return this._aNOTHEROBJECTNAMECollection;
            }
            set
            {
            }
        }
    }
}
namespace AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository.ParameterTypes
{
    using System;
    
}
namespace AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository.ObjectTypes
{
    using System;
    using AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository.ParameterTypes;
    using SemIOLibrary.Parameters;
    using SemIOLibrary.Parameters.GeometryParameters;
    using SemIOLibrary.Parameters.GeometryParameters.Surfaces;
    using SemIOLibrary.Parameters.GeometryParameters.Solids;
    using SemIOLibrary.Parameters.GeometryParameters.Points;
    using SemIOLibrary.Parameters.GeometryParameters.Curves;
    using SemIOLibrary.Parameters.BaseParameters;
    using SemIOLibrary.Parameters.BaseParameters.Numbers;
    
    
    [System.ComponentModel.Description("I don\'t need any special parameters for this abstraction level. Therefore I don\'t" +
        " need any Parameters.")]
    public class OBJECTNAME
    {
        
        private Surface _sURFACENAME;
        
        [System.ComponentModel.Description("")]
        public Surface SURFACENAME
        {
            get
            {
                return this._sURFACENAME;
            }
            set
            {
                this._sURFACENAME = value;
            }
        }
        
        private Solid _sOLIDNAME;
        
        [System.ComponentModel.Description("Last one and now go to compile this code. It will actually compile just like this" +
            "!")]
        public Solid SOLIDNAME
        {
            get
            {
                return this._sOLIDNAME;
            }
            set
            {
                this._sOLIDNAME = value;
            }
        }
    }
}
namespace AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository
{
    using System;
    using AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository.ObjectTypes;
    using AbstractionLevels.ABSTRACTIONLEVELNAMERepository;
    
    
    [System.ComponentModel.Description("Speaking of specification. Also abstraction levels can be a more in depth version" +
        " of another abstraction level.\r\na masterplan is more fuzzy than a roomplan. So y" +
        "ou need to say which one is more precise.")]
    public class ANOTHERABSTRACTIONLEVELNAME : ABSTRACTIONLEVELNAME
    {
        
        private System.Collections.Generic.List<OBJECTNAME> _oBJECTNAMECollection;
        
        [System.ComponentModel.Description("I don\'t need any special parameters for this abstraction level. Therefore I don\'t" +
            " need any Parameters.")]
        public System.Collections.Generic.List<OBJECTNAME> OBJECTNAMECollection
        {
            get
            {
                return this._oBJECTNAMECollection;
            }
            set
            {
            }
        }
    }
}
