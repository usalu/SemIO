//------------------------------------------------------------------------------
/// <autogenerated>
///     This code was generated by a tool.
///     Runtime Version: 4.0.30319.42000
///
///     Changes to this file may cause incorrect behavior and will be lost if 
///     the code is regenerated.
/// </autogenerated>
//------------------------------------------------------------------------------

//@cc_on
//@set @debug(off)

import System;

package AbstractionLevels.ABSTRACTIONLEVELNAMERepository.ParameterTypes
{
    
    public System.ComponentModel.Description("Your description for the PARAMETERTYPENAME. You can use the PARAMETERTYPENAME as " + 
"PARAMETERTYPE for an Object") 
    enum PARAMETERTYPENAME
    {
        
        VALUE = 0,
        
        ANOTHERVALUE = 1,
        
        ONEMOREVALUE = 2,
        
        LASTVALUE = 3,
    }
    
    public System.ComponentModel.Description("Note that ANOTHERPARAMETERTYPENAME can take multiple values at the same time beca" + 
"use of the [Multiple] tag.") Flags() 
    enum ANOTHERPARAMETERTYPENAME
    {
        
        VALUE = 1,
        
        SECONDVALUE = 2,
        
        THATSENOUGHVALUE = 4,
    }
}
//@cc_on
//@set @debug(off)

import System;
import AbstractionLevels.ABSTRACTIONLEVELNAMERepository.ParameterTypes;
import SemIOLibrary.Parameters;
import SemIOLibrary.Parameters.GeometryParameters;
import SemIOLibrary.Parameters.GeometryParameters.Surfaces;
import SemIOLibrary.Parameters.GeometryParameters.Solids;
import SemIOLibrary.Parameters.GeometryParameters.Points;
import SemIOLibrary.Parameters.GeometryParameters.Curves;
import SemIOLibrary.Parameters.BaseParameters;
import SemIOLibrary.Parameters.BaseParameters.Numbers;

package AbstractionLevels.ABSTRACTIONLEVELNAMERepository.ObjectTypes
{
    
    public System.ComponentModel.Description("This is your first Object that has parameters. The PARAMETERTYPE can be a Paramet" + 
"er from above \r\n\tor a standard one like Point, Text, Curve, Number, ...") 
    class OBJECTNAME
    {
        
        private var _pARMATERNAMEOFTEXT : Text;
        
        public final System.ComponentModel.Description("Does it need to start with text? No of course not. Feel free to add any parameter" + 
" to define an object") 
        function get PARMATERNAMEOFTEXT() : Text
        {
            return this._pARMATERNAMEOFTEXT;
        }
        public final function set PARMATERNAMEOFTEXT(value : Text)
        {
            this._pARMATERNAMEOFTEXT = value;
        }
        
        private var _pARMATERNAMEOFPoint : Point;
        
        public final System.ComponentModel.Description("") 
        function get PARMATERNAMEOFPoint() : Point
        {
            return this._pARMATERNAMEOFPoint;
        }
        public final function set PARMATERNAMEOFPoint(value : Point)
        {
            this._pARMATERNAMEOFPoint = value;
        }
        
        private var _pARAMTERTYPENAMENAME : PARAMETERTYPENAME;
        
        public final System.ComponentModel.Description("Wowoo this looks funky. Actually it is only a Paramter from above with a name.") 
        function get PARAMTERTYPENAMENAME() : PARAMETERTYPENAME
        {
            return this._pARAMTERTYPENAMENAME;
        }
        public final function set PARAMTERTYPENAMENAME(value : PARAMETERTYPENAME)
        {
            this._pARAMTERTYPENAMENAME = value;
        }
        
        private var _aNOTHERPARAMETERTYPENAME : ANOTHERPARAMETERTYPENAME;
        
        public final System.ComponentModel.Description("Feel free you use the same name.") 
        function get ANOTHERPARAMETERTYPENAME() : ANOTHERPARAMETERTYPENAME
        {
            return this._aNOTHERPARAMETERTYPENAME;
        }
        public final function set ANOTHERPARAMETERTYPENAME(value : ANOTHERPARAMETERTYPENAME)
        {
            this._aNOTHERPARAMETERTYPENAME = value;
        }
    }
    
    public System.ComponentModel.Description("You can make mark an Object as a specification of another Object. For example if " + 
"the first object is opening then\r\n\tyou can make two more objects door and window" + 
" that both are openings.") 
    class ANOTHEROBJECTNAME extends OBJECTNAME
    {
        
        private var _nUMBERNAME : Number;
        
        public final System.ComponentModel.Description("You understood that it doesn\'t need to necissaraly be a Number") 
        function get NUMBERNAME() : Number
        {
            return this._nUMBERNAME;
        }
        public final function set NUMBERNAME(value : Number)
        {
            this._nUMBERNAME = value;
        }
    }
}
//@cc_on
//@set @debug(off)

import System;
import AbstractionLevels.ABSTRACTIONLEVELNAMERepository.ObjectTypes;

package AbstractionLevels.ABSTRACTIONLEVELNAMERepository
{
    
    public System.ComponentModel.Description("Your description for the ABSTRACTION LEVEL. By the way you don\'t have to change a" + 
"nything\r\nin this file to compile it. It is 100& correct by default and will comp" + 
"ile out of the box.") 
    class ABSTRACTIONLEVELNAME
    {
        
        private var _oBJECTNAMECollection : System.Collections.Generic.List`1;
        
        public final System.ComponentModel.Description("This is your first Object that has parameters. The PARAMETERTYPE can be a Paramet" + 
"er from above \r\n\tor a standard one like Point, Text, Curve, Number, ...") 
        function get OBJECTNAMECollection() : System.Collections.Generic.List`1
        {
            return this._oBJECTNAMECollection;
        }
        public final function set OBJECTNAMECollection(value : System.Collections.Generic.List`1)
        {
        }
        
        private var _aNOTHEROBJECTNAMECollection : System.Collections.Generic.List`1;
        
        public final System.ComponentModel.Description("You can make mark an Object as a specification of another Object. For example if " + 
"the first object is opening then\r\n\tyou can make two more objects door and window" + 
" that both are openings.") 
        function get ANOTHEROBJECTNAMECollection() : System.Collections.Generic.List`1
        {
            return this._aNOTHEROBJECTNAMECollection;
        }
        public final function set ANOTHEROBJECTNAMECollection(value : System.Collections.Generic.List`1)
        {
        }
    }
}
//@cc_on
//@set @debug(off)

import System;

package AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository.ParameterTypes
{
}
//@cc_on
//@set @debug(off)

import System;
import AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository.ParameterTypes;
import SemIOLibrary.Parameters;
import SemIOLibrary.Parameters.GeometryParameters;
import SemIOLibrary.Parameters.GeometryParameters.Surfaces;
import SemIOLibrary.Parameters.GeometryParameters.Solids;
import SemIOLibrary.Parameters.GeometryParameters.Points;
import SemIOLibrary.Parameters.GeometryParameters.Curves;
import SemIOLibrary.Parameters.BaseParameters;
import SemIOLibrary.Parameters.BaseParameters.Numbers;

package AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository.ObjectTypes
{
    
    public System.ComponentModel.Description("I don\'t need any special parameters for this abstraction level. Therefore I don\'t" + 
" need any Parameters.") 
    class OBJECTNAME
    {
        
        private var _sURFACENAME : Surface;
        
        public final System.ComponentModel.Description("") 
        function get SURFACENAME() : Surface
        {
            return this._sURFACENAME;
        }
        public final function set SURFACENAME(value : Surface)
        {
            this._sURFACENAME = value;
        }
        
        private var _sOLIDNAME : Solid;
        
        public final System.ComponentModel.Description("Last one and now go to compile this code. It will actually compile just like this" + 
"!") 
        function get SOLIDNAME() : Solid
        {
            return this._sOLIDNAME;
        }
        public final function set SOLIDNAME(value : Solid)
        {
            this._sOLIDNAME = value;
        }
    }
}
//@cc_on
//@set @debug(off)

import System;
import AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository.ObjectTypes;
import AbstractionLevels.ABSTRACTIONLEVELNAMERepository;

package AbstractionLevels.ANOTHERABSTRACTIONLEVELNAMERepository
{
    
    public System.ComponentModel.Description("Speaking of specification. Also abstraction levels can be a more in depth version" + 
" of another abstraction level.\r\na masterplan is more fuzzy than a roomplan. So y" + 
"ou need to say which one is more precise.") 
    class ANOTHERABSTRACTIONLEVELNAME extends ABSTRACTIONLEVELNAME
    {
        
        private var _oBJECTNAMECollection : System.Collections.Generic.List`1;
        
        public final System.ComponentModel.Description("I don\'t need any special parameters for this abstraction level. Therefore I don\'t" + 
" need any Parameters.") 
        function get OBJECTNAMECollection() : System.Collections.Generic.List`1
        {
            return this._oBJECTNAMECollection;
        }
        public final function set OBJECTNAMECollection(value : System.Collections.Generic.List`1)
        {
        }
    }
}
