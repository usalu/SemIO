//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AbstractionLevels.MasterplanRepository.ParameterTypes
{
    using System;
    
    
    [System.ComponentModel.Description("Defines the designated use of a parcel")]
    public enum Use
    {
        
        [System.ComponentModel.Description("Mainly factories in the landscape")]
        Industrial = 0,
        
        [System.ComponentModel.Description("")]
        Residential = 1,
        
        [System.ComponentModel.Description("Building areas where buildings are touching and streets are formed by enclosing b" +
            "uildings")]
        Urban = 2,
        
        [System.ComponentModel.Description("")]
        Mixed = 3,
    }
    
    [System.ComponentModel.Description("Describes an emotion regarding a building")]
    [Flags()]
    public enum Emotions
    {
        
        [System.ComponentModel.Description("")]
        Ecstasy = 1,
        
        [System.ComponentModel.Description("")]
        Admiration = 2,
        
        [System.ComponentModel.Description("")]
        Terror = 4,
        
        [System.ComponentModel.Description("")]
        Amazement = 8,
        
        [System.ComponentModel.Description("")]
        Grief = 16,
        
        [System.ComponentModel.Description("")]
        Loathing = 32,
        
        [System.ComponentModel.Description("")]
        Rage = 64,
        
        [System.ComponentModel.Description("")]
        Vigilance = 128,
    }
}
namespace AbstractionLevels.MasterplanRepository.ObjectTypes
{
    using System;
    using AbstractionLevels.MasterplanRepository.ParameterTypes;
    using SemIOLibrary.Parameters;
    using SemIOLibrary.Parameters.GeometryParameters;
    using SemIOLibrary.Parameters.GeometryParameters.Surfaces;
    using SemIOLibrary.Parameters.GeometryParameters.Solids;
    using SemIOLibrary.Parameters.GeometryParameters.Points;
    using SemIOLibrary.Parameters.GeometryParameters.Curves;
    using SemIOLibrary.Parameters.BaseParameters;
    using SemIOLibrary.Parameters.BaseParameters.Numbers;
    
    
    [System.ComponentModel.Description("Describes a volume with a use")]
    public class BuildingVolume
    {
        
        private ClosedCurve _parcel;
        
        [System.ComponentModel.Description("")]
        public ClosedCurve Parcel
        {
            get
            {
                return this._parcel;
            }
            set
            {
                this._parcel = value;
            }
        }
        
        private Use _use;
        
        [System.ComponentModel.Description("")]
        public Use Use
        {
            get
            {
                return this._use;
            }
            set
            {
                this._use = value;
            }
        }
        
        private Number _height;
        
        [System.ComponentModel.Description("")]
        public Number Height
        {
            get
            {
                return this._height;
            }
            set
            {
                this._height = value;
            }
        }
        
        private Emotions _reactions;
        
        [System.ComponentModel.Description("")]
        public Emotions Reactions
        {
            get
            {
                return this._reactions;
            }
            set
            {
                this._reactions = value;
            }
        }
    }
    
    [System.ComponentModel.Description("Describes adjacent building volumes")]
    public class BuildingBlock
    {
        
        private BuildingVolume _buildingVolumes;
        
        [System.ComponentModel.Description("")]
        public BuildingVolume BuildingVolumes
        {
            get
            {
                return this._buildingVolumes;
            }
            set
            {
                this._buildingVolumes = value;
            }
        }
    }
}
namespace AbstractionLevels.MasterplanRepository
{
    using System;
    using AbstractionLevels.MasterplanRepository.ObjectTypes;
    
    
    [System.ComponentModel.Description("Massing studies and infrastructure including public transportation (Simillar to 1" +
        "to500)")]
    public class Masterplan
    {
        
        private System.Collections.Generic.List<BuildingVolume> _buildingVolumeCollection;
        
        [System.ComponentModel.Description("Describes a volume with a use")]
        public System.Collections.Generic.List<BuildingVolume> BuildingVolumeCollection
        {
            get
            {
                return this._buildingVolumeCollection;
            }
            set
            {
            }
        }
        
        private System.Collections.Generic.List<BuildingBlock> _buildingBlockCollection;
        
        [System.ComponentModel.Description("Describes adjacent building volumes")]
        public System.Collections.Generic.List<BuildingBlock> BuildingBlockCollection
        {
            get
            {
                return this._buildingBlockCollection;
            }
            set
            {
            }
        }
    }
}
namespace AbstractionLevels.ApartmentplanRepository.ParameterTypes
{
    using System;
    
    
    [System.ComponentModel.Description("Describing how an aprartment can be reached with")]
    public enum Accessability
    {
        
        [System.ComponentModel.Description("")]
        Walking = 0,
        
        [System.ComponentModel.Description("")]
        Rollator = 1,
        
        [System.ComponentModel.Description("")]
        Wheelchair = 2,
    }
}
namespace AbstractionLevels.ApartmentplanRepository.ObjectTypes
{
    using System;
    using AbstractionLevels.ApartmentplanRepository.ParameterTypes;
    using SemIOLibrary.Parameters;
    using SemIOLibrary.Parameters.GeometryParameters;
    using SemIOLibrary.Parameters.GeometryParameters.Surfaces;
    using SemIOLibrary.Parameters.GeometryParameters.Solids;
    using SemIOLibrary.Parameters.GeometryParameters.Points;
    using SemIOLibrary.Parameters.GeometryParameters.Curves;
    using SemIOLibrary.Parameters.BaseParameters;
    using SemIOLibrary.Parameters.BaseParameters.Numbers;
    
    
    [System.ComponentModel.Description("Most general information about an apartment")]
    public class Apartment
    {
        
        private ClosedCurve _boundary;
        
        [System.ComponentModel.Description("Only one storey footpring of apartment.")]
        public ClosedCurve Boundary
        {
            get
            {
                return this._boundary;
            }
            set
            {
                this._boundary = value;
            }
        }
        
        private Point _entrance;
        
        [System.ComponentModel.Description("")]
        public Point Entrance
        {
            get
            {
                return this._entrance;
            }
            set
            {
                this._entrance = value;
            }
        }
        
        private Integer _countPeople;
        
        [System.ComponentModel.Description("")]
        public Integer CountPeople
        {
            get
            {
                return this._countPeople;
            }
            set
            {
                this._countPeople = value;
            }
        }
        
        private Accessability _accessability;
        
        [System.ComponentModel.Description("")]
        public Accessability Accessability
        {
            get
            {
                return this._accessability;
            }
            set
            {
                this._accessability = value;
            }
        }
    }
    
    [System.ComponentModel.Description("General inforamtion about how the building is accessed")]
    public class Circulation
    {
        
        private ClosedCurve _boundary;
        
        [System.ComponentModel.Description("")]
        public ClosedCurve Boundary
        {
            get
            {
                return this._boundary;
            }
            set
            {
                this._boundary = value;
            }
        }
        
        private Point _mainEntrances;
        
        [System.ComponentModel.Description("")]
        public Point MainEntrances
        {
            get
            {
                return this._mainEntrances;
            }
            set
            {
                this._mainEntrances = value;
            }
        }
        
        private ClosedCurve _staircase;
        
        [System.ComponentModel.Description("")]
        public ClosedCurve Staircase
        {
            get
            {
                return this._staircase;
            }
            set
            {
                this._staircase = value;
            }
        }
    }
}
namespace AbstractionLevels.ApartmentplanRepository
{
    using System;
    using AbstractionLevels.ApartmentplanRepository.ObjectTypes;
    using AbstractionLevels.MasterplanRepository;
    
    
    [System.ComponentModel.Description("General information about layout and accessability of the apartment equivalent to" +
        " 1to200 in analogue scale")]
    public class Apartmentplan : Masterplan
    {
        
        private System.Collections.Generic.List<Apartment> _apartmentCollection;
        
        [System.ComponentModel.Description("Most general information about an apartment")]
        public System.Collections.Generic.List<Apartment> ApartmentCollection
        {
            get
            {
                return this._apartmentCollection;
            }
            set
            {
            }
        }
        
        private System.Collections.Generic.List<Circulation> _circulationCollection;
        
        [System.ComponentModel.Description("General inforamtion about how the building is accessed")]
        public System.Collections.Generic.List<Circulation> CirculationCollection
        {
            get
            {
                return this._circulationCollection;
            }
            set
            {
            }
        }
    }
}
namespace AbstractionLevels.RoomplanRepository.ParameterTypes
{
    using System;
    
    
    [System.ComponentModel.Description("Direction of door wing")]
    public enum DoorDirection
    {
        
        [System.ComponentModel.Description("")]
        Inside = 0,
        
        [System.ComponentModel.Description("")]
        Outside = 1,
    }
    
    [System.ComponentModel.Description("Activities that happen in a room")]
    [Flags()]
    public enum Activities
    {
        
        [System.ComponentModel.Description("")]
        Sleeping = 1,
        
        [System.ComponentModel.Description("")]
        Relaxing = 2,
        
        [System.ComponentModel.Description("")]
        Working = 4,
        
        [System.ComponentModel.Description("")]
        Cooking = 8,
        
        [System.ComponentModel.Description("")]
        Showering = 16,
        
        [System.ComponentModel.Description("")]
        Bathing = 32,
    }
    
    [System.ComponentModel.Description("Describing how much noise will be emmited from the room")]
    public enum NoiseLevel
    {
        
        [System.ComponentModel.Description("under 20 dB")]
        VeryQuiet = 0,
        
        [System.ComponentModel.Description("20 - 40 dB")]
        Quiet = 1,
        
        [System.ComponentModel.Description("40 - 60 dB")]
        ConversationLevel = 2,
        
        [System.ComponentModel.Description("over 60 dB")]
        Loud = 3,
    }
}
namespace AbstractionLevels.RoomplanRepository.ObjectTypes
{
    using System;
    using AbstractionLevels.RoomplanRepository.ParameterTypes;
    using SemIOLibrary.Parameters;
    using SemIOLibrary.Parameters.GeometryParameters;
    using SemIOLibrary.Parameters.GeometryParameters.Surfaces;
    using SemIOLibrary.Parameters.GeometryParameters.Solids;
    using SemIOLibrary.Parameters.GeometryParameters.Points;
    using SemIOLibrary.Parameters.GeometryParameters.Curves;
    using SemIOLibrary.Parameters.BaseParameters;
    using SemIOLibrary.Parameters.BaseParameters.Numbers;
    
    
    [System.ComponentModel.Description("Generic base class for openings")]
    public class Opening
    {
        
        private Point _center;
        
        [System.ComponentModel.Description("")]
        public Point Center
        {
            get
            {
                return this._center;
            }
            set
            {
                this._center = value;
            }
        }
        
        private Number _width;
        
        [System.ComponentModel.Description("")]
        public Number Width
        {
            get
            {
                return this._width;
            }
            set
            {
                this._width = value;
            }
        }
        
        private Number _height;
        
        [System.ComponentModel.Description("")]
        public Number Height
        {
            get
            {
                return this._height;
            }
            set
            {
                this._height = value;
            }
        }
    }
    
    [System.ComponentModel.Description("Abstract window definition")]
    public class Window : Opening
    {
        
        private Number _parapetHeight;
        
        [System.ComponentModel.Description("")]
        public Number ParapetHeight
        {
            get
            {
                return this._parapetHeight;
            }
            set
            {
                this._parapetHeight = value;
            }
        }
    }
    
    [System.ComponentModel.Description("Abstract door definition")]
    public class Door : Opening
    {
        
        private DoorDirection _doorDirection;
        
        [System.ComponentModel.Description("")]
        public DoorDirection DoorDirection
        {
            get
            {
                return this._doorDirection;
            }
            set
            {
                this._doorDirection = value;
            }
        }
    }
    
    [System.ComponentModel.Description("Abstract definition of a room with doors and windows")]
    public class Room
    {
        
        private ClosedCurve _boundary;
        
        [System.ComponentModel.Description("")]
        public ClosedCurve Boundary
        {
            get
            {
                return this._boundary;
            }
            set
            {
                this._boundary = value;
            }
        }
        
        private Window _windows;
        
        [System.ComponentModel.Description("")]
        public Window Windows
        {
            get
            {
                return this._windows;
            }
            set
            {
                this._windows = value;
            }
        }
        
        private Door _doors;
        
        [System.ComponentModel.Description("")]
        public Door Doors
        {
            get
            {
                return this._doors;
            }
            set
            {
                this._doors = value;
            }
        }
        
        private Activities _activities;
        
        [System.ComponentModel.Description("")]
        public Activities Activities
        {
            get
            {
                return this._activities;
            }
            set
            {
                this._activities = value;
            }
        }
    }
}
namespace AbstractionLevels.RoomplanRepository
{
    using System;
    using AbstractionLevels.RoomplanRepository.ObjectTypes;
    using AbstractionLevels.ApartmentplanRepository;
    
    
    [System.ComponentModel.Description("Inforamtion about rooms, relations between them and openings(windows and doors). " +
        "Comparable to 1to100")]
    public class Roomplan : Apartmentplan
    {
        
        private System.Collections.Generic.List<Opening> _openingCollection;
        
        [System.ComponentModel.Description("Generic base class for openings")]
        public System.Collections.Generic.List<Opening> OpeningCollection
        {
            get
            {
                return this._openingCollection;
            }
            set
            {
            }
        }
        
        private System.Collections.Generic.List<Window> _windowCollection;
        
        [System.ComponentModel.Description("Abstract window definition")]
        public System.Collections.Generic.List<Window> WindowCollection
        {
            get
            {
                return this._windowCollection;
            }
            set
            {
            }
        }
        
        private System.Collections.Generic.List<Door> _doorCollection;
        
        [System.ComponentModel.Description("Abstract door definition")]
        public System.Collections.Generic.List<Door> DoorCollection
        {
            get
            {
                return this._doorCollection;
            }
            set
            {
            }
        }
        
        private System.Collections.Generic.List<Room> _roomCollection;
        
        [System.ComponentModel.Description("Abstract definition of a room with doors and windows")]
        public System.Collections.Generic.List<Room> RoomCollection
        {
            get
            {
                return this._roomCollection;
            }
            set
            {
            }
        }
    }
}
