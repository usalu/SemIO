{
  "swagger": "2.0",
  "info": {
    "title": "manager/v1/manager.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ManagerService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Adapting": {
      "type": "object",
      "properties": {
        "platformUrl": {
          "type": "string",
          "description": "A url for the platform that is adapted."
        }
      },
      "description": "Description what an adapter is adapting to."
    },
    "v1Connectable": {
      "type": "object",
      "properties": {
        "sobjectId": {
          "type": "string",
          "description": "Id of connecting sobject."
        },
        "pose": {
          "$ref": "#/definitions/v1Pose",
          "description": "The (rough) pose of the connecting sobject. Note that in the connection process it will most likely be displaced and adjusted."
        },
        "representationProtocol": {
          "$ref": "#/definitions/v1RepresentationProtocol",
          "description": "An optional representation of the participant."
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional port names to connect to. The hierarchy should matter"
        },
        "bias": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional parameters to bias the connection."
        }
      },
      "description": "A connectable connects in an connection process."
    },
    "v1Connection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other connections."
        },
        "connecting": {
          "$ref": "#/definitions/v1Connectable",
          "description": "The connecting sobject. It is interchangable with the connected."
        },
        "connected": {
          "$ref": "#/definitions/v1Connectable",
          "description": "The connected sobject. It is interchangable with the connecting."
        }
      },
      "description": "An connection can be used to connect two connectables."
    },
    "v1ConnectionResponse": {
      "type": "object",
      "properties": {
        "connectedPose": {
          "$ref": "#/definitions/v1Pose"
        },
        "connectionPoint": {
          "$ref": "#/definitions/v1Point"
        }
      }
    },
    "v1Converting": {
      "type": "object",
      "properties": {
        "sourceTypeUrl": {
          "type": "string"
        },
        "targetTypeUrl": {
          "type": "string"
        }
      },
      "description": "Description what a converter is converting."
    },
    "v1Element": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the sobject that was used to create the element is also the element id."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Representation"
          }
        },
        "description": {
          "type": "string",
          "description": "An optional human readable description of the element."
        }
      },
      "description": "An element is the atom of a design. It has several representations and a pose."
    },
    "v1Encoding": {
      "type": "string",
      "enum": [
        "ENCODING_TEXT_UFT8",
        "ENCODING_TEXT_UFT16",
        "ENCODING_TEXT_UFT32",
        "ENCODING_TEXT_ASCII",
        "ENCODING_TEXT_BASE64"
      ],
      "default": "ENCODING_TEXT_UFT8",
      "description": "Encoding of a byte array.\n\n - ENCODING_TEXT_BASE64: Also ASCII but with further base 64 encoding of the text."
    },
    "v1Extending": {
      "type": "object",
      "properties": {
        "adaptings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Adapting"
          },
          "description": "A summary of all descriptions about the translator."
        },
        "convertings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Converting"
          },
          "description": "A summary of all descriptions about the converter."
        },
        "transformings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Transforming"
          },
          "description": "A summary of all descriptions about the transformer."
        },
        "translatings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Translating"
          },
          "description": "A summary of all descriptions about the translator."
        }
      },
      "description": "A description of what the extension is extending."
    },
    "v1ExtensionRegistrationResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "oldAddress": {
          "type": "string",
          "description": "The old address of the same service type if there was one."
        }
      }
    },
    "v1FileType": {
      "type": "string",
      "enum": [
        "FILETYPE_NATIVE",
        "FILETYPE_JSON",
        "FILETYPE_XML",
        "FILETYPE_YAML",
        "FILETYPE_TOML",
        "FILETYPE_STEP",
        "FILETYPE_PY",
        "FILETYPE_C",
        "FILETYPE_CPP",
        "FILETYPE_CSHARP",
        "FILETYPE_GO",
        "FILETYPE_RUST"
      ],
      "default": "FILETYPE_NATIVE",
      "title": "- FILETYPE_NATIVE: Native serialization according platform. Use this only when it is none of the others.\r\nOften files have a platform specific extension but if you open them in a text editor you can see that they are serialized in a standard format.\n - FILETYPE_STEP: https://www.iso.org/standard/63141.html\n - FILETYPE_PY: Python\n - FILETYPE_CPP: C++\n - FILETYPE_CSHARP: C#\n - FILETYPE_GO: Golang"
    },
    "v1Platform": {
      "type": "string",
      "enum": [
        "PLATFORM_SEMIO",
        "PLATFORM_THREE",
        "PLATFORM_SVERCHOK",
        "PLATFORM_IFCOPENSHELL",
        "PLATFORM_CADQUERY",
        "PLATFORM_FREECAD",
        "PLATFORM_OPENSCAD",
        "PLATFORM_JSCAD",
        "PLATFORM_Fornjot",
        "PLATFORM_TRUCK",
        "PLATFORM_RHINO",
        "PLATFORM_GRASSHOPPER",
        "PLATFORM_REVIT",
        "PLATFORM_DYNAMO"
      ],
      "default": "PLATFORM_SEMIO",
      "description": "- PLATFORM_SEMIO: https://github.com/usalu/semio\n - PLATFORM_THREE: https://github.com/mrdoob/three.js/\n - PLATFORM_SVERCHOK: https://github.com/nortikin/sverchok\n - PLATFORM_IFCOPENSHELL: https://github.com/IfcOpenShell\n - PLATFORM_CADQUERY: https://github.com/CadQuery\n - PLATFORM_FREECAD: https://github.com/FreeCAD\n - PLATFORM_OPENSCAD: https://github.com/openscad\n - PLATFORM_JSCAD: https://github.com/jscad\n - PLATFORM_Fornjot: https://github.com/hannobraun/Fornjot\n - PLATFORM_TRUCK: https://github.com/ricosjp/truck\n - PLATFORM_RHINO: https://www.rhino3d.com/\n - PLATFORM_GRASSHOPPER: https://www.grasshopper3d.com/\n - PLATFORM_REVIT: https://www.autodesk.de/products/revit/\n - PLATFORM_DYNAMO: https://dynamobim.org/",
      "title": "Platform. Constants are encoded with pattern LICENSE [3] + OWNERTYPE [2] + OWNERID [3] + PLATFORMID [2]\r\nLICENSE after https://spdx.org/licenses/: \r\n0:AGPL-3.0-or-later,\r\n50:GPL-3.0+,51:GPL-3.0,52:GPL-2.0+,53:GPL-2.0\r\n100:LGPL-3.0-or-later,101:LGPL-3.0-only\r\n150:MIT,160:Apache-2.0,170:0BSD\r\n214:Closed\r\nOWNER starting with OWNERTYPE:\r\n0:INDIVIDUALS: 0:usalu,1:mrdoob,2:nortikin,3:hannobraun,4:ricosjp\r\n1:COLLECTIVE: 0:ifcopenshell,1:cadquery,2:freecad,3:openscad,4:jscad\r\n2:NONPROFIT: 0:buildingsmart\r\n3:COMPANY: 0:mcneel,1:autodesk,2:nemetschek,3:esri"
    },
    "v1Point": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double",
          "description": "x coordinate."
        },
        "y": {
          "type": "number",
          "format": "double",
          "title": "y coordinate"
        },
        "z": {
          "type": "number",
          "format": "double",
          "title": "z coordinate"
        }
      },
      "description": "A 3d point with x,y,z coordinates."
    },
    "v1Pose": {
      "type": "object",
      "properties": {
        "pointOfView": {
          "$ref": "#/definitions/v1Point"
        },
        "view": {
          "$ref": "#/definitions/v1Quaternion"
        }
      },
      "description": "A pose is a reference frame with a point of view (origin) and orientation (view)."
    },
    "v1Quaternion": {
      "type": "object",
      "properties": {
        "w": {
          "type": "number",
          "format": "double"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "z": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Quaternions represent (here) (rotational) orientation. It can be interpreted as the view of an element."
    },
    "v1RegisteredExtensionsResponse": {
      "type": "object",
      "properties": {
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Extending"
          },
          "description": "A map with extensions where the address is the key and the extension description is the value."
        }
      }
    },
    "v1Representation": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "format": "byte",
          "description": "The body depends on the serialization format of the representation."
        },
        "encoding": {
          "$ref": "#/definitions/v1Encoding",
          "title": "Encoding of the body"
        },
        "fileType": {
          "$ref": "#/definitions/v1FileType",
          "description": "Use the abbreviation of the platform. You can find that in the constants part of the package."
        },
        "platform": {
          "$ref": "#/definitions/v1Platform",
          "title": "Native platform of representation"
        },
        "description": {
          "type": "string",
          "description": "A description of the representation for humans to understand what the purpose of this representation is."
        },
        "concepts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Add a list of concepts that help filtering representations. This can be used for functional purpose (e.g. statical, energetical, ...) or for visualization purpose (e.g. volumetric,comic, , ...)."
        },
        "lod": {
          "type": "string",
          "format": "int64",
          "title": "Level of detail allows to further define representation details. Like name this can be used either for visualization purpose (e.g. 200 (scale 1to200)) or functional purpose (e.g level of structural detail)\r\nFor architectural design it is recommended to choose the scale multiplier.\r\nFor BIM you might want to choose:\r\n100:Conceptual\r\n200:Approximate\r\n300:Precise\r\n400:Fabriaction\r\n500:Real"
        }
      },
      "description": "A representation for an element. Basically a file with some semio specific metadata."
    },
    "v1RepresentationProtocol": {
      "type": "string",
      "enum": [
        "REPRESENTATIONPROTOCOL_NONE",
        "REPRESENTATIONPROTOCOL_SIMPLE",
        "REPRESENTATIONPROTOCOL_FULL"
      ],
      "default": "REPRESENTATIONPROTOCOL_NONE",
      "description": "The representation protocol determines what type of representation the connecting will see of the connected in the connection process.\n\n - REPRESENTATIONPROTOCOL_NONE: The connecting sees no representation of the connected.\n - REPRESENTATIONPROTOCOL_SIMPLE: In the simple representation protocol everything is represented by a point.\n - REPRESENTATIONPROTOCOL_FULL: In the full representation protocol everything is represented by its native form where all information is available. This will most likely lead to strong coupled elements. Only use when absolutely necessary."
    },
    "v1Sobject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other sobjects."
        },
        "url": {
          "type": "string",
          "description": "The url of the element definition."
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Parameters for the element."
        }
      },
      "description": "Instance information for an element."
    },
    "v1Transforming": {
      "type": "object",
      "description": "Description what a transformer is transforming."
    },
    "v1Translating": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        }
      },
      "description": "Description what a translator is translating."
    }
  }
}
