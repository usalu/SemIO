{
  "swagger": "2.0",
  "info": {
    "title": "Semio",
    "version": "0.0.1",
    "contact": {
      "name": "Ueli Saluz",
      "url": "https://github.com/usalu/semio",
      "email": "semio@posteo.org"
    },
    "license": {
      "name": "AGPL-3.0-or-later"
    }
  },
  "tags": [
    {
      "name": "GatewayService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/layoutdesign": {
      "post": {
        "summary": "Lay out a design from a layout and return a design.",
        "operationId": "GatewayService_LayoutDesign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Design"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LayoutDesignRequest"
            }
          }
        ],
        "tags": [
          "GatewayService"
        ]
      }
    }
  },
  "definitions": {
    "modelv1Value": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "number": {
          "type": "number",
          "format": "double"
        },
        "integerNumber": {
          "type": "integer",
          "format": "int32"
        },
        "naturalNumber": {
          "type": "integer",
          "format": "int64"
        },
        "point": {
          "$ref": "#/definitions/v1Point"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Assembly": {
      "type": "object",
      "properties": {
        "sobjectId": {
          "type": "string",
          "description": "The id of the sobject to place."
        },
        "parts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Assembly"
          },
          "description": "The parts of an assembly (tree) are again assemblies."
        }
      },
      "description": "An assembly (tree) defines a subset of a layout that can be assembled unambiguously."
    },
    "v1Connectable": {
      "type": "object",
      "properties": {
        "sobjectId": {
          "type": "string",
          "description": "Id of connectable (sobject)."
        },
        "link": {
          "$ref": "#/definitions/v1Link",
          "description": "A link for the connectable (sobject)."
        }
      },
      "description": "A connectable (sobject) connects in an connection process."
    },
    "v1Connection": {
      "type": "object",
      "properties": {
        "connecting": {
          "$ref": "#/definitions/v1Connectable",
          "description": "The connecting sobject. It is interchangable with the connected."
        },
        "connected": {
          "$ref": "#/definitions/v1Connectable",
          "description": "The connected sobject. It is interchangable with the connecting."
        }
      },
      "description": "An connection can be used to connect two connectables."
    },
    "v1Design": {
      "type": "object",
      "properties": {
        "prototypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Prototype"
          }
        },
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Element"
          }
        }
      },
      "description": "A design is an aggregation of elements (actually element instances)."
    },
    "v1Element": {
      "type": "object",
      "properties": {
        "sobjectId": {
          "type": "string",
          "description": "The sobject id that was used to construct the element."
        },
        "prototypePlanHash": {
          "type": "string",
          "description": "The hash of the plan for the prototype of the element."
        },
        "pose": {
          "$ref": "#/definitions/v1Pose",
          "description": "The pose of the element instance.\n\nTODO: Think of a formalization for modifiers.\r\n repeated Modifier modifiers = 3;"
        }
      },
      "description": "An element is the atom of a design. It has several representations and a pose."
    },
    "v1Encoding": {
      "type": "string",
      "enum": [
        "ENCODING_TEXT_UFT8",
        "ENCODING_TEXT_UFT16",
        "ENCODING_TEXT_UFT32",
        "ENCODING_TEXT_ASCII",
        "ENCODING_TEXT_BASE64"
      ],
      "default": "ENCODING_TEXT_UFT8",
      "description": "Encoding of a byte array.\n\n - ENCODING_TEXT_BASE64: Also ASCII but with further base 64 encoding of the text."
    },
    "v1FileType": {
      "type": "string",
      "enum": [
        "FILETYPE_NATIVE",
        "FILETYPE_JSON",
        "FILETYPE_XML",
        "FILETYPE_YAML",
        "FILETYPE_TOML",
        "FILETYPE_STEP",
        "FILETYPE_PY",
        "FILETYPE_C",
        "FILETYPE_CPP",
        "FILETYPE_CSHARP",
        "FILETYPE_GO",
        "FILETYPE_RUST"
      ],
      "default": "FILETYPE_NATIVE",
      "title": "- FILETYPE_NATIVE: Native serialization according platform. Use this only when it is none of the others.\r\nOften files have a platform specific extension but if you open them in a text editor you can see that they are serialized in a standard format.\n - FILETYPE_STEP: https://www.iso.org/standard/63141.html\n - FILETYPE_PY: Python\n - FILETYPE_CPP: C++\n - FILETYPE_CSHARP: C#\n - FILETYPE_GO: Golang"
    },
    "v1Layout": {
      "type": "object",
      "properties": {
        "sobjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Sobject"
          },
          "description": "Sobjects (nodes) that are part of the layout (graph)."
        },
        "connections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Connection"
          },
          "description": "Connections (edges) that are part of the layout (graph)."
        },
        "strategy": {
          "$ref": "#/definitions/v1LayoutStrategy"
        },
        "assemblies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Assembly"
          },
          "description": "Optional assemblies that can possibly unambiguously describe the layout order of sobjects.\r\nMost of the time this field is only necissary when elements that don't work well together in a general way.\r\nTherefore if you can update the element definitions to be more robust, rather use your time for that."
        }
      },
      "description": "A layout (graph) is a plan for a set of sobjects and their connections between each other."
    },
    "v1LayoutDesignRequest": {
      "type": "object",
      "properties": {
        "layout": {
          "$ref": "#/definitions/v1Layout",
          "title": "The layout that"
        },
        "targetPlatform": {
          "$ref": "#/definitions/v1Platform",
          "description": "An optional target platform which will try to convert all elements into it."
        }
      }
    },
    "v1LayoutStrategy": {
      "type": "string",
      "enum": [
        "LAYOUTSTRATEGY_BREADTHFIRST",
        "LAYOUTSTRATEGY_DEPTHFIRST"
      ],
      "default": "LAYOUTSTRATEGY_BREADTHFIRST",
      "description": "A layout strategy affects in which orders connections are triggered.\n\n - LAYOUTSTRATEGY_BREADTHFIRST: A breadth first layout strategy will connect all neighbours first before these start to do the same with their neighbours.\n - LAYOUTSTRATEGY_DEPTHFIRST: A depth first layout strategy will always prioritize to choose the neighbour of the neighbour first before the other neighbours of the root."
    },
    "v1Link": {
      "type": "object",
      "properties": {
        "representationProtocol": {
          "$ref": "#/definitions/v1RepresentationProtocol",
          "description": "An optional representation protocol for the link."
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional port names to connect to. The hierarchy should matter."
        },
        "biasParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Parameter"
          },
          "description": "Optional parameters to bias the connection."
        }
      },
      "description": "A link defines the parameters for a connectable."
    },
    "v1Parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the parameter"
        },
        "context": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Scope"
          },
          "description": "Optional context field to describe the context of the parameter."
        },
        "value": {
          "$ref": "#/definitions/modelv1Value",
          "description": "Value of the parameter."
        }
      },
      "description": "A parameter is a (common) object that can be used as a parameter in all platforms."
    },
    "v1Plan": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The uri of the prototype definition."
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Parameter"
          },
          "description": "Optional parameters for the prototype."
        }
      },
      "description": "A plan for a prototype."
    },
    "v1Platform": {
      "type": "string",
      "enum": [
        "PLATFORM_SEMIO",
        "PLATFORM_SPECKLE",
        "PLATFORM_THREE",
        "PLATFORM_SVERCHOK",
        "PLATFORM_IFCOPENSHELL",
        "PLATFORM_CADQUERY",
        "PLATFORM_FREECAD",
        "PLATFORM_OPENSCAD",
        "PLATFORM_JSCAD",
        "PLATFORM_FORNJOT",
        "PLATFORM_TRUCK",
        "PLATFORM_ENERGYPLUS",
        "PLATFORM_OPENSTUDIO",
        "PLATFORM_RHINO",
        "PLATFORM_GRASSHOPPER",
        "PLATFORM_REVIT",
        "PLATFORM_DYNAMO",
        "PLATFORM_ARCHICAD",
        "PLATFORM_CITYENGINE",
        "PLATFORM_EXCEL",
        "PLATFORM_HYPAR"
      ],
      "default": "PLATFORM_SEMIO",
      "description": "- PLATFORM_SEMIO: https://github.com/usalu/semio\n - PLATFORM_SPECKLE: https://github.com/specklesystems\n - PLATFORM_THREE: https://github.com/mrdoob/three.js/\n - PLATFORM_SVERCHOK: https://github.com/nortikin/sverchok\n - PLATFORM_IFCOPENSHELL: https://github.com/IfcOpenShell\n - PLATFORM_CADQUERY: https://github.com/CadQuery\n - PLATFORM_FREECAD: https://github.com/FreeCAD\n - PLATFORM_OPENSCAD: https://github.com/openscad\n - PLATFORM_JSCAD: https://github.com/jscad\n - PLATFORM_FORNJOT: https://github.com/hannobraun/Fornjot\n - PLATFORM_TRUCK: https://github.com/ricosjp/truck\n - PLATFORM_ENERGYPLUS: https://github.com/NREL/EnergyPlus\n - PLATFORM_OPENSTUDIO: https://github.com/NREL/OpenStudio\n - PLATFORM_RHINO: https://www.rhino3d.com/\n - PLATFORM_GRASSHOPPER: https://www.grasshopper3d.com/\n - PLATFORM_REVIT: https://www.autodesk.de/products/revit/\n - PLATFORM_DYNAMO: https://dynamobim.org/\n - PLATFORM_ARCHICAD: https://graphisoft.com/solutions/archicad\n - PLATFORM_CITYENGINE: https://www.esri.com/en-us/arcgis/products/arcgis-cityengine\n - PLATFORM_EXCEL: https://www.microsoft.com/en-us/microsoft-365/excel\n - PLATFORM_HYPAR: https://hypar.io/",
      "title": "Platform. Constants are encoded with pattern LICENSE [3] + OWNERTYPE [2] + OWNERID [3] + PLATFORMID [2]\r\nLICENSE (if possible) after https://spdx.org/licenses/: \r\n0:AGPL-3.0-or-later,\r\n50:GPL-3.0+,51:GPL-3.0,52:GPL-2.0+,53:GPL-2.0\r\n100:LGPL-3.0-or-later,101:LGPL-3.0-only\r\n150:MIT,160:Apache-2.0,\r\n170:0BSD\r\n190:EnergyPlus\r\n214:Closed\r\nOWNER starting with OWNERTYPE:\r\n0:INDIVIDUALS: 0:usalu,1:mrdoob,2:nortikin,3:hannobraun,4:ricosjp\r\n1:COLLECTIVE: 0:ifcopenshell,1:cadquery,2:freecad,3:openscad,4:jscad\r\n2:NONPROFIT: 0:buildingsmart,1:nrel\r\n3:COMPANY: 0:mcneel,1:autodesk,2:nemetschek,3:esri,4:microsoft, 500:speckle,501:hypar"
    },
    "v1Point": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double",
          "description": "X coordinate."
        },
        "y": {
          "type": "number",
          "format": "double",
          "title": "Y coordinate"
        },
        "z": {
          "type": "number",
          "format": "double",
          "title": "Z coordinate"
        }
      },
      "description": "A 3d point with x,y,z coordinates."
    },
    "v1Pose": {
      "type": "object",
      "properties": {
        "pointOfView": {
          "$ref": "#/definitions/v1Point",
          "title": "Point of view (origin) from the pose (reference frame/coordinate system)"
        },
        "view": {
          "$ref": "#/definitions/v1Quaternion",
          "title": "View (orientation) from the pose (reference frame/coordinate system)"
        }
      },
      "description": "A pose is a static reference frame/coordinate system."
    },
    "v1Prototype": {
      "type": "object",
      "properties": {
        "planHash": {
          "type": "string",
          "description": "The hash of the plan used for the construction of the prototype."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Representation"
          },
          "description": "Representations of the prototype."
        },
        "description": {
          "type": "string",
          "description": "An optional human readable description of the prototype."
        }
      },
      "description": "A prototype acts as a template from which an element can be cloned."
    },
    "v1Quaternion": {
      "type": "object",
      "properties": {
        "w": {
          "type": "number",
          "format": "double",
          "description": "The value of the real part of the quaternion."
        },
        "x": {
          "type": "number",
          "format": "double",
          "description": "The first value of the imaginary part of the quaternion."
        },
        "y": {
          "type": "number",
          "format": "double",
          "description": "The second value of the imaginary part of the quaternion."
        },
        "z": {
          "type": "number",
          "format": "double",
          "description": "The third value of the imaginary part of the quaternion."
        }
      },
      "description": "(Unit) quaternions represent (here) (rotational) orientation. It can be interpreted as the view of an object."
    },
    "v1Representation": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "format": "byte",
          "description": "The body depends on the serialization format of the representation."
        },
        "encoding": {
          "$ref": "#/definitions/v1Encoding",
          "title": "Encoding of the body"
        },
        "fileType": {
          "$ref": "#/definitions/v1FileType",
          "description": "Use the abbreviation of the platform. You can find that in the constants part of the package."
        },
        "platform": {
          "$ref": "#/definitions/v1Platform",
          "title": "Native platform of representation"
        },
        "description": {
          "type": "string",
          "description": "A description of the representation for humans to understand what the purpose of this representation is."
        },
        "concepts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Add a list of concepts that help filtering representations. This can be used for functional purpose (e.g. statical, energetical, ...) or for visualization purpose (e.g. volumetric,comic, , ...)."
        },
        "lod": {
          "type": "integer",
          "format": "int32",
          "title": "Level of detail allows to further define representation details. Like name this can be used either for visualization purpose (e.g. 200 (scale 1to200)) or functional purpose (e.g level of structural detail)\r\nFor architectural design it is recommended to choose the scale multiplier.\r\nFor BIM you might want to choose:\r\n100:Conceptual\r\n200:Approximate\r\n300:Precise\r\n400:Fabriaction\r\n500:Real"
        }
      },
      "description": "A representation for an element. Basically a file with some semio specific metadata."
    },
    "v1RepresentationProtocol": {
      "type": "string",
      "enum": [
        "REPRESENTATIONPROTOCOL_NONE",
        "REPRESENTATIONPROTOCOL_SIMPLE",
        "REPRESENTATIONPROTOCOL_FULL"
      ],
      "default": "REPRESENTATIONPROTOCOL_NONE",
      "description": "The representation protocol determines what type of representation the connecting will see of the connected in the connection process.\n\n - REPRESENTATIONPROTOCOL_NONE: The connecting sees no representation of the connected.\n - REPRESENTATIONPROTOCOL_SIMPLE: In the simple representation protocol everything is represented by a point.\n - REPRESENTATIONPROTOCOL_FULL: In the full representation protocol everything is represented by its native form where all information is available. This will most likely lead to strong coupled elements. Only use when absolutely necessary."
    },
    "v1Scope": {
      "type": "object",
      "properties": {
        "concept": {
          "type": "string",
          "title": "Concept for the scope e.g Fassade, Floor"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "description": "Optionally define the order. Othwerwise it will be implicitly ordered by declaration order."
        }
      },
      "description": "Describes the scope of a parameter."
    },
    "v1Sobject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other sobjects."
        },
        "pose": {
          "$ref": "#/definitions/v1Pose",
          "description": "The (rough) pose of the element. In the layout process this will most likely be adjusted if not specified otherwise in the assembly."
        },
        "plan": {
          "$ref": "#/definitions/v1Plan",
          "description": "The plan for the prototype."
        },
        "concepts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Concept that are relevent for the sobject."
        }
      },
      "description": "Instance information for an element."
    }
  }
}
