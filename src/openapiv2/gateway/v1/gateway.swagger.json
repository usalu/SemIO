{
  "swagger": "2.0",
  "info": {
    "title": "Semio",
    "version": "0.0.1",
    "contact": {
      "name": "Ueli Saluz",
      "url": "https://github.com/usalu/semio",
      "email": "semio@posteo.org"
    },
    "license": {
      "name": "AGPL-3.0-or-later"
    },
    "x-something-something": "yadda"
  },
  "tags": [
    {
      "name": "GatewayService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/layoutdesign": {
      "post": {
        "summary": "Lay out a design from a layout and return a design.",
        "operationId": "GatewayService_LayoutDesign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Design"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LayoutDesignRequest"
            }
          }
        ],
        "tags": [
          "GatewayService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Attraction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other attractions."
        },
        "attractor": {
          "$ref": "#/definitions/v1AttractionParticipant",
          "description": "The attractor is expected to be the fixed sobject."
        },
        "attracted": {
          "$ref": "#/definitions/v1AttractionParticipant",
          "description": "The attracted is expected to be the flexible sobject that adjusts its point of view."
        }
      },
      "description": "An attraction can be used to attract an attracted attraction participant to an attractor attraction participant."
    },
    "v1AttractionParticipant": {
      "type": "object",
      "properties": {
        "participantId": {
          "type": "string",
          "description": "Id of participating sobject."
        },
        "pose": {
          "$ref": "#/definitions/v1Pose",
          "description": "The (rough) pose of the participating sobject. Note that in the attraction process it will most likely be displaced and adjusted."
        },
        "representationProtocol": {
          "$ref": "#/definitions/v1RepresentationProtocol",
          "description": "An optional representation of the participant."
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional port names to connect to. The hierarchy should matter"
        },
        "bias": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional parameters to bias the attraction."
        }
      },
      "description": "An attraction participant participates in an attraction process."
    },
    "v1AttractionTree": {
      "type": "object",
      "properties": {
        "sobjectId": {
          "type": "string",
          "description": "The id of the sobject to place."
        },
        "attractionId": {
          "type": "string",
          "description": "An optional id of the attraction that is used to place this sobject. Only relevent when multiple attractions are defined from the same type.\r\nRoots can't have that field as they have no parent."
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AttractionTree"
          }
        }
      },
      "description": "An attraction tree defines a possibly unambiguous subset of a layout."
    },
    "v1Design": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Element"
          }
        },
        "elementOccurances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ElementOccurance"
          }
        }
      },
      "description": "A design is an aggregation of elements."
    },
    "v1Element": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the sobject that was used to create the element is also the element id."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Representation"
          }
        },
        "description": {
          "type": "string",
          "description": "An optional human readable description of the element."
        }
      },
      "description": "An element is the atom of a design. It has several representations and a pose."
    },
    "v1ElementOccurance": {
      "type": "object",
      "properties": {
        "elementId": {
          "type": "string",
          "description": "Id of the element (occurance)."
        },
        "elementPose": {
          "$ref": "#/definitions/v1Pose",
          "description": "Pose of the element (occurance)."
        }
      },
      "description": "An element occurance describes where an element occurs in the design."
    },
    "v1Encoding": {
      "type": "string",
      "enum": [
        "ENCODING_TEXT_UFT8",
        "ENCODING_TEXT_UFT16",
        "ENCODING_TEXT_UFT32",
        "ENCODING_TEXT_ASCII",
        "ENCODING_TEXT_BASE64"
      ],
      "default": "ENCODING_TEXT_UFT8",
      "description": "Encoding of a byte array.\n\n - ENCODING_TEXT_BASE64: Also ASCII but with further base 64 encoding of the text."
    },
    "v1FileType": {
      "type": "string",
      "enum": [
        "FILETYPE_NATIVE",
        "FILETYPE_JSON",
        "FILETYPE_XML",
        "FILETYPE_YAML",
        "FILETYPE_TOML",
        "FILETYPE_STEP",
        "FILETYPE_PY",
        "FILETYPE_C",
        "FILETYPE_CPP",
        "FILETYPE_CSHARP",
        "FILETYPE_GO",
        "FILETYPE_RUST"
      ],
      "default": "FILETYPE_NATIVE",
      "title": "- FILETYPE_NATIVE: Native serialization according platform. Use this only when it is none of the others.\r\nOften files have a platform specific extension but if you open them in a text editor you can see that they are serialized in a standard format.\n - FILETYPE_STEP: https://www.iso.org/standard/63141.html\n - FILETYPE_PY: Python\n - FILETYPE_CPP: C++\n - FILETYPE_CSHARP: C#\n - FILETYPE_GO: Golang"
    },
    "v1Layout": {
      "type": "object",
      "properties": {
        "sobjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Sobject"
          },
          "description": "Sobjects (nodes) that are part of the layout (graph)."
        },
        "attractions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Attraction"
          },
          "description": "Attractions (edges) that are part of the layout (graph)."
        },
        "strategy": {
          "$ref": "#/definitions/v1LayoutStrategy"
        },
        "attractionTrees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AttractionTree"
          },
          "description": "Optional attraction trees that can possibly unambiguously describe the layout order of sobjects.\r\nMost of the time this field is only necissary due to elements that don't work well together in a general way.\r\nTherefore if you can update the element definitions to be more robust, rather use your time for that."
        }
      },
      "description": "A layout (graph) is an assembly plan for a set of sobjects and their attractions between each other."
    },
    "v1LayoutDesignRequest": {
      "type": "object",
      "properties": {
        "layout": {
          "$ref": "#/definitions/v1Layout"
        },
        "targetType": {
          "type": "string"
        }
      }
    },
    "v1LayoutStrategy": {
      "type": "string",
      "enum": [
        "LAYOUTSTRATEGY_BREADTHFIRST",
        "LAYOUTSTRATEGY_DEPTHFIRST"
      ],
      "default": "LAYOUTSTRATEGY_BREADTHFIRST",
      "description": "A layout strategy affects in which orders attractions are triggered.\n\n - LAYOUTSTRATEGY_BREADTHFIRST: A breadth first layout strategy will attract all neighbours first before these start to do the same with their neighbours.\n - LAYOUTSTRATEGY_DEPTHFIRST: A depth first layout strategy will always prioritize to choose the neighbour of the neighbour first before the other neighbours of the root."
    },
    "v1Platform": {
      "type": "string",
      "enum": [
        "PLATFORM_SEMIO",
        "PLATFORM_THREE",
        "PLATFORM_SVERCHOK",
        "PLATFORM_IFCOPENSHELL",
        "PLATFORM_CADQUERY",
        "PLATFORM_FREECAD",
        "PLATFORM_OPENSCAD",
        "PLATFORM_JSCAD",
        "PLATFORM_Fornjot",
        "PLATFORM_TRUCK",
        "PLATFORM_RHINO",
        "PLATFORM_GRASSHOPPER",
        "PLATFORM_REVIT",
        "PLATFORM_DYNAMO"
      ],
      "default": "PLATFORM_SEMIO",
      "description": "- PLATFORM_SEMIO: https://github.com/usalu/semio\n - PLATFORM_THREE: https://github.com/mrdoob/three.js/\n - PLATFORM_SVERCHOK: https://github.com/nortikin/sverchok\n - PLATFORM_IFCOPENSHELL: https://github.com/IfcOpenShell\n - PLATFORM_CADQUERY: https://github.com/CadQuery\n - PLATFORM_FREECAD: https://github.com/FreeCAD\n - PLATFORM_OPENSCAD: https://github.com/openscad\n - PLATFORM_JSCAD: https://github.com/jscad\n - PLATFORM_Fornjot: https://github.com/hannobraun/Fornjot\n - PLATFORM_TRUCK: https://github.com/ricosjp/truck\n - PLATFORM_RHINO: https://www.rhino3d.com/\n - PLATFORM_GRASSHOPPER: https://www.grasshopper3d.com/\n - PLATFORM_REVIT: https://www.autodesk.de/products/revit/\n - PLATFORM_DYNAMO: https://dynamobim.org/",
      "title": "Platform. Constants are encoded with pattern LICENSE [3] + OWNERTYPE [2] + OWNERID [3] + PLATFORMID [2]\r\nLICENSE after https://spdx.org/licenses/: \r\n0:AGPL-3.0-or-later,\r\n50:GPL-3.0+,51:GPL-3.0,52:GPL-2.0+,53:GPL-2.0\r\n100:LGPL-3.0-or-later,101:LGPL-3.0-only\r\n150:MIT,160:Apache-2.0,170:0BSD\r\n214:Closed\r\nOWNER starting with OWNERTYPE:\r\n0:INDIVIDUALS: 0:usalu,1:mrdoob,2:nortikin,3:hannobraun,4:ricosjp\r\n1:COLLECTIVE: 0:ifcopenshell,1:cadquery,2:freecad,3:openscad,4:jscad\r\n2:NONPROFIT: 0:buildingsmart\r\n3:COMPANY: 0:mcneel,1:autodesk,2:nemetschek,3:esri"
    },
    "v1Point": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double",
          "description": "x coordinate."
        },
        "y": {
          "type": "number",
          "format": "double",
          "title": "y coordinate"
        },
        "z": {
          "type": "number",
          "format": "double",
          "title": "z coordinate"
        }
      },
      "description": "A 3d point with x,y,z coordinates."
    },
    "v1Pose": {
      "type": "object",
      "properties": {
        "pointOfView": {
          "$ref": "#/definitions/v1Point"
        },
        "view": {
          "$ref": "#/definitions/v1Quaternion"
        }
      },
      "description": "A pose is a reference frame with a point of view (origin) and orientation (view)."
    },
    "v1Quaternion": {
      "type": "object",
      "properties": {
        "w": {
          "type": "number",
          "format": "double"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "z": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Quaternions represent (here) (rotational) orientation. It can be interpreted as the view of an element."
    },
    "v1Representation": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "format": "byte",
          "description": "The body depends on the serialization format of the representation."
        },
        "encoding": {
          "$ref": "#/definitions/v1Encoding",
          "title": "Encoding of the body"
        },
        "fileType": {
          "$ref": "#/definitions/v1FileType",
          "description": "Use the abbreviation of the platform. You can find that in the constants part of the package."
        },
        "platform": {
          "$ref": "#/definitions/v1Platform",
          "title": "Native platform of representation"
        },
        "description": {
          "type": "string",
          "description": "A description of the representation for humans to understand what the purpose of this representation is."
        },
        "concepts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Add a list of concepts that help filtering representations. This can be used for functional purpose (e.g. statical, energetical, ...) or for visualization purpose (e.g. volumetric,comic, , ...)."
        },
        "lod": {
          "type": "string",
          "format": "int64",
          "title": "Level of detail allows to further define representation details. Like name this can be used either for visualization purpose (e.g. 200 (scale 1to200)) or functional purpose (e.g level of structural detail)\r\nFor architectural design it is recommended to choose the scale multiplier.\r\nFor BIM you might want to choose:\r\n100:Conceptual\r\n200:Approximate\r\n300:Precise\r\n400:Fabriaction\r\n500:Real"
        }
      },
      "description": "A representation for an element. Basically a file with some semio specific metadata."
    },
    "v1RepresentationProtocol": {
      "type": "string",
      "enum": [
        "REPRESENTATIONPROTOCOL_NONE",
        "REPRESENTATIONPROTOCOL_SIMPLE",
        "REPRESENTATIONPROTOCOL_FULL"
      ],
      "default": "REPRESENTATIONPROTOCOL_NONE",
      "description": "The representation protocol determines what type of representation the attractor will see of the attracted in the attraction process.\n\n - REPRESENTATIONPROTOCOL_NONE: The attractor sees no representation of the attracted.\n - REPRESENTATIONPROTOCOL_SIMPLE: In the simple representation protocol everything is represented by a point.\n - REPRESENTATIONPROTOCOL_FULL: In the full representation protocol everything is represented by its native form where all information is available. This will most likely lead to strong coupled elements. Only use when absolutely necessary."
    },
    "v1Sobject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other sobjects."
        },
        "url": {
          "type": "string",
          "description": "The url of the element definition."
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Parameters for the element."
        }
      },
      "description": "Instance information for an element."
    }
  }
}
