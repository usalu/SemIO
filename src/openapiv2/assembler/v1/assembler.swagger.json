{
  "swagger": "2.0",
  "info": {
    "title": "assembler/v1/assembler.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AssemblerService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Attraction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other attractions."
        },
        "attractor": {
          "$ref": "#/definitions/v1AttractionParticipant",
          "description": "The attractor is expected to be the fixed sobject."
        },
        "attracted": {
          "$ref": "#/definitions/v1AttractionParticipant",
          "description": "The attracted is expected to be the flexible sobject that adjusts its point of view."
        }
      },
      "description": "An attraction can be used to attract an attracted attraction participant to an attractor attraction participant."
    },
    "v1AttractionParticipant": {
      "type": "object",
      "properties": {
        "patricipantId": {
          "type": "string",
          "description": "Id of participating sobject."
        },
        "representationProtocol": {
          "$ref": "#/definitions/v1RepresentationProtocol",
          "description": "An optional representation of the participant."
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional port names to connect to. The hierarchy should matter"
        },
        "bias": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional parameters to bias the attraction."
        }
      },
      "description": "An attraction participant participates in an attraction process."
    },
    "v1AttractionTree": {
      "type": "object",
      "properties": {
        "attractionId": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AttractionTree"
          }
        }
      },
      "description": "An attraction tree contains exact information in which order attractions should be triggered."
    },
    "v1Design": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Element"
          }
        }
      },
      "description": "A design is an aggregation of elements."
    },
    "v1Element": {
      "type": "object",
      "properties": {
        "pose": {
          "$ref": "#/definitions/v1Pose"
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Representation"
          }
        }
      },
      "description": "An element is the atom of a design. It has several representations and a pose."
    },
    "v1Encoding": {
      "type": "string",
      "enum": [
        "ENCODING_TEXT_UFT8",
        "ENCODING_TEXT_UFT16",
        "ENCODING_TEXT_UFT32",
        "ENCODING_TEXT_ASCII",
        "ENCODING_TEXT_BASE64"
      ],
      "default": "ENCODING_TEXT_UFT8",
      "description": "Encoding of a byte array.\n\n - ENCODING_TEXT_BASE64: Also ASCII but with further base 64 encoding of the text."
    },
    "v1FileType": {
      "type": "string",
      "enum": [
        "FILETYPE_NATIVEBINARY",
        "FILETYPE_JSON",
        "FILETYPE_XML",
        "FILETYPE_YAML",
        "FILETYPE_TOML",
        "FILETYPE_STEP",
        "FILETYPE_PY",
        "FILETYPE_C",
        "FILETYPE_CPP",
        "FILETYPE_CSHARP",
        "FILETYPE_GO",
        "FILETYPE_RUST"
      ],
      "default": "FILETYPE_NATIVEBINARY",
      "title": "- FILETYPE_NATIVEBINARY: Native binary according platform. Use this only when it really is binary otherwise try to figure out what the file type is.\n - FILETYPE_STEP: https://www.iso.org/standard/63141.html\n - FILETYPE_PY: Python\n - FILETYPE_CPP: C++\n - FILETYPE_CSHARP: C#\n - FILETYPE_GO: Golang\n - FILETYPE_RUST: Rust"
    },
    "v1Layout": {
      "type": "object",
      "properties": {
        "sobjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Sobject"
          }
        },
        "attractions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Attraction"
          }
        },
        "rootSobjectId": {
          "type": "string",
          "description": "This sobject acts as an anker in the layout."
        },
        "stragegy": {
          "$ref": "#/definitions/v1LayoutStrategy"
        },
        "attractionTrees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AttractionTree"
          },
          "description": "Optional attraction trees with root sobject id as key and attraction tree as value."
        }
      },
      "description": "A layout (graph) is an assembly plan for a set of sobjects and their attractions between each other."
    },
    "v1LayoutStrategy": {
      "type": "string",
      "enum": [
        "LAYOUTSTRATEGY_BREADTHFIRST",
        "LAYOUTSTRATEGY_DEPTHFIRST"
      ],
      "default": "LAYOUTSTRATEGY_BREADTHFIRST",
      "description": "A layout strategy affects in which orders attractions are triggered.\n\n - LAYOUTSTRATEGY_BREADTHFIRST: A breadth first layout strategy will attract all neighbours first before these start to the same with their neighbours.\n - LAYOUTSTRATEGY_DEPTHFIRST: A depth first layout strategy will always prioritize to choose the neighbour of the neighbour first before the other neighbours of the root."
    },
    "v1Platform": {
      "type": "string",
      "enum": [
        "PLATFORM_SEMIO",
        "PLATFORM_THREE",
        "PLATFORM_SVERCHOK",
        "PLATFORM_IFCOPENSHELL",
        "PLATFORM_CADQUERY",
        "PLATFORM_FREECAD",
        "PLATFORM_OPENSCAD",
        "PLATFORM_JCAD",
        "PLATFORM_Fornjot",
        "PLATFORM_TRUCK",
        "PLATFORM_RHINO",
        "PLATFORM_GRASSHOPPER",
        "PLATFORM_REVIT",
        "PLATFORM_DYNAMO"
      ],
      "default": "PLATFORM_SEMIO",
      "description": "- PLATFORM_SEMIO: https://github.com/usalu/semio\n - PLATFORM_THREE: https://github.com/mrdoob/three.js/\n - PLATFORM_SVERCHOK: https://github.com/nortikin/sverchok\n - PLATFORM_IFCOPENSHELL: https://github.com/IfcOpenShell\n - PLATFORM_CADQUERY: https://github.com/CadQuery\n - PLATFORM_FREECAD: https://github.com/FreeCAD\n - PLATFORM_OPENSCAD: https://github.com/openscad\n - PLATFORM_JCAD: https://github.com/jscad\n - PLATFORM_Fornjot: https://github.com/hannobraun/Fornjot\n - PLATFORM_TRUCK: https://github.com/ricosjp/truck\n - PLATFORM_RHINO: https://www.rhino3d.com/\n - PLATFORM_GRASSHOPPER: https://www.grasshopper3d.com/\n - PLATFORM_REVIT: https://www.autodesk.de/products/revit/\n - PLATFORM_DYNAMO: https://dynamobim.org/",
      "title": "Platform. Constants are encoded with pattern LICENSE [3] + OWNERTYPE [2] + OWNERID [3] + PLATFORMID [2]\r\nLICENSE after https://spdx.org/licenses/: \r\n0:AGPL-3.0-or-later,\r\n50:GPL-3.0+,51:GPL-3.0,52:GPL-2.0+,53:GPL-2.0\r\n100:LGPL-3.0-or-later,101:LGPL-3.0-only\r\n150:MIT,160:Apache-2.0,170:0BSD\r\n214:Closed\r\nOWNER starting with OWNERTYPE:\r\n0:INDIVIDUALS: 0:usalu,1:mrdoob,2:nortikin,3:hannobraun,4:ricosjp\r\n1:COLLECTIVE: 0:ifcopenshell,1:cadquery,2:freecad,3:openscad,4:jscad\r\n2:NONPROFIT: 0:buildingsmart\r\n3:COMPANY: 0:mcneel,1:autodesk,2:nemetschek,3:esri"
    },
    "v1Point": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double",
          "description": "x coordinate."
        },
        "y": {
          "type": "number",
          "format": "double",
          "title": "y coordinate"
        },
        "z": {
          "type": "number",
          "format": "double",
          "title": "z coordinate"
        }
      },
      "description": "A 3d point with x,y,z coordinates."
    },
    "v1Pose": {
      "type": "object",
      "properties": {
        "pointOfView": {
          "$ref": "#/definitions/v1Point"
        },
        "view": {
          "$ref": "#/definitions/v1Quaternion"
        }
      },
      "description": "A pose is a reference frame with a point of view (origin) and orientation (view)."
    },
    "v1Quaternion": {
      "type": "object",
      "properties": {
        "w": {
          "type": "number",
          "format": "double"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "z": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Quaternions represent (here) (rotational) orientation. It can be interpreted as the view of an element."
    },
    "v1Representation": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "format": "byte",
          "description": "The body depends on the serilization format of the representation."
        },
        "encoding": {
          "$ref": "#/definitions/v1Encoding",
          "title": "Encoding of the body"
        },
        "fileType": {
          "$ref": "#/definitions/v1FileType",
          "description": "Use the abbrebivatation of the platform. You can find that in the constants part of the package."
        },
        "platform": {
          "$ref": "#/definitions/v1Platform",
          "title": "Platform"
        },
        "name": {
          "type": "string",
          "title": "Name of representation. This can be used for visualization purpose (e.g. conceptual, detailed, ...) or for functional purpose (e.g. statical, energetical, ...)"
        },
        "lod": {
          "type": "string",
          "format": "int64",
          "title": "Level of detail allows to further define representation details. Like name this can be used either for visualizaztion purpose (e.g. 200 (scale 1to200)) or functional purpose (e.g level of structural detail)"
        }
      },
      "description": "A representation for an element. Basically a file with some semio specific metadata."
    },
    "v1RepresentationProtocol": {
      "type": "string",
      "enum": [
        "REPRESENTATIONPROTOCOL_NONE",
        "REPRESENTATIONPROTOCOL_SIMPLE",
        "REPRESENTATIONPROTOCOL_FULL"
      ],
      "default": "REPRESENTATIONPROTOCOL_NONE",
      "description": "The representation protocol determines what type of representation the attractor will see of the attracted in the attraction process.\n\n - REPRESENTATIONPROTOCOL_NONE: The attractor sees no representation of the attracted.\n - REPRESENTATIONPROTOCOL_SIMPLE: In the simple representation protocol everything is representatedby a point.\n - REPRESENTATIONPROTOCOL_FULL: In the full representation protocol everything is representatedby it's native form where all information is available. This will most likely lead to strong coupled elements. Only use when absolutletly necissary."
    },
    "v1Sobject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other sobjects."
        },
        "url": {
          "type": "string",
          "description": "The url of the element definition."
        },
        "pose": {
          "$ref": "#/definitions/v1Pose",
          "description": "The (rough) pose of the sobject. Note that in the attraction process it will most likely be displaced and adjusted."
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Parameters for the element."
        }
      },
      "description": "Instance information for an element."
    }
  }
}
