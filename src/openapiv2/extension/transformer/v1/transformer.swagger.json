{
  "swagger": "2.0",
  "info": {
    "title": "extension/transformer/v1/transformer.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "TransformerService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Attraction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other attractions."
        },
        "attractor": {
          "$ref": "#/definitions/v1AttractionParticipant",
          "description": "The attractor is expected to be the fixed sobject."
        },
        "attracted": {
          "$ref": "#/definitions/v1AttractionParticipant",
          "description": "The attracted is expected to be the flexible sobject that adjusts its point of view."
        }
      },
      "description": "An attraction can be used to attract an attracted attraction participant to an attractor attraction participant."
    },
    "v1AttractionParticipant": {
      "type": "object",
      "properties": {
        "patricipantId": {
          "type": "string",
          "description": "Id of participating sobject."
        },
        "representationProtocol": {
          "$ref": "#/definitions/v1RepresentationProtocol",
          "description": "An optional representation of the participant."
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional port names to connect to. The hierarchy should matter"
        },
        "bias": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional parameters to bias the attraction."
        }
      },
      "description": "An attraction participant participates in an attraction process."
    },
    "v1AttractionTree": {
      "type": "object",
      "properties": {
        "attractionId": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AttractionTree"
          }
        }
      },
      "description": "An attraction tree contains exact information in which order attractions should be triggered."
    },
    "v1Decision": {
      "type": "object",
      "properties": {
        "modification": {
          "$ref": "#/definitions/v1LayoutModification"
        },
        "strategy": {
          "$ref": "#/definitions/v1LayoutModificationStrategy"
        }
      },
      "description": "A decision is a layout modification with a strategy on how to apply it to a new layout."
    },
    "v1Layout": {
      "type": "object",
      "properties": {
        "sobjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Sobject"
          }
        },
        "attractions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Attraction"
          }
        },
        "rootSobjectId": {
          "type": "string",
          "description": "This sobject acts as an anker in the layout."
        },
        "stragegy": {
          "$ref": "#/definitions/v1LayoutStrategy"
        },
        "attractionTrees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AttractionTree"
          },
          "description": "Optional attraction trees with root sobject id as key and attraction tree as value."
        }
      },
      "description": "A layout (graph) is an assembly plan for a set of sobjects and their attractions between each other."
    },
    "v1LayoutModification": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Layout"
        },
        "modifiedContext": {
          "$ref": "#/definitions/v1Layout"
        }
      },
      "description": "A layout modification describes declaratively a layout and the layout after its modification. The rules on how to imperatively change such a layout need to found by the transformation system."
    },
    "v1LayoutModificationStrategy": {
      "type": "object",
      "properties": {
        "matchCount": {
          "type": "string",
          "format": "int64",
          "description": "The match count describes how often a layout modification should be applied. It beeing finite will make sure that the system always terminates. Make sure to set the threshold high enough."
        }
      },
      "description": "A decision strategy holds information on how modifications are applied."
    },
    "v1LayoutStrategy": {
      "type": "string",
      "enum": [
        "LAYOUTSTRATEGY_BREADTHFIRST",
        "LAYOUTSTRATEGY_DEPTHFIRST"
      ],
      "default": "LAYOUTSTRATEGY_BREADTHFIRST",
      "description": "A layout strategy affects in which orders attractions are triggered.\n\n - LAYOUTSTRATEGY_BREADTHFIRST: A breadth first layout strategy will attract all neighbours first before these start to the same with their neighbours.\n - LAYOUTSTRATEGY_DEPTHFIRST: A depth first layout strategy will always prioritize to choose the neighbour of the neighbour first before the other neighbours of the root."
    },
    "v1Point": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double",
          "description": "x coordinate."
        },
        "y": {
          "type": "number",
          "format": "double",
          "title": "y coordinate"
        },
        "z": {
          "type": "number",
          "format": "double",
          "title": "z coordinate"
        }
      },
      "description": "A 3d point with x,y,z coordinates."
    },
    "v1Pose": {
      "type": "object",
      "properties": {
        "pointOfView": {
          "$ref": "#/definitions/v1Point"
        },
        "view": {
          "$ref": "#/definitions/v1Quaternion"
        }
      },
      "description": "A pose is a reference frame with a point of view (origin) and orientation (view)."
    },
    "v1Quaternion": {
      "type": "object",
      "properties": {
        "w": {
          "type": "number",
          "format": "double"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "z": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Quaternions represent (here) (rotational) orientation. It can be interpreted as the view of an element."
    },
    "v1RepresentationProtocol": {
      "type": "string",
      "enum": [
        "REPRESENTATIONPROTOCOL_NONE",
        "REPRESENTATIONPROTOCOL_SIMPLE",
        "REPRESENTATIONPROTOCOL_FULL"
      ],
      "default": "REPRESENTATIONPROTOCOL_NONE",
      "description": "The representation protocol determines what type of representation the attractor will see of the attracted in the attraction process.\n\n - REPRESENTATIONPROTOCOL_NONE: The attractor sees no representation of the attracted.\n - REPRESENTATIONPROTOCOL_SIMPLE: In the simple representation protocol everything is representatedby a point.\n - REPRESENTATIONPROTOCOL_FULL: In the full representation protocol everything is representatedby it's native form where all information is available. This will most likely lead to strong coupled elements. Only use when absolutletly necissary."
    },
    "v1Sobject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other sobjects."
        },
        "url": {
          "type": "string",
          "description": "The url of the element definition."
        },
        "pose": {
          "$ref": "#/definitions/v1Pose",
          "description": "The (rough) pose of the sobject. Note that in the attraction process it will most likely be displaced and adjusted."
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Parameters for the element."
        }
      },
      "description": "Instance information for an element."
    }
  }
}
