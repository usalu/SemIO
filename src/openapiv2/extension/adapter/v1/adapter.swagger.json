{
  "swagger": "2.0",
  "info": {
    "title": "extension/adapter/v1/adapter.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AdapterService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Encoding": {
      "type": "string",
      "enum": [
        "ENCODING_TEXT_UFT8",
        "ENCODING_TEXT_UFT16",
        "ENCODING_TEXT_UFT32",
        "ENCODING_TEXT_ASCII",
        "ENCODING_TEXT_BASE64"
      ],
      "default": "ENCODING_TEXT_UFT8",
      "description": "Encoding of a byte array.\n\n - ENCODING_TEXT_BASE64: Also ASCII but with further base 64 encoding of the text."
    },
    "v1FileType": {
      "type": "string",
      "enum": [
        "FILETYPE_NATIVEBINARY",
        "FILETYPE_JSON",
        "FILETYPE_XML",
        "FILETYPE_YAML",
        "FILETYPE_TOML",
        "FILETYPE_STEP",
        "FILETYPE_PY",
        "FILETYPE_C",
        "FILETYPE_CPP",
        "FILETYPE_CSHARP",
        "FILETYPE_GO",
        "FILETYPE_RUST"
      ],
      "default": "FILETYPE_NATIVEBINARY",
      "title": "- FILETYPE_NATIVEBINARY: Native binary according platform. Use this only when it really is binary otherwise try to figure out what the file type is.\n - FILETYPE_STEP: https://www.iso.org/standard/63141.html\n - FILETYPE_PY: Python\n - FILETYPE_CPP: C++\n - FILETYPE_CSHARP: C#\n - FILETYPE_GO: Golang\n - FILETYPE_RUST: Rust"
    },
    "v1Platform": {
      "type": "string",
      "enum": [
        "PLATFORM_SEMIO",
        "PLATFORM_THREE",
        "PLATFORM_SVERCHOK",
        "PLATFORM_IFCOPENSHELL",
        "PLATFORM_CADQUERY",
        "PLATFORM_FREECAD",
        "PLATFORM_OPENSCAD",
        "PLATFORM_JCAD",
        "PLATFORM_Fornjot",
        "PLATFORM_TRUCK",
        "PLATFORM_RHINO",
        "PLATFORM_GRASSHOPPER",
        "PLATFORM_REVIT",
        "PLATFORM_DYNAMO"
      ],
      "default": "PLATFORM_SEMIO",
      "description": "- PLATFORM_SEMIO: https://github.com/usalu/semio\n - PLATFORM_THREE: https://github.com/mrdoob/three.js/\n - PLATFORM_SVERCHOK: https://github.com/nortikin/sverchok\n - PLATFORM_IFCOPENSHELL: https://github.com/IfcOpenShell\n - PLATFORM_CADQUERY: https://github.com/CadQuery\n - PLATFORM_FREECAD: https://github.com/FreeCAD\n - PLATFORM_OPENSCAD: https://github.com/openscad\n - PLATFORM_JCAD: https://github.com/jscad\n - PLATFORM_Fornjot: https://github.com/hannobraun/Fornjot\n - PLATFORM_TRUCK: https://github.com/ricosjp/truck\n - PLATFORM_RHINO: https://www.rhino3d.com/\n - PLATFORM_GRASSHOPPER: https://www.grasshopper3d.com/\n - PLATFORM_REVIT: https://www.autodesk.de/products/revit/\n - PLATFORM_DYNAMO: https://dynamobim.org/",
      "title": "Platform. Constants are encoded with pattern LICENSE [3] + OWNERTYPE [2] + OWNERID [3] + PLATFORMID [2]\r\nLICENSE after https://spdx.org/licenses/: \r\n0:AGPL-3.0-or-later,\r\n50:GPL-3.0+,51:GPL-3.0,52:GPL-2.0+,53:GPL-2.0\r\n100:LGPL-3.0-or-later,101:LGPL-3.0-only\r\n150:MIT,160:Apache-2.0,170:0BSD\r\n214:Closed\r\nOWNER starting with OWNERTYPE:\r\n0:INDIVIDUALS: 0:usalu,1:mrdoob,2:nortikin,3:hannobraun,4:ricosjp\r\n1:COLLECTIVE: 0:ifcopenshell,1:cadquery,2:freecad,3:openscad,4:jscad\r\n2:NONPROFIT: 0:buildingsmart\r\n3:COMPANY: 0:mcneel,1:autodesk,2:nemetschek,3:esri"
    },
    "v1Point": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double",
          "description": "x coordinate."
        },
        "y": {
          "type": "number",
          "format": "double",
          "title": "y coordinate"
        },
        "z": {
          "type": "number",
          "format": "double",
          "title": "z coordinate"
        }
      },
      "description": "A 3d point with x,y,z coordinates."
    },
    "v1Pose": {
      "type": "object",
      "properties": {
        "pointOfView": {
          "$ref": "#/definitions/v1Point"
        },
        "view": {
          "$ref": "#/definitions/v1Quaternion"
        }
      },
      "description": "A pose is a reference frame with a point of view (origin) and orientation (view)."
    },
    "v1Quaternion": {
      "type": "object",
      "properties": {
        "w": {
          "type": "number",
          "format": "double"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "z": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Quaternions represent (here) (rotational) orientation. It can be interpreted as the view of an element."
    },
    "v1Representation": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "format": "byte",
          "description": "The body depends on the serilization format of the representation."
        },
        "encoding": {
          "$ref": "#/definitions/v1Encoding",
          "title": "Encoding of the body"
        },
        "fileType": {
          "$ref": "#/definitions/v1FileType",
          "description": "Use the abbrebivatation of the platform. You can find that in the constants part of the package."
        },
        "platform": {
          "$ref": "#/definitions/v1Platform",
          "title": "Platform"
        },
        "name": {
          "type": "string",
          "title": "Name of representation. This can be used for visualization purpose (e.g. conceptual, detailed, ...) or for functional purpose (e.g. statical, energetical, ...)"
        },
        "lod": {
          "type": "string",
          "format": "int64",
          "title": "Level of detail allows to further define representation details. Like name this can be used either for visualizaztion purpose (e.g. 200 (scale 1to200)) or functional purpose (e.g level of structural detail)"
        }
      },
      "description": "A representation for an element. Basically a file with some semio specific metadata."
    },
    "v1RepresentationsResponse": {
      "type": "object",
      "properties": {
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Representation"
          }
        }
      }
    },
    "v1Sobject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id that allows to distinguish it from other sobjects."
        },
        "url": {
          "type": "string",
          "description": "The url of the element definition."
        },
        "pose": {
          "$ref": "#/definitions/v1Pose",
          "description": "The (rough) pose of the sobject. Note that in the attraction process it will most likely be displaced and adjusted."
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Parameters for the element."
        }
      },
      "description": "Instance information for an element."
    }
  }
}
