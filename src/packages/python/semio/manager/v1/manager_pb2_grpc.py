# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from extension.adapter.v1 import adapter_pb2 as extension_dot_adapter_dot_v1_dot_adapter__pb2
from model.v1 import model_pb2 as model_dot_v1_dot_model__pb2


class ManagerServiceStub(object):
    """A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestRepresentation = channel.unary_unary(
                '/semio.server.v1.ManagerService/RequestRepresentation',
                request_serializer=extension_dot_adapter_dot_v1_dot_adapter__pb2.RepresentationRequest.SerializeToString,
                response_deserializer=model_dot_v1_dot_model__pb2.Representation.FromString,
                )
        self.RequestAttractionPoint = channel.unary_unary(
                '/semio.server.v1.ManagerService/RequestAttractionPoint',
                request_serializer=extension_dot_adapter_dot_v1_dot_adapter__pb2.AttractionPointRequest.SerializeToString,
                response_deserializer=model_dot_v1_dot_model__pb2.Point.FromString,
                )


class ManagerServiceServicer(object):
    """A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
    """

    def RequestRepresentation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestAttractionPoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestRepresentation': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestRepresentation,
                    request_deserializer=extension_dot_adapter_dot_v1_dot_adapter__pb2.RepresentationRequest.FromString,
                    response_serializer=model_dot_v1_dot_model__pb2.Representation.SerializeToString,
            ),
            'RequestAttractionPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAttractionPoint,
                    request_deserializer=extension_dot_adapter_dot_v1_dot_adapter__pb2.AttractionPointRequest.FromString,
                    response_serializer=model_dot_v1_dot_model__pb2.Point.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'semio.server.v1.ManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManagerService(object):
    """A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
    """

    @staticmethod
    def RequestRepresentation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/semio.server.v1.ManagerService/RequestRepresentation',
            extension_dot_adapter_dot_v1_dot_adapter__pb2.RepresentationRequest.SerializeToString,
            model_dot_v1_dot_model__pb2.Representation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestAttractionPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/semio.server.v1.ManagerService/RequestAttractionPoint',
            extension_dot_adapter_dot_v1_dot_adapter__pb2.AttractionPointRequest.SerializeToString,
            model_dot_v1_dot_model__pb2.Point.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
