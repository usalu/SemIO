# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from manager.v1 import manager_pb2 as manager_dot_v1_dot_manager__pb2
from model.v1 import model_pb2 as model_dot_v1_dot_model__pb2


class ManagerServiceStub(object):
    """A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestElement = channel.unary_unary(
                '/semio.manager.v1.ManagerService/RequestElement',
                request_serializer=manager_dot_v1_dot_manager__pb2.ElementRequest.SerializeToString,
                response_deserializer=model_dot_v1_dot_model__pb2.Representation.FromString,
                )
        self.RequestAttraction = channel.unary_unary(
                '/semio.manager.v1.ManagerService/RequestAttraction',
                request_serializer=manager_dot_v1_dot_manager__pb2.AttractionRequest.SerializeToString,
                response_deserializer=manager_dot_v1_dot_manager__pb2.AttractionResponse.FromString,
                )
        self.RegisterExtension = channel.unary_unary(
                '/semio.manager.v1.ManagerService/RegisterExtension',
                request_serializer=manager_dot_v1_dot_manager__pb2.ExtensionRegistrationRequest.SerializeToString,
                response_deserializer=manager_dot_v1_dot_manager__pb2.ExtensionRegistrationResponse.FromString,
                )
        self.GetRegisteredExtensions = channel.unary_unary(
                '/semio.manager.v1.ManagerService/GetRegisteredExtensions',
                request_serializer=manager_dot_v1_dot_manager__pb2.GetRegisteredExtensionsRequest.SerializeToString,
                response_deserializer=manager_dot_v1_dot_manager__pb2.ExtendingServices.FromString,
                )


class ManagerServiceServicer(object):
    """A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
    """

    def RequestElement(self, request, context):
        """Request an element from instance information and a traget type.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestAttraction(self, request, context):
        """Request the attracted element for an attraction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterExtension(self, request, context):
        """Register a service to the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegisteredExtensions(self, request, context):
        """Get all registered extensions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestElement': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestElement,
                    request_deserializer=manager_dot_v1_dot_manager__pb2.ElementRequest.FromString,
                    response_serializer=model_dot_v1_dot_model__pb2.Representation.SerializeToString,
            ),
            'RequestAttraction': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAttraction,
                    request_deserializer=manager_dot_v1_dot_manager__pb2.AttractionRequest.FromString,
                    response_serializer=manager_dot_v1_dot_manager__pb2.AttractionResponse.SerializeToString,
            ),
            'RegisterExtension': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterExtension,
                    request_deserializer=manager_dot_v1_dot_manager__pb2.ExtensionRegistrationRequest.FromString,
                    response_serializer=manager_dot_v1_dot_manager__pb2.ExtensionRegistrationResponse.SerializeToString,
            ),
            'GetRegisteredExtensions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegisteredExtensions,
                    request_deserializer=manager_dot_v1_dot_manager__pb2.GetRegisteredExtensionsRequest.FromString,
                    response_serializer=manager_dot_v1_dot_manager__pb2.ExtendingServices.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'semio.manager.v1.ManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManagerService(object):
    """A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
    """

    @staticmethod
    def RequestElement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/semio.manager.v1.ManagerService/RequestElement',
            manager_dot_v1_dot_manager__pb2.ElementRequest.SerializeToString,
            model_dot_v1_dot_model__pb2.Representation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestAttraction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/semio.manager.v1.ManagerService/RequestAttraction',
            manager_dot_v1_dot_manager__pb2.AttractionRequest.SerializeToString,
            manager_dot_v1_dot_manager__pb2.AttractionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterExtension(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/semio.manager.v1.ManagerService/RegisterExtension',
            manager_dot_v1_dot_manager__pb2.ExtensionRegistrationRequest.SerializeToString,
            manager_dot_v1_dot_manager__pb2.ExtensionRegistrationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRegisteredExtensions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/semio.manager.v1.ManagerService/GetRegisteredExtensions',
            manager_dot_v1_dot_manager__pb2.GetRegisteredExtensionsRequest.SerializeToString,
            manager_dot_v1_dot_manager__pb2.ExtendingServices.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
