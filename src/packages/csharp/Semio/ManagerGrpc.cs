// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: manager/v1/manager.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Semio.Manager.V1 {
  /// <summary>
  /// A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
  /// </summary>
  public static partial class ManagerService
  {
    static readonly string __ServiceName = "semio.manager.v1.ManagerService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Semio.Manager.V1.ElementRequest> __Marshaller_semio_manager_v1_ElementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Semio.Manager.V1.ElementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Semio.Model.V1.Representation> __Marshaller_semio_model_v1_Representation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Semio.Model.V1.Representation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Semio.Manager.V1.AttractionRequest> __Marshaller_semio_manager_v1_AttractionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Semio.Manager.V1.AttractionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Semio.Manager.V1.AttractionResponse> __Marshaller_semio_manager_v1_AttractionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Semio.Manager.V1.AttractionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Semio.Manager.V1.ExtensionRegistrationRequest> __Marshaller_semio_manager_v1_ExtensionRegistrationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Semio.Manager.V1.ExtensionRegistrationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Semio.Manager.V1.ExtensionRegistrationResponse> __Marshaller_semio_manager_v1_ExtensionRegistrationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Semio.Manager.V1.ExtensionRegistrationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Semio.Manager.V1.GetRegisteredExtensionsRequest> __Marshaller_semio_manager_v1_GetRegisteredExtensionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Semio.Manager.V1.GetRegisteredExtensionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Semio.Manager.V1.RegisteredExtensionsResponse> __Marshaller_semio_manager_v1_RegisteredExtensionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Semio.Manager.V1.RegisteredExtensionsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Semio.Manager.V1.ElementRequest, global::Semio.Model.V1.Representation> __Method_RequestElement = new grpc::Method<global::Semio.Manager.V1.ElementRequest, global::Semio.Model.V1.Representation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestElement",
        __Marshaller_semio_manager_v1_ElementRequest,
        __Marshaller_semio_model_v1_Representation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Semio.Manager.V1.AttractionRequest, global::Semio.Manager.V1.AttractionResponse> __Method_RequestAttraction = new grpc::Method<global::Semio.Manager.V1.AttractionRequest, global::Semio.Manager.V1.AttractionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestAttraction",
        __Marshaller_semio_manager_v1_AttractionRequest,
        __Marshaller_semio_manager_v1_AttractionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Semio.Manager.V1.ExtensionRegistrationRequest, global::Semio.Manager.V1.ExtensionRegistrationResponse> __Method_RegisterExtension = new grpc::Method<global::Semio.Manager.V1.ExtensionRegistrationRequest, global::Semio.Manager.V1.ExtensionRegistrationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterExtension",
        __Marshaller_semio_manager_v1_ExtensionRegistrationRequest,
        __Marshaller_semio_manager_v1_ExtensionRegistrationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Semio.Manager.V1.GetRegisteredExtensionsRequest, global::Semio.Manager.V1.RegisteredExtensionsResponse> __Method_GetRegisteredExtensions = new grpc::Method<global::Semio.Manager.V1.GetRegisteredExtensionsRequest, global::Semio.Manager.V1.RegisteredExtensionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRegisteredExtensions",
        __Marshaller_semio_manager_v1_GetRegisteredExtensionsRequest,
        __Marshaller_semio_manager_v1_RegisteredExtensionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Semio.Manager.V1.ManagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ManagerService</summary>
    [grpc::BindServiceMethod(typeof(ManagerService), "BindService")]
    public abstract partial class ManagerServiceBase
    {
      /// <summary>
      /// Request an element from instance information and a traget type.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Semio.Model.V1.Representation> RequestElement(global::Semio.Manager.V1.ElementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request the attracted element for an attraction.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Semio.Manager.V1.AttractionResponse> RequestAttraction(global::Semio.Manager.V1.AttractionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Register a service to the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Semio.Manager.V1.ExtensionRegistrationResponse> RegisterExtension(global::Semio.Manager.V1.ExtensionRegistrationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all registered extensions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Semio.Manager.V1.RegisteredExtensionsResponse> GetRegisteredExtensions(global::Semio.Manager.V1.GetRegisteredExtensionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ManagerService</summary>
    public partial class ManagerServiceClient : grpc::ClientBase<ManagerServiceClient>
    {
      /// <summary>Creates a new client for ManagerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ManagerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ManagerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ManagerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ManagerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ManagerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Request an element from instance information and a traget type.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Semio.Model.V1.Representation RequestElement(global::Semio.Manager.V1.ElementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestElement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request an element from instance information and a traget type.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Semio.Model.V1.Representation RequestElement(global::Semio.Manager.V1.ElementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestElement, null, options, request);
      }
      /// <summary>
      /// Request an element from instance information and a traget type.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Semio.Model.V1.Representation> RequestElementAsync(global::Semio.Manager.V1.ElementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestElementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request an element from instance information and a traget type.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Semio.Model.V1.Representation> RequestElementAsync(global::Semio.Manager.V1.ElementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestElement, null, options, request);
      }
      /// <summary>
      /// Request the attracted element for an attraction.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Semio.Manager.V1.AttractionResponse RequestAttraction(global::Semio.Manager.V1.AttractionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestAttraction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request the attracted element for an attraction.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Semio.Manager.V1.AttractionResponse RequestAttraction(global::Semio.Manager.V1.AttractionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestAttraction, null, options, request);
      }
      /// <summary>
      /// Request the attracted element for an attraction.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Semio.Manager.V1.AttractionResponse> RequestAttractionAsync(global::Semio.Manager.V1.AttractionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestAttractionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request the attracted element for an attraction.
      /// The target type tries to be provided by one of the following strategies (lowest number wins).
      /// 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
      /// 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
      /// 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Semio.Manager.V1.AttractionResponse> RequestAttractionAsync(global::Semio.Manager.V1.AttractionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestAttraction, null, options, request);
      }
      /// <summary>
      /// Register a service to the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Semio.Manager.V1.ExtensionRegistrationResponse RegisterExtension(global::Semio.Manager.V1.ExtensionRegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterExtension(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register a service to the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Semio.Manager.V1.ExtensionRegistrationResponse RegisterExtension(global::Semio.Manager.V1.ExtensionRegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterExtension, null, options, request);
      }
      /// <summary>
      /// Register a service to the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Semio.Manager.V1.ExtensionRegistrationResponse> RegisterExtensionAsync(global::Semio.Manager.V1.ExtensionRegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterExtensionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register a service to the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Semio.Manager.V1.ExtensionRegistrationResponse> RegisterExtensionAsync(global::Semio.Manager.V1.ExtensionRegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterExtension, null, options, request);
      }
      /// <summary>
      /// Get all registered extensions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Semio.Manager.V1.RegisteredExtensionsResponse GetRegisteredExtensions(global::Semio.Manager.V1.GetRegisteredExtensionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegisteredExtensions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all registered extensions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Semio.Manager.V1.RegisteredExtensionsResponse GetRegisteredExtensions(global::Semio.Manager.V1.GetRegisteredExtensionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRegisteredExtensions, null, options, request);
      }
      /// <summary>
      /// Get all registered extensions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Semio.Manager.V1.RegisteredExtensionsResponse> GetRegisteredExtensionsAsync(global::Semio.Manager.V1.GetRegisteredExtensionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegisteredExtensionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all registered extensions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Semio.Manager.V1.RegisteredExtensionsResponse> GetRegisteredExtensionsAsync(global::Semio.Manager.V1.GetRegisteredExtensionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRegisteredExtensions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ManagerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ManagerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ManagerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RequestElement, serviceImpl.RequestElement)
          .AddMethod(__Method_RequestAttraction, serviceImpl.RequestAttraction)
          .AddMethod(__Method_RegisterExtension, serviceImpl.RegisterExtension)
          .AddMethod(__Method_GetRegisteredExtensions, serviceImpl.GetRegisteredExtensions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ManagerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RequestElement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Semio.Manager.V1.ElementRequest, global::Semio.Model.V1.Representation>(serviceImpl.RequestElement));
      serviceBinder.AddMethod(__Method_RequestAttraction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Semio.Manager.V1.AttractionRequest, global::Semio.Manager.V1.AttractionResponse>(serviceImpl.RequestAttraction));
      serviceBinder.AddMethod(__Method_RegisterExtension, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Semio.Manager.V1.ExtensionRegistrationRequest, global::Semio.Manager.V1.ExtensionRegistrationResponse>(serviceImpl.RegisterExtension));
      serviceBinder.AddMethod(__Method_GetRegisteredExtensions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Semio.Manager.V1.GetRegisteredExtensionsRequest, global::Semio.Manager.V1.RegisteredExtensionsResponse>(serviceImpl.GetRegisteredExtensions));
    }

  }
}
#endregion
