// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "manager/v1/manager.proto" (package "semio.server.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ManagerService } from "./manager";
import type { Point } from "../../model/v1/model";
import type { AttractionPointRequest } from "../../extension/adapter/v1/adapter";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Representation } from "../../model/v1/model";
import type { RepresentationRequest } from "../../extension/adapter/v1/adapter";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
 *
 * @generated from protobuf service semio.server.v1.ManagerService
 */
export interface IManagerServiceClient {
    /**
     * @generated from protobuf rpc: RequestRepresentation(semio.extension.adapter.v1.RepresentationRequest) returns (semio.model.v1.Representation);
     */
    requestRepresentation(input: RepresentationRequest, options?: RpcOptions): UnaryCall<RepresentationRequest, Representation>;
    /**
     * @generated from protobuf rpc: RequestAttractionPoint(semio.extension.adapter.v1.AttractionPointRequest) returns (semio.model.v1.Point);
     */
    requestAttractionPoint(input: AttractionPointRequest, options?: RpcOptions): UnaryCall<AttractionPointRequest, Point>;
}
/**
 * A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
 *
 * @generated from protobuf service semio.server.v1.ManagerService
 */
export class ManagerServiceClient implements IManagerServiceClient, ServiceInfo {
    typeName = ManagerService.typeName;
    methods = ManagerService.methods;
    options = ManagerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RequestRepresentation(semio.extension.adapter.v1.RepresentationRequest) returns (semio.model.v1.Representation);
     */
    requestRepresentation(input: RepresentationRequest, options?: RpcOptions): UnaryCall<RepresentationRequest, Representation> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RepresentationRequest, Representation>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RequestAttractionPoint(semio.extension.adapter.v1.AttractionPointRequest) returns (semio.model.v1.Point);
     */
    requestAttractionPoint(input: AttractionPointRequest, options?: RpcOptions): UnaryCall<AttractionPointRequest, Point> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttractionPointRequest, Point>("unary", this._transport, method, opt, input);
    }
}
