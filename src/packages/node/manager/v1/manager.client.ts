// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "manager/v1/manager.proto" (package "semio.manager.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ManagerService } from "./manager";
import type { Extendings } from "./manager";
import type { GetRegisteredExtensionsRequest } from "./manager";
import type { ExtensionRegistrationResponse } from "./manager";
import type { ExtensionRegistrationRequest } from "./manager";
import type { AttractionResponse } from "./manager";
import type { AttractionRequest } from "./manager";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Representation } from "../../model/v1/model";
import type { ElementRequest } from "./manager";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
 *
 * @generated from protobuf service semio.manager.v1.ManagerService
 */
export interface IManagerServiceClient {
    /**
     * Request an element from instance information and a traget type.
     *
     * @generated from protobuf rpc: RequestElement(semio.manager.v1.ElementRequest) returns (semio.model.v1.Representation);
     */
    requestElement(input: ElementRequest, options?: RpcOptions): UnaryCall<ElementRequest, Representation>;
    /**
     * Request the attracted element for an attraction.
     *
     * @generated from protobuf rpc: RequestAttraction(semio.manager.v1.AttractionRequest) returns (semio.manager.v1.AttractionResponse);
     */
    requestAttraction(input: AttractionRequest, options?: RpcOptions): UnaryCall<AttractionRequest, AttractionResponse>;
    /**
     * Register a service to the server.
     *
     * @generated from protobuf rpc: RegisterExtension(semio.manager.v1.ExtensionRegistrationRequest) returns (semio.manager.v1.ExtensionRegistrationResponse);
     */
    registerExtension(input: ExtensionRegistrationRequest, options?: RpcOptions): UnaryCall<ExtensionRegistrationRequest, ExtensionRegistrationResponse>;
    /**
     * Get all registered extensions.
     *
     * @generated from protobuf rpc: GetRegisteredExtensions(semio.manager.v1.GetRegisteredExtensionsRequest) returns (semio.manager.v1.Extendings);
     */
    getRegisteredExtensions(input: GetRegisteredExtensionsRequest, options?: RpcOptions): UnaryCall<GetRegisteredExtensionsRequest, Extendings>;
}
/**
 * A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
 *
 * @generated from protobuf service semio.manager.v1.ManagerService
 */
export class ManagerServiceClient implements IManagerServiceClient, ServiceInfo {
    typeName = ManagerService.typeName;
    methods = ManagerService.methods;
    options = ManagerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Request an element from instance information and a traget type.
     *
     * @generated from protobuf rpc: RequestElement(semio.manager.v1.ElementRequest) returns (semio.model.v1.Representation);
     */
    requestElement(input: ElementRequest, options?: RpcOptions): UnaryCall<ElementRequest, Representation> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ElementRequest, Representation>("unary", this._transport, method, opt, input);
    }
    /**
     * Request the attracted element for an attraction.
     *
     * @generated from protobuf rpc: RequestAttraction(semio.manager.v1.AttractionRequest) returns (semio.manager.v1.AttractionResponse);
     */
    requestAttraction(input: AttractionRequest, options?: RpcOptions): UnaryCall<AttractionRequest, AttractionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttractionRequest, AttractionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Register a service to the server.
     *
     * @generated from protobuf rpc: RegisterExtension(semio.manager.v1.ExtensionRegistrationRequest) returns (semio.manager.v1.ExtensionRegistrationResponse);
     */
    registerExtension(input: ExtensionRegistrationRequest, options?: RpcOptions): UnaryCall<ExtensionRegistrationRequest, ExtensionRegistrationResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExtensionRegistrationRequest, ExtensionRegistrationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get all registered extensions.
     *
     * @generated from protobuf rpc: GetRegisteredExtensions(semio.manager.v1.GetRegisteredExtensionsRequest) returns (semio.manager.v1.Extendings);
     */
    getRegisteredExtensions(input: GetRegisteredExtensionsRequest, options?: RpcOptions): UnaryCall<GetRegisteredExtensionsRequest, Extendings> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRegisteredExtensionsRequest, Extendings>("unary", this._transport, method, opt, input);
    }
}
