// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "manager/v1/manager.proto" (package "semio.manager.v1", syntax proto3)
// tslint:disable
import { Element } from "../../model/v1/model";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Extending } from "../../extension/v1/extension";
import { Point } from "../../model/v1/model";
import { Pose } from "../../model/v1/model";
import { Connection } from "../../model/v1/model";
import { Platform } from "../../model/v1/model";
import { Sobject } from "../../model/v1/model";
/**
 * @generated from protobuf message semio.manager.v1.ElementRequest
 */
export interface ElementRequest {
    /**
     * @generated from protobuf field: semio.model.v1.Sobject sobject = 1;
     */
    sobject?: Sobject;
    /**
     * The target platform tries to be provided by one of the following strategies (lowest number wins).
     * 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3)
     * 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
     * 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
     *
     * @generated from protobuf field: repeated semio.model.v1.Platform target_representation_platforms = 2;
     */
    targetRepresentationPlatforms: Platform[];
    /**
     * Optional concepts for the representations. If this can't be unchieved, the default one will be picked unless the target required parameter is set to true.
     *
     * @generated from protobuf field: repeated string target_representation_concepts = 3;
     */
    targetRepresentationConcepts: string[];
    /**
     * An optional level of detail for the target representation. If this can't be unchieved, the closest one will be picked unless the target required parameter is set to true.
     *
     * @generated from protobuf field: repeated int32 target_representation_lods = 4;
     */
    targetRepresentationLods: number[];
    /**
     * Set this to true if all of the targets must be achived.
     *
     * @generated from protobuf field: bool targets_required = 5;
     */
    targetsRequired: boolean;
}
/**
 * @generated from protobuf message semio.manager.v1.ConnectElementRequest
 */
export interface ConnectElementRequest {
    /**
     * @generated from protobuf field: semio.model.v1.Sobject connected_sobject = 1;
     */
    connectedSobject?: Sobject;
    /**
     * @generated from protobuf field: semio.model.v1.Sobject connecting_sobject = 2;
     */
    connectingSobject?: Sobject;
    /**
     * @generated from protobuf field: semio.model.v1.Connection connection = 3;
     */
    connection?: Connection;
}
/**
 * @generated from protobuf message semio.manager.v1.ConnectElementResponse
 */
export interface ConnectElementResponse {
    /**
     * @generated from protobuf field: semio.model.v1.Pose connected_element_pose = 1;
     */
    connectedElementPose?: Pose;
    /**
     * @generated from protobuf field: semio.model.v1.Point connection_point = 2;
     */
    connectionPoint?: Point;
}
/**
 * @generated from protobuf message semio.manager.v1.RegisterExtensionRequest
 */
export interface RegisterExtensionRequest {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: semio.extension.v1.Extending extending = 3;
     */
    extending?: Extending;
    /**
     * @generated from protobuf field: bool replace_existing = 4;
     */
    replaceExisting: boolean;
}
/**
 * @generated from protobuf message semio.manager.v1.RegisterExtensionResponse
 */
export interface RegisterExtensionResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * The old address of the same service type if there was one.
     *
     * @generated from protobuf field: string old_address = 2;
     */
    oldAddress: string;
}
/**
 * @generated from protobuf message semio.manager.v1.GetRegisteredExtensionsRequest
 */
export interface GetRegisteredExtensionsRequest {
}
/**
 * @generated from protobuf message semio.manager.v1.RegisteredExtensionsResponse
 */
export interface RegisteredExtensionsResponse {
    /**
     * A map with extensions where the address is the key and the extension description is the value.
     *
     * @generated from protobuf field: map<string, semio.extension.v1.Extending> extensions = 1;
     */
    extensions: {
        [key: string]: Extending;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ElementRequest$Type extends MessageType<ElementRequest> {
    constructor() {
        super("semio.manager.v1.ElementRequest", [
            { no: 1, name: "sobject", kind: "message", T: () => Sobject },
            { no: 2, name: "target_representation_platforms", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["semio.model.v1.Platform", Platform, "PLATFORM_"] },
            { no: 3, name: "target_representation_concepts", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "target_representation_lods", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "targets_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ElementRequest>): ElementRequest {
        const message = { targetRepresentationPlatforms: [], targetRepresentationConcepts: [], targetRepresentationLods: [], targetsRequired: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ElementRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementRequest): ElementRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Sobject sobject */ 1:
                    message.sobject = Sobject.internalBinaryRead(reader, reader.uint32(), options, message.sobject);
                    break;
                case /* repeated semio.model.v1.Platform target_representation_platforms */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.targetRepresentationPlatforms.push(reader.int32());
                    else
                        message.targetRepresentationPlatforms.push(reader.int32());
                    break;
                case /* repeated string target_representation_concepts */ 3:
                    message.targetRepresentationConcepts.push(reader.string());
                    break;
                case /* repeated int32 target_representation_lods */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.targetRepresentationLods.push(reader.int32());
                    else
                        message.targetRepresentationLods.push(reader.int32());
                    break;
                case /* bool targets_required */ 5:
                    message.targetsRequired = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ElementRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Sobject sobject = 1; */
        if (message.sobject)
            Sobject.internalBinaryWrite(message.sobject, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated semio.model.v1.Platform target_representation_platforms = 2; */
        if (message.targetRepresentationPlatforms.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.targetRepresentationPlatforms.length; i++)
                writer.int32(message.targetRepresentationPlatforms[i]);
            writer.join();
        }
        /* repeated string target_representation_concepts = 3; */
        for (let i = 0; i < message.targetRepresentationConcepts.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.targetRepresentationConcepts[i]);
        /* repeated int32 target_representation_lods = 4; */
        if (message.targetRepresentationLods.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.targetRepresentationLods.length; i++)
                writer.int32(message.targetRepresentationLods[i]);
            writer.join();
        }
        /* bool targets_required = 5; */
        if (message.targetsRequired !== false)
            writer.tag(5, WireType.Varint).bool(message.targetsRequired);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.manager.v1.ElementRequest
 */
export const ElementRequest = new ElementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectElementRequest$Type extends MessageType<ConnectElementRequest> {
    constructor() {
        super("semio.manager.v1.ConnectElementRequest", [
            { no: 1, name: "connected_sobject", kind: "message", T: () => Sobject },
            { no: 2, name: "connecting_sobject", kind: "message", T: () => Sobject },
            { no: 3, name: "connection", kind: "message", T: () => Connection }
        ]);
    }
    create(value?: PartialMessage<ConnectElementRequest>): ConnectElementRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectElementRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectElementRequest): ConnectElementRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Sobject connected_sobject */ 1:
                    message.connectedSobject = Sobject.internalBinaryRead(reader, reader.uint32(), options, message.connectedSobject);
                    break;
                case /* semio.model.v1.Sobject connecting_sobject */ 2:
                    message.connectingSobject = Sobject.internalBinaryRead(reader, reader.uint32(), options, message.connectingSobject);
                    break;
                case /* semio.model.v1.Connection connection */ 3:
                    message.connection = Connection.internalBinaryRead(reader, reader.uint32(), options, message.connection);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectElementRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Sobject connected_sobject = 1; */
        if (message.connectedSobject)
            Sobject.internalBinaryWrite(message.connectedSobject, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Sobject connecting_sobject = 2; */
        if (message.connectingSobject)
            Sobject.internalBinaryWrite(message.connectingSobject, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Connection connection = 3; */
        if (message.connection)
            Connection.internalBinaryWrite(message.connection, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.manager.v1.ConnectElementRequest
 */
export const ConnectElementRequest = new ConnectElementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectElementResponse$Type extends MessageType<ConnectElementResponse> {
    constructor() {
        super("semio.manager.v1.ConnectElementResponse", [
            { no: 1, name: "connected_element_pose", kind: "message", T: () => Pose },
            { no: 2, name: "connection_point", kind: "message", T: () => Point }
        ]);
    }
    create(value?: PartialMessage<ConnectElementResponse>): ConnectElementResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectElementResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectElementResponse): ConnectElementResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Pose connected_element_pose */ 1:
                    message.connectedElementPose = Pose.internalBinaryRead(reader, reader.uint32(), options, message.connectedElementPose);
                    break;
                case /* semio.model.v1.Point connection_point */ 2:
                    message.connectionPoint = Point.internalBinaryRead(reader, reader.uint32(), options, message.connectionPoint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectElementResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Pose connected_element_pose = 1; */
        if (message.connectedElementPose)
            Pose.internalBinaryWrite(message.connectedElementPose, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Point connection_point = 2; */
        if (message.connectionPoint)
            Point.internalBinaryWrite(message.connectionPoint, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.manager.v1.ConnectElementResponse
 */
export const ConnectElementResponse = new ConnectElementResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterExtensionRequest$Type extends MessageType<RegisterExtensionRequest> {
    constructor() {
        super("semio.manager.v1.RegisterExtensionRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "extending", kind: "message", T: () => Extending },
            { no: 4, name: "replace_existing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterExtensionRequest>): RegisterExtensionRequest {
        const message = { address: "", name: "", replaceExisting: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegisterExtensionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterExtensionRequest): RegisterExtensionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* semio.extension.v1.Extending extending */ 3:
                    message.extending = Extending.internalBinaryRead(reader, reader.uint32(), options, message.extending);
                    break;
                case /* bool replace_existing */ 4:
                    message.replaceExisting = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterExtensionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* semio.extension.v1.Extending extending = 3; */
        if (message.extending)
            Extending.internalBinaryWrite(message.extending, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool replace_existing = 4; */
        if (message.replaceExisting !== false)
            writer.tag(4, WireType.Varint).bool(message.replaceExisting);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.manager.v1.RegisterExtensionRequest
 */
export const RegisterExtensionRequest = new RegisterExtensionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterExtensionResponse$Type extends MessageType<RegisterExtensionResponse> {
    constructor() {
        super("semio.manager.v1.RegisterExtensionResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "old_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterExtensionResponse>): RegisterExtensionResponse {
        const message = { success: false, oldAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegisterExtensionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterExtensionResponse): RegisterExtensionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string old_address */ 2:
                    message.oldAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterExtensionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string old_address = 2; */
        if (message.oldAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.oldAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.manager.v1.RegisterExtensionResponse
 */
export const RegisterExtensionResponse = new RegisterExtensionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRegisteredExtensionsRequest$Type extends MessageType<GetRegisteredExtensionsRequest> {
    constructor() {
        super("semio.manager.v1.GetRegisteredExtensionsRequest", []);
    }
    create(value?: PartialMessage<GetRegisteredExtensionsRequest>): GetRegisteredExtensionsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRegisteredExtensionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRegisteredExtensionsRequest): GetRegisteredExtensionsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetRegisteredExtensionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.manager.v1.GetRegisteredExtensionsRequest
 */
export const GetRegisteredExtensionsRequest = new GetRegisteredExtensionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisteredExtensionsResponse$Type extends MessageType<RegisteredExtensionsResponse> {
    constructor() {
        super("semio.manager.v1.RegisteredExtensionsResponse", [
            { no: 1, name: "extensions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Extending } }
        ]);
    }
    create(value?: PartialMessage<RegisteredExtensionsResponse>): RegisteredExtensionsResponse {
        const message = { extensions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegisteredExtensionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisteredExtensionsResponse): RegisteredExtensionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, semio.extension.v1.Extending> extensions */ 1:
                    this.binaryReadMap1(message.extensions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: RegisteredExtensionsResponse["extensions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RegisteredExtensionsResponse["extensions"] | undefined, val: RegisteredExtensionsResponse["extensions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Extending.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field semio.manager.v1.RegisteredExtensionsResponse.extensions");
            }
        }
        map[key ?? ""] = val ?? Extending.create();
    }
    internalBinaryWrite(message: RegisteredExtensionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, semio.extension.v1.Extending> extensions = 1; */
        for (let k of Object.keys(message.extensions)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Extending.internalBinaryWrite(message.extensions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.manager.v1.RegisteredExtensionsResponse
 */
export const RegisteredExtensionsResponse = new RegisteredExtensionsResponse$Type();
/**
 * @generated ServiceType for protobuf service semio.manager.v1.ManagerService
 */
export const ManagerService = new ServiceType("semio.manager.v1.ManagerService", [
    { name: "RequestElement", options: {}, I: ElementRequest, O: Element },
    { name: "ConnectElement", options: {}, I: ConnectElementRequest, O: ConnectElementResponse },
    { name: "RegisterExtension", options: {}, I: RegisterExtensionRequest, O: RegisterExtensionResponse },
    { name: "GetRegisteredExtensions", options: {}, I: GetRegisteredExtensionsRequest, O: RegisteredExtensionsResponse }
]);
