// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "extension/adapter/v1/adapter.proto" (package "semio.extension.adapter.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Sobject } from "../../../model/v1/model";
import { Representation } from "../../../model/v1/model";
import { Point } from "../../../model/v1/model";
/**
 * Description what an adapter is adapting to.
 *
 * @generated from protobuf message semio.extension.adapter.v1.Adapting
 */
export interface Adapting {
    /**
     * A url for the platform that is adapted.
     *
     * @generated from protobuf field: string platform_url = 1;
     */
    platformUrl: string;
}
/**
 * @generated from protobuf message semio.extension.adapter.v1.AttractionPointRequest
 */
export interface AttractionPointRequest {
    /**
     * Url of attractor.
     *
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * Parameters of attractor.
     *
     * @generated from protobuf field: map<string, string> parameters = 2;
     */
    parameters: {
        [key: string]: string;
    };
    /**
     * Optional bias parameters of attracted.
     *
     * @generated from protobuf field: map<string, string> bias = 3;
     */
    bias: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf oneof: representation
     */
    representation: {
        oneofKind: "simpleRepresentation";
        /**
         * @generated from protobuf field: semio.model.v1.Point simple_representation = 4;
         */
        simpleRepresentation: Point;
    } | {
        oneofKind: "fullRepresentation";
        /**
         * @generated from protobuf field: semio.model.v1.Representation full_representation = 5;
         */
        fullRepresentation: Representation;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message semio.extension.adapter.v1.RepresentationRequest
 */
export interface RepresentationRequest {
    /**
     * @generated from protobuf field: semio.model.v1.Sobject sobject = 1;
     */
    sobject?: Sobject;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 lod = 4;
     */
    lod: bigint;
}
/**
 * @generated from protobuf message semio.extension.adapter.v1.RepresentationsRequest
 */
export interface RepresentationsRequest {
    /**
     * @generated from protobuf field: semio.model.v1.Sobject sobject = 1;
     */
    sobject?: Sobject;
    /**
     * @generated from protobuf field: repeated string types = 2;
     */
    types: string[];
    /**
     * @generated from protobuf field: repeated string names = 3;
     */
    names: string[];
    /**
     * @generated from protobuf field: repeated int64 lods = 4;
     */
    lods: bigint[];
}
/**
 * @generated from protobuf message semio.extension.adapter.v1.RepresentationsResponse
 */
export interface RepresentationsResponse {
    /**
     * @generated from protobuf field: repeated semio.model.v1.Representation representations = 1;
     */
    representations: Representation[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Adapting$Type extends MessageType<Adapting> {
    constructor() {
        super("semio.extension.adapter.v1.Adapting", [
            { no: 1, name: "platform_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Adapting>): Adapting {
        const message = { platformUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Adapting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Adapting): Adapting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string platform_url */ 1:
                    message.platformUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Adapting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string platform_url = 1; */
        if (message.platformUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.platformUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.adapter.v1.Adapting
 */
export const Adapting = new Adapting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttractionPointRequest$Type extends MessageType<AttractionPointRequest> {
    constructor() {
        super("semio.extension.adapter.v1.AttractionPointRequest", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parameters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 3, name: "bias", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 4, name: "simple_representation", kind: "message", oneof: "representation", T: () => Point },
            { no: 5, name: "full_representation", kind: "message", oneof: "representation", T: () => Representation }
        ]);
    }
    create(value?: PartialMessage<AttractionPointRequest>): AttractionPointRequest {
        const message = { url: "", parameters: {}, bias: {}, representation: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AttractionPointRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttractionPointRequest): AttractionPointRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* map<string, string> parameters */ 2:
                    this.binaryReadMap2(message.parameters, reader, options);
                    break;
                case /* map<string, string> bias */ 3:
                    this.binaryReadMap3(message.bias, reader, options);
                    break;
                case /* semio.model.v1.Point simple_representation */ 4:
                    message.representation = {
                        oneofKind: "simpleRepresentation",
                        simpleRepresentation: Point.internalBinaryRead(reader, reader.uint32(), options, (message.representation as any).simpleRepresentation)
                    };
                    break;
                case /* semio.model.v1.Representation full_representation */ 5:
                    message.representation = {
                        oneofKind: "fullRepresentation",
                        fullRepresentation: Representation.internalBinaryRead(reader, reader.uint32(), options, (message.representation as any).fullRepresentation)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: AttractionPointRequest["parameters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AttractionPointRequest["parameters"] | undefined, val: AttractionPointRequest["parameters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field semio.extension.adapter.v1.AttractionPointRequest.parameters");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    private binaryReadMap3(map: AttractionPointRequest["bias"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AttractionPointRequest["bias"] | undefined, val: AttractionPointRequest["bias"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field semio.extension.adapter.v1.AttractionPointRequest.bias");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: AttractionPointRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* map<string, string> parameters = 2; */
        for (let k of Object.keys(message.parameters))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.parameters[k]).join();
        /* map<string, string> bias = 3; */
        for (let k of Object.keys(message.bias))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.bias[k]).join();
        /* semio.model.v1.Point simple_representation = 4; */
        if (message.representation.oneofKind === "simpleRepresentation")
            Point.internalBinaryWrite(message.representation.simpleRepresentation, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Representation full_representation = 5; */
        if (message.representation.oneofKind === "fullRepresentation")
            Representation.internalBinaryWrite(message.representation.fullRepresentation, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.adapter.v1.AttractionPointRequest
 */
export const AttractionPointRequest = new AttractionPointRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RepresentationRequest$Type extends MessageType<RepresentationRequest> {
    constructor() {
        super("semio.extension.adapter.v1.RepresentationRequest", [
            { no: 1, name: "sobject", kind: "message", T: () => Sobject },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "lod", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RepresentationRequest>): RepresentationRequest {
        const message = { type: "", name: "", lod: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RepresentationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RepresentationRequest): RepresentationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Sobject sobject */ 1:
                    message.sobject = Sobject.internalBinaryRead(reader, reader.uint32(), options, message.sobject);
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* int64 lod */ 4:
                    message.lod = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RepresentationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Sobject sobject = 1; */
        if (message.sobject)
            Sobject.internalBinaryWrite(message.sobject, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* int64 lod = 4; */
        if (message.lod !== 0n)
            writer.tag(4, WireType.Varint).int64(message.lod);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.adapter.v1.RepresentationRequest
 */
export const RepresentationRequest = new RepresentationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RepresentationsRequest$Type extends MessageType<RepresentationsRequest> {
    constructor() {
        super("semio.extension.adapter.v1.RepresentationsRequest", [
            { no: 1, name: "sobject", kind: "message", T: () => Sobject },
            { no: 2, name: "types", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "lods", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RepresentationsRequest>): RepresentationsRequest {
        const message = { types: [], names: [], lods: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RepresentationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RepresentationsRequest): RepresentationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Sobject sobject */ 1:
                    message.sobject = Sobject.internalBinaryRead(reader, reader.uint32(), options, message.sobject);
                    break;
                case /* repeated string types */ 2:
                    message.types.push(reader.string());
                    break;
                case /* repeated string names */ 3:
                    message.names.push(reader.string());
                    break;
                case /* repeated int64 lods */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lods.push(reader.int64().toBigInt());
                    else
                        message.lods.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RepresentationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Sobject sobject = 1; */
        if (message.sobject)
            Sobject.internalBinaryWrite(message.sobject, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string types = 2; */
        for (let i = 0; i < message.types.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.types[i]);
        /* repeated string names = 3; */
        for (let i = 0; i < message.names.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.names[i]);
        /* repeated int64 lods = 4; */
        if (message.lods.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lods.length; i++)
                writer.int64(message.lods[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.adapter.v1.RepresentationsRequest
 */
export const RepresentationsRequest = new RepresentationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RepresentationsResponse$Type extends MessageType<RepresentationsResponse> {
    constructor() {
        super("semio.extension.adapter.v1.RepresentationsResponse", [
            { no: 1, name: "representations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Representation }
        ]);
    }
    create(value?: PartialMessage<RepresentationsResponse>): RepresentationsResponse {
        const message = { representations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RepresentationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RepresentationsResponse): RepresentationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated semio.model.v1.Representation representations */ 1:
                    message.representations.push(Representation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RepresentationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated semio.model.v1.Representation representations = 1; */
        for (let i = 0; i < message.representations.length; i++)
            Representation.internalBinaryWrite(message.representations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.adapter.v1.RepresentationsResponse
 */
export const RepresentationsResponse = new RepresentationsResponse$Type();
/**
 * @generated ServiceType for protobuf service semio.extension.adapter.v1.AdapterService
 */
export const AdapterService = new ServiceType("semio.extension.adapter.v1.AdapterService", [
    { name: "RequestAttractionPoint", options: {}, I: AttractionPointRequest, O: Point },
    { name: "RequestRepresentation", options: {}, I: RepresentationRequest, O: Representation },
    { name: "RequestRepresentations", options: {}, I: RepresentationsRequest, O: RepresentationsResponse }
]);
