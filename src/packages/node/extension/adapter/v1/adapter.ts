// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "extension/adapter/v1/adapter.proto" (package "semio.extension.adapter.v1", syntax proto3)
// tslint:disable
import { Prototype } from "../../../model/v1/model";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Representation } from "../../../model/v1/model";
import { Point } from "../../../geometry/v1/geometry";
import { Link } from "../../../model/v1/model";
import { Plan } from "../../../model/v1/model";
import { Platform } from "../../../model/v1/model";
/**
 * Description what an adapter is adapting to.
 *
 * @generated from protobuf message semio.extension.adapter.v1.Adapting
 */
export interface Adapting {
    /**
     * The platform that is adapted.
     *
     * @generated from protobuf field: semio.model.v1.Platform platform = 1;
     */
    platform: Platform;
}
/**
 * A connection point request requests a point from the connected (sobject).
 *
 * @generated from protobuf message semio.extension.adapter.v1.ConnectionPointRequest
 */
export interface ConnectionPointRequest {
    /**
     * The plan of the connected (sobject).
     *
     * @generated from protobuf field: semio.model.v1.Plan plan = 1;
     */
    plan?: Plan;
    /**
     * The link to the connected (sobject).
     *
     * @generated from protobuf field: semio.model.v1.Link link = 2;
     */
    link?: Link;
    /**
     * @generated from protobuf oneof: representation
     */
    representation: {
        oneofKind: "simpleRepresentation";
        /**
         * @generated from protobuf field: semio.geometry.v1.Point simple_representation = 3;
         */
        simpleRepresentation: Point;
    } | {
        oneofKind: "fullRepresentation";
        /**
         * @generated from protobuf field: semio.model.v1.Representation full_representation = 4;
         */
        fullRepresentation: Representation;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Adapting$Type extends MessageType<Adapting> {
    constructor() {
        super("semio.extension.adapter.v1.Adapting", [
            { no: 1, name: "platform", kind: "enum", T: () => ["semio.model.v1.Platform", Platform, "PLATFORM_"] }
        ]);
    }
    create(value?: PartialMessage<Adapting>): Adapting {
        const message = { platform: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Adapting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Adapting): Adapting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Platform platform */ 1:
                    message.platform = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Adapting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Platform platform = 1; */
        if (message.platform !== 0)
            writer.tag(1, WireType.Varint).int32(message.platform);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.adapter.v1.Adapting
 */
export const Adapting = new Adapting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectionPointRequest$Type extends MessageType<ConnectionPointRequest> {
    constructor() {
        super("semio.extension.adapter.v1.ConnectionPointRequest", [
            { no: 1, name: "plan", kind: "message", T: () => Plan },
            { no: 2, name: "link", kind: "message", T: () => Link },
            { no: 3, name: "simple_representation", kind: "message", oneof: "representation", T: () => Point },
            { no: 4, name: "full_representation", kind: "message", oneof: "representation", T: () => Representation }
        ]);
    }
    create(value?: PartialMessage<ConnectionPointRequest>): ConnectionPointRequest {
        const message = { representation: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectionPointRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectionPointRequest): ConnectionPointRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Plan plan */ 1:
                    message.plan = Plan.internalBinaryRead(reader, reader.uint32(), options, message.plan);
                    break;
                case /* semio.model.v1.Link link */ 2:
                    message.link = Link.internalBinaryRead(reader, reader.uint32(), options, message.link);
                    break;
                case /* semio.geometry.v1.Point simple_representation */ 3:
                    message.representation = {
                        oneofKind: "simpleRepresentation",
                        simpleRepresentation: Point.internalBinaryRead(reader, reader.uint32(), options, (message.representation as any).simpleRepresentation)
                    };
                    break;
                case /* semio.model.v1.Representation full_representation */ 4:
                    message.representation = {
                        oneofKind: "fullRepresentation",
                        fullRepresentation: Representation.internalBinaryRead(reader, reader.uint32(), options, (message.representation as any).fullRepresentation)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectionPointRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Plan plan = 1; */
        if (message.plan)
            Plan.internalBinaryWrite(message.plan, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Link link = 2; */
        if (message.link)
            Link.internalBinaryWrite(message.link, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* semio.geometry.v1.Point simple_representation = 3; */
        if (message.representation.oneofKind === "simpleRepresentation")
            Point.internalBinaryWrite(message.representation.simpleRepresentation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Representation full_representation = 4; */
        if (message.representation.oneofKind === "fullRepresentation")
            Representation.internalBinaryWrite(message.representation.fullRepresentation, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.adapter.v1.ConnectionPointRequest
 */
export const ConnectionPointRequest = new ConnectionPointRequest$Type();
/**
 * @generated ServiceType for protobuf service semio.extension.adapter.v1.AdapterService
 */
export const AdapterService = new ServiceType("semio.extension.adapter.v1.AdapterService", [
    { name: "RequestPrototype", options: {}, I: Plan, O: Prototype },
    { name: "RequestConnectionPoint", options: {}, I: ConnectionPointRequest, O: Point }
]);
