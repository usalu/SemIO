// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "extension/adapter/v1/adapter.proto" (package "semio.extension.adapter.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AdapterService } from "./adapter";
import type { Prototype } from "../../../model/v1/model";
import type { PrototypeRequest } from "./adapter";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Point } from "../../../model/v1/model";
import type { ConnectionPointRequest } from "./adapter";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * An adapter service is an adapter for elements to a specific platform where your elements are (parameterically) defined in.
 *
 * @generated from protobuf service semio.extension.adapter.v1.AdapterService
 */
export interface IAdapterServiceClient {
    /**
     * Request an connection point for the connected.
     *
     * @generated from protobuf rpc: RequestConnectionPoint(semio.extension.adapter.v1.ConnectionPointRequest) returns (semio.model.v1.Point);
     */
    requestConnectionPoint(input: ConnectionPointRequest, options?: RpcOptions): UnaryCall<ConnectionPointRequest, Point>;
    /**
     * Request a prototype.
     *
     * @generated from protobuf rpc: RequestPrototype(semio.extension.adapter.v1.PrototypeRequest) returns (semio.model.v1.Prototype);
     */
    requestPrototype(input: PrototypeRequest, options?: RpcOptions): UnaryCall<PrototypeRequest, Prototype>;
}
/**
 * An adapter service is an adapter for elements to a specific platform where your elements are (parameterically) defined in.
 *
 * @generated from protobuf service semio.extension.adapter.v1.AdapterService
 */
export class AdapterServiceClient implements IAdapterServiceClient, ServiceInfo {
    typeName = AdapterService.typeName;
    methods = AdapterService.methods;
    options = AdapterService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Request an connection point for the connected.
     *
     * @generated from protobuf rpc: RequestConnectionPoint(semio.extension.adapter.v1.ConnectionPointRequest) returns (semio.model.v1.Point);
     */
    requestConnectionPoint(input: ConnectionPointRequest, options?: RpcOptions): UnaryCall<ConnectionPointRequest, Point> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConnectionPointRequest, Point>("unary", this._transport, method, opt, input);
    }
    /**
     * Request a prototype.
     *
     * @generated from protobuf rpc: RequestPrototype(semio.extension.adapter.v1.PrototypeRequest) returns (semio.model.v1.Prototype);
     */
    requestPrototype(input: PrototypeRequest, options?: RpcOptions): UnaryCall<PrototypeRequest, Prototype> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PrototypeRequest, Prototype>("unary", this._transport, method, opt, input);
    }
}
