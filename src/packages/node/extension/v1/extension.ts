// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "extension/v1/extension.proto" (package "semio.extension.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Translating } from "../translator/v1/translator";
import { Transforming } from "../transformer/v1/transformer";
import { Converting } from "../converter/v1/converter";
import { Adapting } from "../adapter/v1/adapter";
/**
 * @generated from protobuf message semio.extension.v1.Extending
 */
export interface Extending {
    /**
     * @generated from protobuf field: repeated semio.extension.adapter.v1.Adapting adaptings = 3;
     */
    adaptings: Adapting[];
    /**
     * @generated from protobuf field: repeated semio.extension.converter.v1.Converting convertings = 4;
     */
    convertings: Converting[];
    /**
     * @generated from protobuf field: repeated semio.extension.transformer.v1.Transforming transformings = 5;
     */
    transformings: Transforming[];
    /**
     * @generated from protobuf field: repeated semio.extension.translator.v1.Translating translatings = 6;
     */
    translatings: Translating[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Extending$Type extends MessageType<Extending> {
    constructor() {
        super("semio.extension.v1.Extending", [
            { no: 3, name: "adaptings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Adapting },
            { no: 4, name: "convertings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Converting },
            { no: 5, name: "transformings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Transforming },
            { no: 6, name: "translatings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Translating }
        ]);
    }
    create(value?: PartialMessage<Extending>): Extending {
        const message = { adaptings: [], convertings: [], transformings: [], translatings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Extending>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Extending): Extending {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated semio.extension.adapter.v1.Adapting adaptings */ 3:
                    message.adaptings.push(Adapting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated semio.extension.converter.v1.Converting convertings */ 4:
                    message.convertings.push(Converting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated semio.extension.transformer.v1.Transforming transformings */ 5:
                    message.transformings.push(Transforming.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated semio.extension.translator.v1.Translating translatings */ 6:
                    message.translatings.push(Translating.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Extending, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated semio.extension.adapter.v1.Adapting adaptings = 3; */
        for (let i = 0; i < message.adaptings.length; i++)
            Adapting.internalBinaryWrite(message.adaptings[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated semio.extension.converter.v1.Converting convertings = 4; */
        for (let i = 0; i < message.convertings.length; i++)
            Converting.internalBinaryWrite(message.convertings[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated semio.extension.transformer.v1.Transforming transformings = 5; */
        for (let i = 0; i < message.transformings.length; i++)
            Transforming.internalBinaryWrite(message.transformings[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated semio.extension.translator.v1.Translating translatings = 6; */
        for (let i = 0; i < message.translatings.length; i++)
            Translating.internalBinaryWrite(message.translatings[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.v1.Extending
 */
export const Extending = new Extending$Type();
