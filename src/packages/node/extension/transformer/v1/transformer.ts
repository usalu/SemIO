// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "extension/transformer/v1/transformer.proto" (package "semio.extension.transformer.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Layout } from "../../../model/v1/model";
import { Decision } from "../../../model/v1/model";
/**
 * @generated from protobuf message semio.extension.transformer.v1.Transforming
 */
export interface Transforming {
}
/**
 * A rewrite layout request is a description for layout (graph) rewrites.
 *
 * @generated from protobuf message semio.extension.transformer.v1.RewriteLayoutRequest
 */
export interface RewriteLayoutRequest {
    /**
     * @generated from protobuf field: repeated semio.model.v1.Decision decisions = 1;
     */
    decisions: Decision[];
    /**
     * An optional initial layout that is used a starting layout to apply the decisions
     *
     * @generated from protobuf field: semio.model.v1.Layout initial_layout = 2;
     */
    initialLayout?: Layout;
}
// @generated message type with reflection information, may provide speed optimized methods
class Transforming$Type extends MessageType<Transforming> {
    constructor() {
        super("semio.extension.transformer.v1.Transforming", []);
    }
    create(value?: PartialMessage<Transforming>): Transforming {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Transforming>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Transforming): Transforming {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Transforming, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.transformer.v1.Transforming
 */
export const Transforming = new Transforming$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RewriteLayoutRequest$Type extends MessageType<RewriteLayoutRequest> {
    constructor() {
        super("semio.extension.transformer.v1.RewriteLayoutRequest", [
            { no: 1, name: "decisions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Decision },
            { no: 2, name: "initial_layout", kind: "message", T: () => Layout }
        ]);
    }
    create(value?: PartialMessage<RewriteLayoutRequest>): RewriteLayoutRequest {
        const message = { decisions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RewriteLayoutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RewriteLayoutRequest): RewriteLayoutRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated semio.model.v1.Decision decisions */ 1:
                    message.decisions.push(Decision.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* semio.model.v1.Layout initial_layout */ 2:
                    message.initialLayout = Layout.internalBinaryRead(reader, reader.uint32(), options, message.initialLayout);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RewriteLayoutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated semio.model.v1.Decision decisions = 1; */
        for (let i = 0; i < message.decisions.length; i++)
            Decision.internalBinaryWrite(message.decisions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Layout initial_layout = 2; */
        if (message.initialLayout)
            Layout.internalBinaryWrite(message.initialLayout, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.transformer.v1.RewriteLayoutRequest
 */
export const RewriteLayoutRequest = new RewriteLayoutRequest$Type();
/**
 * @generated ServiceType for protobuf service semio.extension.transformer.v1.TransformerService
 */
export const TransformerService = new ServiceType("semio.extension.transformer.v1.TransformerService", [
    { name: "RewriteLayout", options: {}, I: RewriteLayoutRequest, O: Layout }
]);
