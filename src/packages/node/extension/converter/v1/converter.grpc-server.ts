// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "extension/converter/v1/converter.proto" (package "semio.extension.converter.v1", syntax proto3)
// tslint:disable
import { Representation } from "../../../model/v1/model";
import { RepresentationConversionRequest } from "./converter";
import type * as grpc from "@grpc/grpc-js";
/**
 * A converter service can convert an element from one representation into another representation.
 *
 * @generated from protobuf service semio.extension.converter.v1.ConverterService
 */
export interface IConverterService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: ConvertRepresentation(semio.extension.converter.v1.RepresentationConversionRequest) returns (semio.model.v1.Representation);
     */
    convertRepresentation: grpc.handleUnaryCall<RepresentationConversionRequest, Representation>;
}
/**
 * @grpc/grpc-js definition for the protobuf service semio.extension.converter.v1.ConverterService.
 *
 * Usage: Implement the interface IConverterService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IConverterService = ...
 * server.addService(converterServiceDefinition, service);
 * ```
 */
export const converterServiceDefinition: grpc.ServiceDefinition<IConverterService> = {
    convertRepresentation: {
        path: "/semio.extension.converter.v1.ConverterService/ConvertRepresentation",
        originalName: "ConvertRepresentation",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Representation.fromBinary(bytes),
        requestDeserialize: bytes => RepresentationConversionRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Representation.toBinary(value)),
        requestSerialize: value => Buffer.from(RepresentationConversionRequest.toBinary(value))
    }
};
