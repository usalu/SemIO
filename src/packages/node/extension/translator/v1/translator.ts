// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "extension/translator/v1/translator.proto" (package "semio.extension.translator.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Pose } from "../../../model/v1/model";
import { Representation } from "../../../model/v1/model";
import { Platform } from "../../../model/v1/model";
/**
 * Description what a translator is translating.
 *
 * @generated from protobuf message semio.extension.translator.v1.Translating
 */
export interface Translating {
    /**
     * Platform in which the translator can translate.
     *
     * @generated from protobuf field: semio.model.v1.Platform platform = 1;
     */
    platform: Platform;
}
/**
 * @generated from protobuf message semio.extension.translator.v1.TranslateRepresentationRequest
 */
export interface TranslateRepresentationRequest {
    /**
     * Representation that should be translated.
     *
     * @generated from protobuf field: semio.model.v1.Representation representation = 1;
     */
    representation?: Representation;
    /**
     * Target pose of representation.
     *
     * @generated from protobuf field: semio.model.v1.Pose target_pose = 2;
     */
    targetPose?: Pose;
    /**
     * Optional source pose of representation.
     *
     * @generated from protobuf field: semio.model.v1.Pose source_pose = 3;
     */
    sourcePose?: Pose;
}
// @generated message type with reflection information, may provide speed optimized methods
class Translating$Type extends MessageType<Translating> {
    constructor() {
        super("semio.extension.translator.v1.Translating", [
            { no: 1, name: "platform", kind: "enum", T: () => ["semio.model.v1.Platform", Platform, "PLATFORM_"] }
        ]);
    }
    create(value?: PartialMessage<Translating>): Translating {
        const message = { platform: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Translating>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Translating): Translating {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Platform platform */ 1:
                    message.platform = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Translating, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Platform platform = 1; */
        if (message.platform !== 0)
            writer.tag(1, WireType.Varint).int32(message.platform);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.translator.v1.Translating
 */
export const Translating = new Translating$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TranslateRepresentationRequest$Type extends MessageType<TranslateRepresentationRequest> {
    constructor() {
        super("semio.extension.translator.v1.TranslateRepresentationRequest", [
            { no: 1, name: "representation", kind: "message", T: () => Representation },
            { no: 2, name: "target_pose", kind: "message", T: () => Pose },
            { no: 3, name: "source_pose", kind: "message", T: () => Pose }
        ]);
    }
    create(value?: PartialMessage<TranslateRepresentationRequest>): TranslateRepresentationRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TranslateRepresentationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TranslateRepresentationRequest): TranslateRepresentationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Representation representation */ 1:
                    message.representation = Representation.internalBinaryRead(reader, reader.uint32(), options, message.representation);
                    break;
                case /* semio.model.v1.Pose target_pose */ 2:
                    message.targetPose = Pose.internalBinaryRead(reader, reader.uint32(), options, message.targetPose);
                    break;
                case /* semio.model.v1.Pose source_pose */ 3:
                    message.sourcePose = Pose.internalBinaryRead(reader, reader.uint32(), options, message.sourcePose);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TranslateRepresentationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Representation representation = 1; */
        if (message.representation)
            Representation.internalBinaryWrite(message.representation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Pose target_pose = 2; */
        if (message.targetPose)
            Pose.internalBinaryWrite(message.targetPose, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Pose source_pose = 3; */
        if (message.sourcePose)
            Pose.internalBinaryWrite(message.sourcePose, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.extension.translator.v1.TranslateRepresentationRequest
 */
export const TranslateRepresentationRequest = new TranslateRepresentationRequest$Type();
/**
 * @generated ServiceType for protobuf service semio.extension.translator.v1.TranslatorService
 */
export const TranslatorService = new ServiceType("semio.extension.translator.v1.TranslatorService", [
    { name: "TranslateRepresentation", options: {}, I: TranslateRepresentationRequest, O: Representation }
]);
