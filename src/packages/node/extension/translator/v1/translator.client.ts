// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "extension/translator/v1/translator.proto" (package "semio.extension.translator.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TranslatorService } from "./translator";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Representation } from "../../../model/v1/model";
import type { TranslateRepresentationRequest } from "./translator";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A translator service can (mostly) translate representations of the specific extension platform. Translating means moving, rotating and scaling representations.
 *
 * @generated from protobuf service semio.extension.translator.v1.TranslatorService
 */
export interface ITranslatorServiceClient {
    /**
     * Translate a representation from one pose (coordinate system) into another one.
     *
     * @generated from protobuf rpc: TranslateRepresentation(semio.extension.translator.v1.TranslateRepresentationRequest) returns (semio.model.v1.Representation);
     */
    translateRepresentation(input: TranslateRepresentationRequest, options?: RpcOptions): UnaryCall<TranslateRepresentationRequest, Representation>;
}
/**
 * A translator service can (mostly) translate representations of the specific extension platform. Translating means moving, rotating and scaling representations.
 *
 * @generated from protobuf service semio.extension.translator.v1.TranslatorService
 */
export class TranslatorServiceClient implements ITranslatorServiceClient, ServiceInfo {
    typeName = TranslatorService.typeName;
    methods = TranslatorService.methods;
    options = TranslatorService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Translate a representation from one pose (coordinate system) into another one.
     *
     * @generated from protobuf rpc: TranslateRepresentation(semio.extension.translator.v1.TranslateRepresentationRequest) returns (semio.model.v1.Representation);
     */
    translateRepresentation(input: TranslateRepresentationRequest, options?: RpcOptions): UnaryCall<TranslateRepresentationRequest, Representation> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TranslateRepresentationRequest, Representation>("unary", this._transport, method, opt, input);
    }
}
