// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "extension/adapter/v1/adapter.proto" (package "semio.extension.adapter.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AdapterService } from "./adapter";
import type { Representations } from "../../../model/v1/model";
import type { RepresentationsRequest } from "./adapter";
import type { Representation } from "../../../model/v1/model";
import type { RepresentationRequest } from "./adapter";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Point } from "../../../model/v1/model";
import type { AttractionPointRequest } from "./adapter";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * An adapter service is an adapter for elements to a specific platform where your elements are (parameterically) defined in.
 *
 * @generated from protobuf service semio.extension.adapter.v1.AdapterService
 */
export interface IAdapterServiceClient {
    /**
     * Request an attraction point for the attracted.
     *
     * @generated from protobuf rpc: RequestAttractionPoint(semio.extension.adapter.v1.AttractionPointRequest) returns (semio.model.v1.Point);
     */
    requestAttractionPoint(input: AttractionPointRequest, options?: RpcOptions): UnaryCall<AttractionPointRequest, Point>;
    /**
     * Request a specific representation
     *
     * @generated from protobuf rpc: RequestRepresentation(semio.extension.adapter.v1.RepresentationRequest) returns (semio.model.v1.Representation);
     */
    requestRepresentation(input: RepresentationRequest, options?: RpcOptions): UnaryCall<RepresentationRequest, Representation>;
    /**
     * Request potentially all representations
     *
     * @generated from protobuf rpc: RequestRepresentations(semio.extension.adapter.v1.RepresentationsRequest) returns (semio.model.v1.Representations);
     */
    requestRepresentations(input: RepresentationsRequest, options?: RpcOptions): UnaryCall<RepresentationsRequest, Representations>;
}
/**
 * An adapter service is an adapter for elements to a specific platform where your elements are (parameterically) defined in.
 *
 * @generated from protobuf service semio.extension.adapter.v1.AdapterService
 */
export class AdapterServiceClient implements IAdapterServiceClient, ServiceInfo {
    typeName = AdapterService.typeName;
    methods = AdapterService.methods;
    options = AdapterService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Request an attraction point for the attracted.
     *
     * @generated from protobuf rpc: RequestAttractionPoint(semio.extension.adapter.v1.AttractionPointRequest) returns (semio.model.v1.Point);
     */
    requestAttractionPoint(input: AttractionPointRequest, options?: RpcOptions): UnaryCall<AttractionPointRequest, Point> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttractionPointRequest, Point>("unary", this._transport, method, opt, input);
    }
    /**
     * Request a specific representation
     *
     * @generated from protobuf rpc: RequestRepresentation(semio.extension.adapter.v1.RepresentationRequest) returns (semio.model.v1.Representation);
     */
    requestRepresentation(input: RepresentationRequest, options?: RpcOptions): UnaryCall<RepresentationRequest, Representation> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RepresentationRequest, Representation>("unary", this._transport, method, opt, input);
    }
    /**
     * Request potentially all representations
     *
     * @generated from protobuf rpc: RequestRepresentations(semio.extension.adapter.v1.RepresentationsRequest) returns (semio.model.v1.Representations);
     */
    requestRepresentations(input: RepresentationsRequest, options?: RpcOptions): UnaryCall<RepresentationsRequest, Representations> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RepresentationsRequest, Representations>("unary", this._transport, method, opt, input);
    }
}
