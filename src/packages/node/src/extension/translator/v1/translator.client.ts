// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "extension/translator/v1/translator.proto" (package "semio.server.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TranslatorService } from "./translator";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TranslateRepresentationResponse } from "./translator";
import type { TranslateRepresentationRequest } from "./translator";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A translator service translates representations between different poses (coordinate systems).
 *
 * @generated from protobuf service semio.server.v1.TranslatorService
 */
export interface ITranslatorServiceClient {
    /**
     * Lay out a design from a layout and return a design.
     *
     * @generated from protobuf rpc: TranslateRepresentation(semio.server.v1.TranslateRepresentationRequest) returns (semio.server.v1.TranslateRepresentationResponse);
     */
    translateRepresentation(input: TranslateRepresentationRequest, options?: RpcOptions): UnaryCall<TranslateRepresentationRequest, TranslateRepresentationResponse>;
}
/**
 * A translator service translates representations between different poses (coordinate systems).
 *
 * @generated from protobuf service semio.server.v1.TranslatorService
 */
export class TranslatorServiceClient implements ITranslatorServiceClient, ServiceInfo {
    typeName = TranslatorService.typeName;
    methods = TranslatorService.methods;
    options = TranslatorService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Lay out a design from a layout and return a design.
     *
     * @generated from protobuf rpc: TranslateRepresentation(semio.server.v1.TranslateRepresentationRequest) returns (semio.server.v1.TranslateRepresentationResponse);
     */
    translateRepresentation(input: TranslateRepresentationRequest, options?: RpcOptions): UnaryCall<TranslateRepresentationRequest, TranslateRepresentationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TranslateRepresentationRequest, TranslateRepresentationResponse>("unary", this._transport, method, opt, input);
    }
}
