// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "extension/converter/v1/converter.proto" (package "semio.extension.converter.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ConverterService } from "./converter";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Representation } from "../../../model/v1/model";
import type { RepresentationConversionRequest } from "./converter";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A converter service can convert an element from one representation into another representation.
 *
 * @generated from protobuf service semio.extension.converter.v1.ConverterService
 */
export interface IConverterServiceClient {
    /**
     * @generated from protobuf rpc: ConvertRepresentation(semio.extension.converter.v1.RepresentationConversionRequest) returns (semio.model.v1.Representation);
     */
    convertRepresentation(input: RepresentationConversionRequest, options?: RpcOptions): UnaryCall<RepresentationConversionRequest, Representation>;
}
/**
 * A converter service can convert an element from one representation into another representation.
 *
 * @generated from protobuf service semio.extension.converter.v1.ConverterService
 */
export class ConverterServiceClient implements IConverterServiceClient, ServiceInfo {
    typeName = ConverterService.typeName;
    methods = ConverterService.methods;
    options = ConverterService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ConvertRepresentation(semio.extension.converter.v1.RepresentationConversionRequest) returns (semio.model.v1.Representation);
     */
    convertRepresentation(input: RepresentationConversionRequest, options?: RpcOptions): UnaryCall<RepresentationConversionRequest, Representation> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RepresentationConversionRequest, Representation>("unary", this._transport, method, opt, input);
    }
}
