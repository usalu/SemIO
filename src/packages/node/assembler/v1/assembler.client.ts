// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "assembler/v1/assembler.proto" (package "semio.assembler.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AssemblerService } from "./assembler";
import type { AssemblyToElementsResponse } from "./assembler";
import type { AssemblyToElementsRequest } from "./assembler";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LayoutToAssembliesResponse } from "./assembler";
import type { Layout } from "../../model/v1/model";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The assembler service is responsible for assembling layouts into designs.
 *
 * @generated from protobuf service semio.assembler.v1.AssemblerService
 */
export interface IAssemblerServiceClient {
    /**
     * Turn a layout into assemblies.
     *
     * @generated from protobuf rpc: LayoutToAssemblies(semio.model.v1.Layout) returns (semio.assembler.v1.LayoutToAssembliesResponse);
     */
    layoutToAssemblies(input: Layout, options?: RpcOptions): UnaryCall<Layout, LayoutToAssembliesResponse>;
    /**
     * Assemble elements from an assembly.
     *
     * @generated from protobuf rpc: AssemblyToElements(semio.assembler.v1.AssemblyToElementsRequest) returns (semio.assembler.v1.AssemblyToElementsResponse);
     */
    assemblyToElements(input: AssemblyToElementsRequest, options?: RpcOptions): UnaryCall<AssemblyToElementsRequest, AssemblyToElementsResponse>;
}
/**
 * The assembler service is responsible for assembling layouts into designs.
 *
 * @generated from protobuf service semio.assembler.v1.AssemblerService
 */
export class AssemblerServiceClient implements IAssemblerServiceClient, ServiceInfo {
    typeName = AssemblerService.typeName;
    methods = AssemblerService.methods;
    options = AssemblerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Turn a layout into assemblies.
     *
     * @generated from protobuf rpc: LayoutToAssemblies(semio.model.v1.Layout) returns (semio.assembler.v1.LayoutToAssembliesResponse);
     */
    layoutToAssemblies(input: Layout, options?: RpcOptions): UnaryCall<Layout, LayoutToAssembliesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Layout, LayoutToAssembliesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Assemble elements from an assembly.
     *
     * @generated from protobuf rpc: AssemblyToElements(semio.assembler.v1.AssemblyToElementsRequest) returns (semio.assembler.v1.AssemblyToElementsResponse);
     */
    assemblyToElements(input: AssemblyToElementsRequest, options?: RpcOptions): UnaryCall<AssemblyToElementsRequest, AssemblyToElementsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AssemblyToElementsRequest, AssemblyToElementsResponse>("unary", this._transport, method, opt, input);
    }
}
