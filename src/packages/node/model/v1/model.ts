// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "model/v1/model.proto" (package "semio.model.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../google/protobuf/any";
/**
 * @generated from protobuf message semio.model.v1.Point
 */
export interface Point {
    /**
     * @generated from protobuf field: double x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: double y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: double z = 3;
     */
    z: number;
}
/**
 * Could reference the google.type.Quaternion with the difference that w is not at the beginning but end.
 *
 * @generated from protobuf message semio.model.v1.Quaternion
 */
export interface Quaternion {
    /**
     * @generated from protobuf field: double w = 1;
     */
    w: number;
    /**
     * @generated from protobuf field: double x = 2;
     */
    x: number;
    /**
     * @generated from protobuf field: double y = 3;
     */
    y: number;
    /**
     * @generated from protobuf field: double z = 4;
     */
    z: number;
}
/**
 * A pose is a reference frame with an point of view (origin) and orientation (view).
 *
 * @generated from protobuf message semio.model.v1.Pose
 */
export interface Pose {
    /**
     * @generated from protobuf field: semio.model.v1.Point point_of_view = 1;
     */
    pointOfView?: Point;
    /**
     * @generated from protobuf field: semio.model.v1.Quaternion view = 2;
     */
    view?: Quaternion;
}
/**
 * A representation for an element.
 *
 * @generated from protobuf message semio.model.v1.Representation
 */
export interface Representation {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 lod = 2;
     */
    lod: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Any body = 3;
     */
    body?: Any;
}
/**
 * Instance information of an element.
 *
 * @generated from protobuf message semio.model.v1.Sobject
 */
export interface Sobject {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: semio.model.v1.Pose pose = 3;
     */
    pose?: Pose;
    /**
     * @generated from protobuf field: map<string, string> parameters = 4;
     */
    parameters: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message semio.model.v1.AttractionParameters
 */
export interface AttractionParameters {
    /**
     * An optional representation of the participant.
     *
     * @generated from protobuf field: google.protobuf.Any representation = 1;
     */
    representation?: Any;
    /**
     * An optional port name to connect to.
     *
     * @generated from protobuf field: string port = 2;
     */
    port: string;
    /**
     * Optional parameters to bias the attraction.
     *
     * @generated from protobuf field: map<string, string> bias = 3;
     */
    bias: {
        [key: string]: string;
    };
}
/**
 * An attraction participant participates in an attraction process.
 *
 * @generated from protobuf message semio.model.v1.AttractionParticipant
 */
export interface AttractionParticipant {
    /**
     * Id of participating sobject.
     *
     * @generated from protobuf field: string patricipant_id = 1;
     */
    patricipantId: string;
    /**
     * @generated from protobuf field: semio.model.v1.AttractionParameters parameters = 2;
     */
    parameters?: AttractionParameters;
}
/**
 * An attraction can be used to attract an attracted attraction participant to an attractor attraction participant.
 *
 * @generated from protobuf message semio.model.v1.Attraction
 */
export interface Attraction {
    /**
     * Id of attraction.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: semio.model.v1.AttractionParticipant attractor = 2;
     */
    attractor?: AttractionParticipant;
    /**
     * @generated from protobuf field: semio.model.v1.AttractionParticipant attracted = 3;
     */
    attracted?: AttractionParticipant;
}
/**
 * A layout (graph) is an ambiguous and redudant assembly plan for a set of sobjects and their attractions between each other.
 *
 * @generated from protobuf message semio.model.v1.Layout
 */
export interface Layout {
    /**
     * @generated from protobuf field: repeated semio.model.v1.Sobject sobjects = 1;
     */
    sobjects: Sobject[];
    /**
     * @generated from protobuf field: repeated semio.model.v1.Attraction attractions = 2;
     */
    attractions: Attraction[];
    /**
     * @generated from protobuf field: string root_sobject_id = 3;
     */
    rootSobjectId: string;
    /**
     * @generated from protobuf field: semio.model.v1.LayoutStragey stragegy = 4;
     */
    stragegy: LayoutStragey;
    /**
     * Optional attraction trees with root sobject id as key and attraction tree as value.
     *
     * @generated from protobuf field: repeated semio.model.v1.AttractionTree attractionTrees = 5;
     */
    attractionTrees: AttractionTree[];
}
/**
 * @generated from protobuf message semio.model.v1.AttractionTree
 */
export interface AttractionTree {
    /**
     * @generated from protobuf field: string attraction_id = 1;
     */
    attractionId: string;
    /**
     * @generated from protobuf field: repeated semio.model.v1.AttractionTree childrean = 2;
     */
    childrean: AttractionTree[];
}
/**
 * An element is the atom of a design. It has several representations and a pose.
 *
 * @generated from protobuf message semio.model.v1.Element
 */
export interface Element {
    /**
     * @generated from protobuf field: semio.model.v1.Pose pose = 1;
     */
    pose?: Pose;
    /**
     * @generated from protobuf field: repeated semio.model.v1.Representation representations = 2;
     */
    representations: Representation[];
}
/**
 * A design is an aggregation of elements.
 *
 * @generated from protobuf message semio.model.v1.Design
 */
export interface Design {
    /**
     * @generated from protobuf field: repeated semio.model.v1.Element elements = 1;
     */
    elements: Element[];
}
/**
 * A layout modification describes declaratively a layout and the layout after its modification. The rules on how to imperatively change such a layout need to found by the transformation system.
 *
 * @generated from protobuf message semio.model.v1.LayoutModification
 */
export interface LayoutModification {
    /**
     * @generated from protobuf field: semio.model.v1.Layout context = 1;
     */
    context?: Layout;
    /**
     * @generated from protobuf field: semio.model.v1.Layout modified_context = 2;
     */
    modifiedContext?: Layout;
}
/**
 * A decision strategy holds information on how modifications are applied.
 *
 * @generated from protobuf message semio.model.v1.LayoutModificationStrategy
 */
export interface LayoutModificationStrategy {
    /**
     * The match count describes how often a layout modification should be applied. It beeing finite will make sure that the system always terminates. Make sure to set the threshold high enough.
     *
     * @generated from protobuf field: int64 match_count = 1;
     */
    matchCount: bigint;
}
/**
 * A decision is a layout modification with a strategy on how to apply it to a new layout.
 *
 * @generated from protobuf message semio.model.v1.Decision
 */
export interface Decision {
    /**
     * @generated from protobuf field: semio.model.v1.LayoutModification modification = 1;
     */
    modification?: LayoutModification;
    /**
     * @generated from protobuf field: semio.model.v1.LayoutModificationStrategy strategy = 2;
     */
    strategy?: LayoutModificationStrategy;
}
/**
 * A layout strategy affects in which orders attractions are triggered.
 *
 * @generated from protobuf enum semio.model.v1.LayoutStragey
 */
export enum LayoutStragey {
    /**
     * @generated from protobuf enum value: LAYOUTSTRATEGY_BREADTHFIRST = 0;
     */
    LAYOUTSTRATEGY_BREADTHFIRST = 0,
    /**
     * @generated from protobuf enum value: LAYOUTSTRATEGY_DEPTHFIRST = 1;
     */
    LAYOUTSTRATEGY_DEPTHFIRST = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Point$Type extends MessageType<Point> {
    constructor() {
        super("semio.model.v1.Point", [
            { no: 1, name: "x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "z", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Point>): Point {
        const message = { x: 0, y: 0, z: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Point>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Point): Point {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double x */ 1:
                    message.x = reader.double();
                    break;
                case /* double y */ 2:
                    message.y = reader.double();
                    break;
                case /* double z */ 3:
                    message.z = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Point, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit64).double(message.x);
        /* double y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit64).double(message.y);
        /* double z = 3; */
        if (message.z !== 0)
            writer.tag(3, WireType.Bit64).double(message.z);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Point
 */
export const Point = new Point$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Quaternion$Type extends MessageType<Quaternion> {
    constructor() {
        super("semio.model.v1.Quaternion", [
            { no: 1, name: "w", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "z", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Quaternion>): Quaternion {
        const message = { w: 0, x: 0, y: 0, z: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Quaternion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Quaternion): Quaternion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double w */ 1:
                    message.w = reader.double();
                    break;
                case /* double x */ 2:
                    message.x = reader.double();
                    break;
                case /* double y */ 3:
                    message.y = reader.double();
                    break;
                case /* double z */ 4:
                    message.z = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Quaternion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double w = 1; */
        if (message.w !== 0)
            writer.tag(1, WireType.Bit64).double(message.w);
        /* double x = 2; */
        if (message.x !== 0)
            writer.tag(2, WireType.Bit64).double(message.x);
        /* double y = 3; */
        if (message.y !== 0)
            writer.tag(3, WireType.Bit64).double(message.y);
        /* double z = 4; */
        if (message.z !== 0)
            writer.tag(4, WireType.Bit64).double(message.z);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Quaternion
 */
export const Quaternion = new Quaternion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pose$Type extends MessageType<Pose> {
    constructor() {
        super("semio.model.v1.Pose", [
            { no: 1, name: "point_of_view", kind: "message", T: () => Point },
            { no: 2, name: "view", kind: "message", T: () => Quaternion }
        ]);
    }
    create(value?: PartialMessage<Pose>): Pose {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Pose>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pose): Pose {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Point point_of_view */ 1:
                    message.pointOfView = Point.internalBinaryRead(reader, reader.uint32(), options, message.pointOfView);
                    break;
                case /* semio.model.v1.Quaternion view */ 2:
                    message.view = Quaternion.internalBinaryRead(reader, reader.uint32(), options, message.view);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pose, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Point point_of_view = 1; */
        if (message.pointOfView)
            Point.internalBinaryWrite(message.pointOfView, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Quaternion view = 2; */
        if (message.view)
            Quaternion.internalBinaryWrite(message.view, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Pose
 */
export const Pose = new Pose$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Representation$Type extends MessageType<Representation> {
    constructor() {
        super("semio.model.v1.Representation", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lod", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "body", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<Representation>): Representation {
        const message = { name: "", lod: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Representation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Representation): Representation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 lod */ 2:
                    message.lod = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Any body */ 3:
                    message.body = Any.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Representation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 lod = 2; */
        if (message.lod !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lod);
        /* google.protobuf.Any body = 3; */
        if (message.body)
            Any.internalBinaryWrite(message.body, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Representation
 */
export const Representation = new Representation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sobject$Type extends MessageType<Sobject> {
    constructor() {
        super("semio.model.v1.Sobject", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pose", kind: "message", T: () => Pose },
            { no: 4, name: "parameters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<Sobject>): Sobject {
        const message = { id: "", url: "", parameters: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Sobject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Sobject): Sobject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* semio.model.v1.Pose pose */ 3:
                    message.pose = Pose.internalBinaryRead(reader, reader.uint32(), options, message.pose);
                    break;
                case /* map<string, string> parameters */ 4:
                    this.binaryReadMap4(message.parameters, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: Sobject["parameters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Sobject["parameters"] | undefined, val: Sobject["parameters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field semio.model.v1.Sobject.parameters");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Sobject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* semio.model.v1.Pose pose = 3; */
        if (message.pose)
            Pose.internalBinaryWrite(message.pose, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> parameters = 4; */
        for (let k of Object.keys(message.parameters))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.parameters[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Sobject
 */
export const Sobject = new Sobject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttractionParameters$Type extends MessageType<AttractionParameters> {
    constructor() {
        super("semio.model.v1.AttractionParameters", [
            { no: 1, name: "representation", kind: "message", T: () => Any },
            { no: 2, name: "port", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bias", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<AttractionParameters>): AttractionParameters {
        const message = { port: "", bias: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AttractionParameters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttractionParameters): AttractionParameters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any representation */ 1:
                    message.representation = Any.internalBinaryRead(reader, reader.uint32(), options, message.representation);
                    break;
                case /* string port */ 2:
                    message.port = reader.string();
                    break;
                case /* map<string, string> bias */ 3:
                    this.binaryReadMap3(message.bias, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: AttractionParameters["bias"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AttractionParameters["bias"] | undefined, val: AttractionParameters["bias"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field semio.model.v1.AttractionParameters.bias");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: AttractionParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any representation = 1; */
        if (message.representation)
            Any.internalBinaryWrite(message.representation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string port = 2; */
        if (message.port !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.port);
        /* map<string, string> bias = 3; */
        for (let k of Object.keys(message.bias))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.bias[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.AttractionParameters
 */
export const AttractionParameters = new AttractionParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttractionParticipant$Type extends MessageType<AttractionParticipant> {
    constructor() {
        super("semio.model.v1.AttractionParticipant", [
            { no: 1, name: "patricipant_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parameters", kind: "message", T: () => AttractionParameters }
        ]);
    }
    create(value?: PartialMessage<AttractionParticipant>): AttractionParticipant {
        const message = { patricipantId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AttractionParticipant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttractionParticipant): AttractionParticipant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string patricipant_id */ 1:
                    message.patricipantId = reader.string();
                    break;
                case /* semio.model.v1.AttractionParameters parameters */ 2:
                    message.parameters = AttractionParameters.internalBinaryRead(reader, reader.uint32(), options, message.parameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttractionParticipant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string patricipant_id = 1; */
        if (message.patricipantId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.patricipantId);
        /* semio.model.v1.AttractionParameters parameters = 2; */
        if (message.parameters)
            AttractionParameters.internalBinaryWrite(message.parameters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.AttractionParticipant
 */
export const AttractionParticipant = new AttractionParticipant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Attraction$Type extends MessageType<Attraction> {
    constructor() {
        super("semio.model.v1.Attraction", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "attractor", kind: "message", T: () => AttractionParticipant },
            { no: 3, name: "attracted", kind: "message", T: () => AttractionParticipant }
        ]);
    }
    create(value?: PartialMessage<Attraction>): Attraction {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Attraction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Attraction): Attraction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* semio.model.v1.AttractionParticipant attractor */ 2:
                    message.attractor = AttractionParticipant.internalBinaryRead(reader, reader.uint32(), options, message.attractor);
                    break;
                case /* semio.model.v1.AttractionParticipant attracted */ 3:
                    message.attracted = AttractionParticipant.internalBinaryRead(reader, reader.uint32(), options, message.attracted);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Attraction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* semio.model.v1.AttractionParticipant attractor = 2; */
        if (message.attractor)
            AttractionParticipant.internalBinaryWrite(message.attractor, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.AttractionParticipant attracted = 3; */
        if (message.attracted)
            AttractionParticipant.internalBinaryWrite(message.attracted, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Attraction
 */
export const Attraction = new Attraction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Layout$Type extends MessageType<Layout> {
    constructor() {
        super("semio.model.v1.Layout", [
            { no: 1, name: "sobjects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Sobject },
            { no: 2, name: "attractions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Attraction },
            { no: 3, name: "root_sobject_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "stragegy", kind: "enum", T: () => ["semio.model.v1.LayoutStragey", LayoutStragey] },
            { no: 5, name: "attractionTrees", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AttractionTree }
        ]);
    }
    create(value?: PartialMessage<Layout>): Layout {
        const message = { sobjects: [], attractions: [], rootSobjectId: "", stragegy: 0, attractionTrees: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Layout>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Layout): Layout {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated semio.model.v1.Sobject sobjects */ 1:
                    message.sobjects.push(Sobject.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated semio.model.v1.Attraction attractions */ 2:
                    message.attractions.push(Attraction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string root_sobject_id */ 3:
                    message.rootSobjectId = reader.string();
                    break;
                case /* semio.model.v1.LayoutStragey stragegy */ 4:
                    message.stragegy = reader.int32();
                    break;
                case /* repeated semio.model.v1.AttractionTree attractionTrees */ 5:
                    message.attractionTrees.push(AttractionTree.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Layout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated semio.model.v1.Sobject sobjects = 1; */
        for (let i = 0; i < message.sobjects.length; i++)
            Sobject.internalBinaryWrite(message.sobjects[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated semio.model.v1.Attraction attractions = 2; */
        for (let i = 0; i < message.attractions.length; i++)
            Attraction.internalBinaryWrite(message.attractions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string root_sobject_id = 3; */
        if (message.rootSobjectId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.rootSobjectId);
        /* semio.model.v1.LayoutStragey stragegy = 4; */
        if (message.stragegy !== 0)
            writer.tag(4, WireType.Varint).int32(message.stragegy);
        /* repeated semio.model.v1.AttractionTree attractionTrees = 5; */
        for (let i = 0; i < message.attractionTrees.length; i++)
            AttractionTree.internalBinaryWrite(message.attractionTrees[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Layout
 */
export const Layout = new Layout$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttractionTree$Type extends MessageType<AttractionTree> {
    constructor() {
        super("semio.model.v1.AttractionTree", [
            { no: 1, name: "attraction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "childrean", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AttractionTree }
        ]);
    }
    create(value?: PartialMessage<AttractionTree>): AttractionTree {
        const message = { attractionId: "", childrean: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AttractionTree>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttractionTree): AttractionTree {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string attraction_id */ 1:
                    message.attractionId = reader.string();
                    break;
                case /* repeated semio.model.v1.AttractionTree childrean */ 2:
                    message.childrean.push(AttractionTree.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttractionTree, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string attraction_id = 1; */
        if (message.attractionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.attractionId);
        /* repeated semio.model.v1.AttractionTree childrean = 2; */
        for (let i = 0; i < message.childrean.length; i++)
            AttractionTree.internalBinaryWrite(message.childrean[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.AttractionTree
 */
export const AttractionTree = new AttractionTree$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Element$Type extends MessageType<Element> {
    constructor() {
        super("semio.model.v1.Element", [
            { no: 1, name: "pose", kind: "message", T: () => Pose },
            { no: 2, name: "representations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Representation }
        ]);
    }
    create(value?: PartialMessage<Element>): Element {
        const message = { representations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Element>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Element): Element {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Pose pose */ 1:
                    message.pose = Pose.internalBinaryRead(reader, reader.uint32(), options, message.pose);
                    break;
                case /* repeated semio.model.v1.Representation representations */ 2:
                    message.representations.push(Representation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Element, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Pose pose = 1; */
        if (message.pose)
            Pose.internalBinaryWrite(message.pose, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated semio.model.v1.Representation representations = 2; */
        for (let i = 0; i < message.representations.length; i++)
            Representation.internalBinaryWrite(message.representations[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Element
 */
export const Element = new Element$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Design$Type extends MessageType<Design> {
    constructor() {
        super("semio.model.v1.Design", [
            { no: 1, name: "elements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Element }
        ]);
    }
    create(value?: PartialMessage<Design>): Design {
        const message = { elements: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Design>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Design): Design {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated semio.model.v1.Element elements */ 1:
                    message.elements.push(Element.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Design, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated semio.model.v1.Element elements = 1; */
        for (let i = 0; i < message.elements.length; i++)
            Element.internalBinaryWrite(message.elements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Design
 */
export const Design = new Design$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LayoutModification$Type extends MessageType<LayoutModification> {
    constructor() {
        super("semio.model.v1.LayoutModification", [
            { no: 1, name: "context", kind: "message", T: () => Layout },
            { no: 2, name: "modified_context", kind: "message", T: () => Layout }
        ]);
    }
    create(value?: PartialMessage<LayoutModification>): LayoutModification {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LayoutModification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LayoutModification): LayoutModification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.Layout context */ 1:
                    message.context = Layout.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* semio.model.v1.Layout modified_context */ 2:
                    message.modifiedContext = Layout.internalBinaryRead(reader, reader.uint32(), options, message.modifiedContext);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LayoutModification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.Layout context = 1; */
        if (message.context)
            Layout.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.Layout modified_context = 2; */
        if (message.modifiedContext)
            Layout.internalBinaryWrite(message.modifiedContext, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.LayoutModification
 */
export const LayoutModification = new LayoutModification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LayoutModificationStrategy$Type extends MessageType<LayoutModificationStrategy> {
    constructor() {
        super("semio.model.v1.LayoutModificationStrategy", [
            { no: 1, name: "match_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LayoutModificationStrategy>): LayoutModificationStrategy {
        const message = { matchCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LayoutModificationStrategy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LayoutModificationStrategy): LayoutModificationStrategy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 match_count */ 1:
                    message.matchCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LayoutModificationStrategy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 match_count = 1; */
        if (message.matchCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.matchCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.LayoutModificationStrategy
 */
export const LayoutModificationStrategy = new LayoutModificationStrategy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Decision$Type extends MessageType<Decision> {
    constructor() {
        super("semio.model.v1.Decision", [
            { no: 1, name: "modification", kind: "message", T: () => LayoutModification },
            { no: 2, name: "strategy", kind: "message", T: () => LayoutModificationStrategy }
        ]);
    }
    create(value?: PartialMessage<Decision>): Decision {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Decision>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Decision): Decision {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* semio.model.v1.LayoutModification modification */ 1:
                    message.modification = LayoutModification.internalBinaryRead(reader, reader.uint32(), options, message.modification);
                    break;
                case /* semio.model.v1.LayoutModificationStrategy strategy */ 2:
                    message.strategy = LayoutModificationStrategy.internalBinaryRead(reader, reader.uint32(), options, message.strategy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Decision, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* semio.model.v1.LayoutModification modification = 1; */
        if (message.modification)
            LayoutModification.internalBinaryWrite(message.modification, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* semio.model.v1.LayoutModificationStrategy strategy = 2; */
        if (message.strategy)
            LayoutModificationStrategy.internalBinaryWrite(message.strategy, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message semio.model.v1.Decision
 */
export const Decision = new Decision$Type();
