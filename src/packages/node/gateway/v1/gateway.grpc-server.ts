// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "gateway/v1/gateway.proto" (package "semio.gateway.v1", syntax proto3)
// tslint:disable
import { Design } from "../../model/v1/model";
import { LayoutDesignRequest } from "../../assembler/v1/assembler";
import type * as grpc from "@grpc/grpc-js";
/**
 * The gateway service is the gateway for all other apis of semio.
 *
 *   option (google.api.default_host) = "localhost:50000";
 *
 * @generated from protobuf service semio.gateway.v1.GatewayService
 */
export interface IGatewayService extends grpc.UntypedServiceImplementation {
    /**
     * Lay out a design from a layout and return a design.
     *
     * @generated from protobuf rpc: LayoutDesign(semio.assembler.v1.LayoutDesignRequest) returns (semio.model.v1.Design);
     */
    layoutDesign: grpc.handleUnaryCall<LayoutDesignRequest, Design>;
}
/**
 * @grpc/grpc-js definition for the protobuf service semio.gateway.v1.GatewayService.
 *
 * Usage: Implement the interface IGatewayService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IGatewayService = ...
 * server.addService(gatewayServiceDefinition, service);
 * ```
 */
export const gatewayServiceDefinition: grpc.ServiceDefinition<IGatewayService> = {
    layoutDesign: {
        path: "/semio.gateway.v1.GatewayService/LayoutDesign",
        originalName: "LayoutDesign",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Design.fromBinary(bytes),
        requestDeserialize: bytes => LayoutDesignRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Design.toBinary(value)),
        requestSerialize: value => Buffer.from(LayoutDesignRequest.toBinary(value))
    }
};
