// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,generate_dependencies
// @generated from protobuf file "gateway/v1/gateway.proto" (package "semio.gateway.v1", syntax proto3)
// tslint:disable
import { GatewayServices } from "./gateway";
import { GetRegisteredServicesRequest } from "./gateway";
import { ServiceRegistrationResponse } from "./gateway";
import { ServiceRegistrationRequest } from "./gateway";
import { Design } from "../../model/v1/model";
import { Layout } from "../../model/v1/model";
import type * as grpc from "@grpc/grpc-js";
/**
 * The gateway service is the gateway for all other apis of semio.
 *
 *   option (google.api.default_host) = "localhost:50000";
 *
 * @generated from protobuf service semio.gateway.v1.GatewayService
 */
export interface IGatewayService extends grpc.UntypedServiceImplementation {
    /**
     * Lay out a design from a layout and return a design.
     *
     * option (google.api.http) = {
     *   post: "v1/layout-design"
     *   body: "*"
     * };
     *
     * @generated from protobuf rpc: LayoutDesign(semio.model.v1.Layout) returns (semio.model.v1.Design);
     */
    layoutDesign: grpc.handleUnaryCall<Layout, Design>;
    /**
     * Register a service to the server.
     *
     * @generated from protobuf rpc: RegisterService(semio.gateway.v1.ServiceRegistrationRequest) returns (semio.gateway.v1.ServiceRegistrationResponse);
     */
    registerService: grpc.handleUnaryCall<ServiceRegistrationRequest, ServiceRegistrationResponse>;
    /**
     * Get all registered services.
     *
     * @generated from protobuf rpc: GetRegisteredServices(semio.gateway.v1.GetRegisteredServicesRequest) returns (semio.gateway.v1.GatewayServices);
     */
    getRegisteredServices: grpc.handleUnaryCall<GetRegisteredServicesRequest, GatewayServices>;
}
/**
 * @grpc/grpc-js definition for the protobuf service semio.gateway.v1.GatewayService.
 *
 * Usage: Implement the interface IGatewayService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IGatewayService = ...
 * server.addService(gatewayServiceDefinition, service);
 * ```
 */
export const gatewayServiceDefinition: grpc.ServiceDefinition<IGatewayService> = {
    layoutDesign: {
        path: "/semio.gateway.v1.GatewayService/LayoutDesign",
        originalName: "LayoutDesign",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Design.fromBinary(bytes),
        requestDeserialize: bytes => Layout.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Design.toBinary(value)),
        requestSerialize: value => Buffer.from(Layout.toBinary(value))
    },
    registerService: {
        path: "/semio.gateway.v1.GatewayService/RegisterService",
        originalName: "RegisterService",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ServiceRegistrationResponse.fromBinary(bytes),
        requestDeserialize: bytes => ServiceRegistrationRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ServiceRegistrationResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ServiceRegistrationRequest.toBinary(value))
    },
    getRegisteredServices: {
        path: "/semio.gateway.v1.GatewayService/GetRegisteredServices",
        originalName: "GetRegisteredServices",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GatewayServices.fromBinary(bytes),
        requestDeserialize: bytes => GetRegisteredServicesRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GatewayServices.toBinary(value)),
        requestSerialize: value => Buffer.from(GetRegisteredServicesRequest.toBinary(value))
    }
};
