// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/usalu/semio/src/packages/go/model/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerServiceClient interface {
	// Request an element from instance information and an optional traget representation parameters.
	RequestPrototype(ctx context.Context, in *PrototypeRequest, opts ...grpc.CallOption) (*v1.Prototype, error)
	// Get the connected pose and the connection point for a connection.
	ConnectElement(ctx context.Context, in *ConnectElementRequest, opts ...grpc.CallOption) (*ConnectElementResponse, error)
	// Register a service to the server.
	RegisterExtension(ctx context.Context, in *RegisterExtensionRequest, opts ...grpc.CallOption) (*RegisterExtensionResponse, error)
	// Get all registered extensions.
	GetRegisteredExtensions(ctx context.Context, in *GetRegisteredExtensionsRequest, opts ...grpc.CallOption) (*RegisteredExtensionsResponse, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) RequestPrototype(ctx context.Context, in *PrototypeRequest, opts ...grpc.CallOption) (*v1.Prototype, error) {
	out := new(v1.Prototype)
	err := c.cc.Invoke(ctx, "/semio.manager.v1.ManagerService/RequestPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ConnectElement(ctx context.Context, in *ConnectElementRequest, opts ...grpc.CallOption) (*ConnectElementResponse, error) {
	out := new(ConnectElementResponse)
	err := c.cc.Invoke(ctx, "/semio.manager.v1.ManagerService/ConnectElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) RegisterExtension(ctx context.Context, in *RegisterExtensionRequest, opts ...grpc.CallOption) (*RegisterExtensionResponse, error) {
	out := new(RegisterExtensionResponse)
	err := c.cc.Invoke(ctx, "/semio.manager.v1.ManagerService/RegisterExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetRegisteredExtensions(ctx context.Context, in *GetRegisteredExtensionsRequest, opts ...grpc.CallOption) (*RegisteredExtensionsResponse, error) {
	out := new(RegisteredExtensionsResponse)
	err := c.cc.Invoke(ctx, "/semio.manager.v1.ManagerService/GetRegisteredExtensions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
// All implementations must embed UnimplementedManagerServiceServer
// for forward compatibility
type ManagerServiceServer interface {
	// Request an element from instance information and an optional traget representation parameters.
	RequestPrototype(context.Context, *PrototypeRequest) (*v1.Prototype, error)
	// Get the connected pose and the connection point for a connection.
	ConnectElement(context.Context, *ConnectElementRequest) (*ConnectElementResponse, error)
	// Register a service to the server.
	RegisterExtension(context.Context, *RegisterExtensionRequest) (*RegisterExtensionResponse, error)
	// Get all registered extensions.
	GetRegisteredExtensions(context.Context, *GetRegisteredExtensionsRequest) (*RegisteredExtensionsResponse, error)
	mustEmbedUnimplementedManagerServiceServer()
}

// UnimplementedManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (UnimplementedManagerServiceServer) RequestPrototype(context.Context, *PrototypeRequest) (*v1.Prototype, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPrototype not implemented")
}
func (UnimplementedManagerServiceServer) ConnectElement(context.Context, *ConnectElementRequest) (*ConnectElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectElement not implemented")
}
func (UnimplementedManagerServiceServer) RegisterExtension(context.Context, *RegisterExtensionRequest) (*RegisterExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExtension not implemented")
}
func (UnimplementedManagerServiceServer) GetRegisteredExtensions(context.Context, *GetRegisteredExtensionsRequest) (*RegisteredExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredExtensions not implemented")
}
func (UnimplementedManagerServiceServer) mustEmbedUnimplementedManagerServiceServer() {}

// UnsafeManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServiceServer will
// result in compilation errors.
type UnsafeManagerServiceServer interface {
	mustEmbedUnimplementedManagerServiceServer()
}

func RegisterManagerServiceServer(s grpc.ServiceRegistrar, srv ManagerServiceServer) {
	s.RegisterService(&ManagerService_ServiceDesc, srv)
}

func _ManagerService_RequestPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).RequestPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semio.manager.v1.ManagerService/RequestPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).RequestPrototype(ctx, req.(*PrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ConnectElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ConnectElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semio.manager.v1.ManagerService/ConnectElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ConnectElement(ctx, req.(*ConnectElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_RegisterExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).RegisterExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semio.manager.v1.ManagerService/RegisterExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).RegisterExtension(ctx, req.(*RegisterExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetRegisteredExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetRegisteredExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semio.manager.v1.ManagerService/GetRegisteredExtensions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetRegisteredExtensions(ctx, req.(*GetRegisteredExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerService_ServiceDesc is the grpc.ServiceDesc for ManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "semio.manager.v1.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPrototype",
			Handler:    _ManagerService_RequestPrototype_Handler,
		},
		{
			MethodName: "ConnectElement",
			Handler:    _ManagerService_ConnectElement_Handler,
		},
		{
			MethodName: "RegisterExtension",
			Handler:    _ManagerService_RegisterExtension_Handler,
		},
		{
			MethodName: "GetRegisteredExtensions",
			Handler:    _ManagerService_GetRegisteredExtensions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager/v1/manager.proto",
}
