// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/usalu/semio/src/packages/go/model/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssemblerServiceClient is the client API for AssemblerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssemblerServiceClient interface {
	// Lay out a design from a layout and return a design.
	LayoutDesign(ctx context.Context, in *LayoutDesignRequest, opts ...grpc.CallOption) (*v1.Design, error)
}

type assemblerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssemblerServiceClient(cc grpc.ClientConnInterface) AssemblerServiceClient {
	return &assemblerServiceClient{cc}
}

func (c *assemblerServiceClient) LayoutDesign(ctx context.Context, in *LayoutDesignRequest, opts ...grpc.CallOption) (*v1.Design, error) {
	out := new(v1.Design)
	err := c.cc.Invoke(ctx, "/semio.assembler.v1.AssemblerService/LayoutDesign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssemblerServiceServer is the server API for AssemblerService service.
// All implementations must embed UnimplementedAssemblerServiceServer
// for forward compatibility
type AssemblerServiceServer interface {
	// Lay out a design from a layout and return a design.
	LayoutDesign(context.Context, *LayoutDesignRequest) (*v1.Design, error)
	mustEmbedUnimplementedAssemblerServiceServer()
}

// UnimplementedAssemblerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssemblerServiceServer struct {
}

func (UnimplementedAssemblerServiceServer) LayoutDesign(context.Context, *LayoutDesignRequest) (*v1.Design, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LayoutDesign not implemented")
}
func (UnimplementedAssemblerServiceServer) mustEmbedUnimplementedAssemblerServiceServer() {}

// UnsafeAssemblerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssemblerServiceServer will
// result in compilation errors.
type UnsafeAssemblerServiceServer interface {
	mustEmbedUnimplementedAssemblerServiceServer()
}

func RegisterAssemblerServiceServer(s grpc.ServiceRegistrar, srv AssemblerServiceServer) {
	s.RegisterService(&AssemblerService_ServiceDesc, srv)
}

func _AssemblerService_LayoutDesign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LayoutDesignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblerServiceServer).LayoutDesign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semio.assembler.v1.AssemblerService/LayoutDesign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblerServiceServer).LayoutDesign(ctx, req.(*LayoutDesignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssemblerService_ServiceDesc is the grpc.ServiceDesc for AssemblerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssemblerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "semio.assembler.v1.AssemblerService",
	HandlerType: (*AssemblerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LayoutDesign",
			Handler:    _AssemblerService_LayoutDesign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assembler/v1/assembler.proto",
}
