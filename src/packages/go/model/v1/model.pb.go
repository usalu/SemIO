// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: model/v1/model.proto

package v1

import (
	v1 "github.com/usalu/semio/src/packages/go/geometry/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Encoding of a byte array.
type Encoding int32

const (
	Encoding_ENCODING_TEXT_UFT8  Encoding = 0
	Encoding_ENCODING_TEXT_UFT16 Encoding = 1
	Encoding_ENCODING_TEXT_UFT32 Encoding = 2
	Encoding_ENCODING_TEXT_ASCII Encoding = 3
	// Also ASCII but with further base 64 encoding of the text.
	Encoding_ENCODING_TEXT_BASE64 Encoding = 4
)

// Enum value maps for Encoding.
var (
	Encoding_name = map[int32]string{
		0: "ENCODING_TEXT_UFT8",
		1: "ENCODING_TEXT_UFT16",
		2: "ENCODING_TEXT_UFT32",
		3: "ENCODING_TEXT_ASCII",
		4: "ENCODING_TEXT_BASE64",
	}
	Encoding_value = map[string]int32{
		"ENCODING_TEXT_UFT8":   0,
		"ENCODING_TEXT_UFT16":  1,
		"ENCODING_TEXT_UFT32":  2,
		"ENCODING_TEXT_ASCII":  3,
		"ENCODING_TEXT_BASE64": 4,
	}
)

func (x Encoding) Enum() *Encoding {
	p := new(Encoding)
	*p = x
	return p
}

func (x Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_model_v1_model_proto_enumTypes[0].Descriptor()
}

func (Encoding) Type() protoreflect.EnumType {
	return &file_model_v1_model_proto_enumTypes[0]
}

func (x Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Encoding.Descriptor instead.
func (Encoding) EnumDescriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{0}
}

type FileType int32

const (
	// Native serialization according platform. Use this only when it is none of the others.
	// Often files have a platform specific extension but if you open them in a text editor you can see that they are serialized in a standard format.
	FileType_FILETYPE_NATIVE FileType = 0
	FileType_FILETYPE_JSON   FileType = 1
	FileType_FILETYPE_XML    FileType = 2
	FileType_FILETYPE_YAML   FileType = 3
	FileType_FILETYPE_TOML   FileType = 4
	// https://www.iso.org/standard/63141.html
	FileType_FILETYPE_STEP FileType = 5
	// Python
	FileType_FILETYPE_PY FileType = 6
	FileType_FILETYPE_C  FileType = 7
	// C++
	FileType_FILETYPE_CPP FileType = 8
	// C#
	FileType_FILETYPE_CSHARP FileType = 9
	// Golang
	FileType_FILETYPE_GO   FileType = 10
	FileType_FILETYPE_RUST FileType = 11
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0:  "FILETYPE_NATIVE",
		1:  "FILETYPE_JSON",
		2:  "FILETYPE_XML",
		3:  "FILETYPE_YAML",
		4:  "FILETYPE_TOML",
		5:  "FILETYPE_STEP",
		6:  "FILETYPE_PY",
		7:  "FILETYPE_C",
		8:  "FILETYPE_CPP",
		9:  "FILETYPE_CSHARP",
		10: "FILETYPE_GO",
		11: "FILETYPE_RUST",
	}
	FileType_value = map[string]int32{
		"FILETYPE_NATIVE": 0,
		"FILETYPE_JSON":   1,
		"FILETYPE_XML":    2,
		"FILETYPE_YAML":   3,
		"FILETYPE_TOML":   4,
		"FILETYPE_STEP":   5,
		"FILETYPE_PY":     6,
		"FILETYPE_C":      7,
		"FILETYPE_CPP":    8,
		"FILETYPE_CSHARP": 9,
		"FILETYPE_GO":     10,
		"FILETYPE_RUST":   11,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_v1_model_proto_enumTypes[1].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_model_v1_model_proto_enumTypes[1]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{1}
}

// Platform. Constants are encoded with pattern LICENSE [3] + OWNERTYPE [2] + OWNERID [3] + PLATFORMID [2]
// LICENSE (if possible) after https://spdx.org/licenses/:
// 0:AGPL-3.0-or-later,
// 50:GPL-3.0+,51:GPL-3.0,52:GPL-2.0+,53:GPL-2.0
// 100:LGPL-3.0-or-later,101:LGPL-3.0-only
// 150:MIT,160:Apache-2.0,
// 170:0BSD
// 190:EnergyPlus
// 214:Closed
// OWNER starting with OWNERTYPE:
// 0:INDIVIDUALS: 0:usalu,1:mrdoob,2:nortikin,3:hannobraun,4:ricosjp
// 1:COLLECTIVE: 0:ifcopenshell,1:cadquery,2:freecad,3:openscad,4:jscad
// 2:NONPROFIT: 0:buildingsmart,1:nrel
// 3:COMPANY: 0:mcneel,1:autodesk,2:nemetschek,3:esri,4:microsoft, 500:speckle,501:hypar
type Platform int32

const (
	// https://github.com/usalu/semio
	Platform_PLATFORM_SEMIO Platform = 0
	// https://github.com/specklesystems
	Platform_PLATFORM_SPECKLE Platform = 1600350000
	// https://github.com/mrdoob/three.js/
	Platform_PLATFORM_THREE Platform = 1000000100
	// https://github.com/nortikin/sverchok
	Platform_PLATFORM_SVERCHOK Platform = 500000200
	// https://github.com/IfcOpenShell
	Platform_PLATFORM_IFCOPENSHELL Platform = 1010100000
	// https://github.com/CadQuery
	Platform_PLATFORM_CADQUERY Platform = 1600100100
	// https://github.com/FreeCAD
	Platform_PLATFORM_FREECAD Platform = 530100200
	// https://github.com/openscad
	Platform_PLATFORM_OPENSCAD Platform = 530100300
	// https://github.com/jscad
	Platform_PLATFORM_JSCAD Platform = 1500100400
	// https://github.com/hannobraun/Fornjot
	Platform_PLATFORM_FORNJOT Platform = 1700000300
	// https://github.com/ricosjp/truck
	Platform_PLATFORM_TRUCK Platform = 1500000400
	// https://github.com/NREL/EnergyPlus
	Platform_PLATFORM_ENERGYPLUS Platform = 1900200100
	// https://github.com/NREL/OpenStudio
	Platform_PLATFORM_OPENSTUDIO Platform = 1910200101
	// https://www.rhino3d.com/
	Platform_PLATFORM_RHINO Platform = 2140300000
	// https://www.grasshopper3d.com/
	Platform_PLATFORM_GRASSHOPPER Platform = 2140300001
	// https://www.autodesk.de/products/revit/
	Platform_PLATFORM_REVIT Platform = 2140300100
	// https://dynamobim.org/
	Platform_PLATFORM_DYNAMO Platform = 2140300101
	// https://graphisoft.com/solutions/archicad
	Platform_PLATFORM_ARCHICAD Platform = 2140300200
	// https://www.esri.com/en-us/arcgis/products/arcgis-cityengine
	Platform_PLATFORM_CITYENGINE Platform = 2140300300
	// https://www.microsoft.com/en-us/microsoft-365/excel
	Platform_PLATFORM_EXCEL Platform = 2140300400
	// https://hypar.io/
	Platform_PLATFORM_HYPAR Platform = 2140350100
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0:          "PLATFORM_SEMIO",
		1600350000: "PLATFORM_SPECKLE",
		1000000100: "PLATFORM_THREE",
		500000200:  "PLATFORM_SVERCHOK",
		1010100000: "PLATFORM_IFCOPENSHELL",
		1600100100: "PLATFORM_CADQUERY",
		530100200:  "PLATFORM_FREECAD",
		530100300:  "PLATFORM_OPENSCAD",
		1500100400: "PLATFORM_JSCAD",
		1700000300: "PLATFORM_FORNJOT",
		1500000400: "PLATFORM_TRUCK",
		1900200100: "PLATFORM_ENERGYPLUS",
		1910200101: "PLATFORM_OPENSTUDIO",
		2140300000: "PLATFORM_RHINO",
		2140300001: "PLATFORM_GRASSHOPPER",
		2140300100: "PLATFORM_REVIT",
		2140300101: "PLATFORM_DYNAMO",
		2140300200: "PLATFORM_ARCHICAD",
		2140300300: "PLATFORM_CITYENGINE",
		2140300400: "PLATFORM_EXCEL",
		2140350100: "PLATFORM_HYPAR",
	}
	Platform_value = map[string]int32{
		"PLATFORM_SEMIO":        0,
		"PLATFORM_SPECKLE":      1600350000,
		"PLATFORM_THREE":        1000000100,
		"PLATFORM_SVERCHOK":     500000200,
		"PLATFORM_IFCOPENSHELL": 1010100000,
		"PLATFORM_CADQUERY":     1600100100,
		"PLATFORM_FREECAD":      530100200,
		"PLATFORM_OPENSCAD":     530100300,
		"PLATFORM_JSCAD":        1500100400,
		"PLATFORM_FORNJOT":      1700000300,
		"PLATFORM_TRUCK":        1500000400,
		"PLATFORM_ENERGYPLUS":   1900200100,
		"PLATFORM_OPENSTUDIO":   1910200101,
		"PLATFORM_RHINO":        2140300000,
		"PLATFORM_GRASSHOPPER":  2140300001,
		"PLATFORM_REVIT":        2140300100,
		"PLATFORM_DYNAMO":       2140300101,
		"PLATFORM_ARCHICAD":     2140300200,
		"PLATFORM_CITYENGINE":   2140300300,
		"PLATFORM_EXCEL":        2140300400,
		"PLATFORM_HYPAR":        2140350100,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_model_v1_model_proto_enumTypes[2].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_model_v1_model_proto_enumTypes[2]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{2}
}

// The representation protocol determines what type of representation the connecting will see of the connected in the connection process.
type RepresentationProtocol int32

const (
	// The connecting sees no representation of the connected.
	RepresentationProtocol_REPRESENTATIONPROTOCOL_NONE RepresentationProtocol = 0
	// In the simple representation protocol everything is represented by a point.
	RepresentationProtocol_REPRESENTATIONPROTOCOL_SIMPLE RepresentationProtocol = 1
	// In the full representation protocol everything is represented by its native form where all information is available. This will most likely lead to strong coupled elements. Only use when absolutely necessary.
	RepresentationProtocol_REPRESENTATIONPROTOCOL_FULL RepresentationProtocol = 2
)

// Enum value maps for RepresentationProtocol.
var (
	RepresentationProtocol_name = map[int32]string{
		0: "REPRESENTATIONPROTOCOL_NONE",
		1: "REPRESENTATIONPROTOCOL_SIMPLE",
		2: "REPRESENTATIONPROTOCOL_FULL",
	}
	RepresentationProtocol_value = map[string]int32{
		"REPRESENTATIONPROTOCOL_NONE":   0,
		"REPRESENTATIONPROTOCOL_SIMPLE": 1,
		"REPRESENTATIONPROTOCOL_FULL":   2,
	}
)

func (x RepresentationProtocol) Enum() *RepresentationProtocol {
	p := new(RepresentationProtocol)
	*p = x
	return p
}

func (x RepresentationProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepresentationProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_model_v1_model_proto_enumTypes[3].Descriptor()
}

func (RepresentationProtocol) Type() protoreflect.EnumType {
	return &file_model_v1_model_proto_enumTypes[3]
}

func (x RepresentationProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepresentationProtocol.Descriptor instead.
func (RepresentationProtocol) EnumDescriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{3}
}

// A layout strategy affects in which orders connections are triggered.
type LayoutStrategy int32

const (
	// A breadth first layout strategy will connect all neighbours first before these start to do the same with their neighbours.
	LayoutStrategy_LAYOUTSTRATEGY_BREADTHFIRST LayoutStrategy = 0
	// A depth first layout strategy will always prioritize to choose the neighbour of the neighbour first before the other neighbours of the root.
	LayoutStrategy_LAYOUTSTRATEGY_DEPTHFIRST LayoutStrategy = 1
)

// Enum value maps for LayoutStrategy.
var (
	LayoutStrategy_name = map[int32]string{
		0: "LAYOUTSTRATEGY_BREADTHFIRST",
		1: "LAYOUTSTRATEGY_DEPTHFIRST",
	}
	LayoutStrategy_value = map[string]int32{
		"LAYOUTSTRATEGY_BREADTHFIRST": 0,
		"LAYOUTSTRATEGY_DEPTHFIRST":   1,
	}
)

func (x LayoutStrategy) Enum() *LayoutStrategy {
	p := new(LayoutStrategy)
	*p = x
	return p
}

func (x LayoutStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LayoutStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_model_v1_model_proto_enumTypes[4].Descriptor()
}

func (LayoutStrategy) Type() protoreflect.EnumType {
	return &file_model_v1_model_proto_enumTypes[4]
}

func (x LayoutStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LayoutStrategy.Descriptor instead.
func (LayoutStrategy) EnumDescriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{4}
}

// A pose is a static reference frame/coordinate system.
type Pose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Point of view (origin) from the pose (reference frame/coordinate system)
	PointOfView *v1.Point `protobuf:"bytes,1,opt,name=point_of_view,json=pointOfView,proto3" json:"point_of_view,omitempty"`
	// View (orientation) from the pose (reference frame/coordinate system)
	View *v1.Quaternion `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *Pose) Reset() {
	*x = Pose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pose) ProtoMessage() {}

func (x *Pose) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pose.ProtoReflect.Descriptor instead.
func (*Pose) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *Pose) GetPointOfView() *v1.Point {
	if x != nil {
		return x.PointOfView
	}
	return nil
}

func (x *Pose) GetView() *v1.Quaternion {
	if x != nil {
		return x.View
	}
	return nil
}

// A representation for an element. Basically a file with some semio specific metadata.
type Representation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The body depends on the serialization format of the representation.
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Encoding of the body
	Encoding Encoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=semio.model.v1.Encoding" json:"encoding,omitempty"`
	// Use the abbreviation of the platform. You can find that in the constants part of the package.
	FileType FileType `protobuf:"varint,3,opt,name=file_type,json=fileType,proto3,enum=semio.model.v1.FileType" json:"file_type,omitempty"`
	// Native platform of representation
	Platform Platform `protobuf:"varint,4,opt,name=platform,proto3,enum=semio.model.v1.Platform" json:"platform,omitempty"`
	// A description of the representation for humans to understand what the purpose of this representation is.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Add a list of concepts that help filtering representations. This can be used for functional purpose (e.g. statical, energetical, ...) or for visualization purpose (e.g. volumetric,comic, , ...).
	Concepts []string `protobuf:"bytes,6,rep,name=concepts,proto3" json:"concepts,omitempty"`
	// Level of detail allows to further define representation details. Like name this can be used either for visualization purpose (e.g. 200 (scale 1to200)) or functional purpose (e.g level of structural detail)
	// For architectural design it is recommended to choose the scale multiplier.
	// For BIM you might want to choose:
	// 100:Conceptual
	// 200:Approximate
	// 300:Precise
	// 400:Fabriaction
	// 500:Real
	Lod int32 `protobuf:"varint,7,opt,name=lod,proto3" json:"lod,omitempty"`
}

func (x *Representation) Reset() {
	*x = Representation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Representation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Representation) ProtoMessage() {}

func (x *Representation) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Representation.ProtoReflect.Descriptor instead.
func (*Representation) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{1}
}

func (x *Representation) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Representation) GetEncoding() Encoding {
	if x != nil {
		return x.Encoding
	}
	return Encoding_ENCODING_TEXT_UFT8
}

func (x *Representation) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FILETYPE_NATIVE
}

func (x *Representation) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_PLATFORM_SEMIO
}

func (x *Representation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Representation) GetConcepts() []string {
	if x != nil {
		return x.Concepts
	}
	return nil
}

func (x *Representation) GetLod() int32 {
	if x != nil {
		return x.Lod
	}
	return 0
}

// Describes the scope of a parameter.
type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Concept for the scope e.g Fassade, Floor
	Concept string `protobuf:"bytes,1,opt,name=concept,proto3" json:"concept,omitempty"`
	// Optionally define the order. Othwerwise it will be implicitly ordered by declaration order.
	Order int32 `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *Scope) GetConcept() string {
	if x != nil {
		return x.Concept
	}
	return ""
}

func (x *Scope) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Value_Text
	//	*Value_Number
	//	*Value_IntegerNumber
	//	*Value_NaturalNumber
	//	*Value_Point
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{3}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetText() string {
	if x, ok := x.GetValue().(*Value_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Value) GetNumber() float64 {
	if x, ok := x.GetValue().(*Value_Number); ok {
		return x.Number
	}
	return 0
}

func (x *Value) GetIntegerNumber() int32 {
	if x, ok := x.GetValue().(*Value_IntegerNumber); ok {
		return x.IntegerNumber
	}
	return 0
}

func (x *Value) GetNaturalNumber() uint32 {
	if x, ok := x.GetValue().(*Value_NaturalNumber); ok {
		return x.NaturalNumber
	}
	return 0
}

func (x *Value) GetPoint() *v1.Point {
	if x, ok := x.GetValue().(*Value_Point); ok {
		return x.Point
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Value_Number struct {
	Number float64 `protobuf:"fixed64,2,opt,name=number,proto3,oneof"`
}

type Value_IntegerNumber struct {
	IntegerNumber int32 `protobuf:"varint,3,opt,name=integer_number,json=integerNumber,proto3,oneof"`
}

type Value_NaturalNumber struct {
	NaturalNumber uint32 `protobuf:"varint,4,opt,name=natural_number,json=naturalNumber,proto3,oneof"`
}

type Value_Point struct {
	Point *v1.Point `protobuf:"bytes,5,opt,name=point,proto3,oneof"`
}

func (*Value_Text) isValue_Value() {}

func (*Value_Number) isValue_Value() {}

func (*Value_IntegerNumber) isValue_Value() {}

func (*Value_NaturalNumber) isValue_Value() {}

func (*Value_Point) isValue_Value() {}

// A parameter is a (common) object that can be used as a parameter in all platforms.
type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the parameter
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional context field to describe the context of the parameter.
	Context []*Scope `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	// Value of the parameter.
	Value *Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{4}
}

func (x *Parameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Parameter) GetContext() []*Scope {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Parameter) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// A plan for a prototype.
type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The uri of the prototype definition.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Optional parameters for the prototype.
	Parameters []*Parameter `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{5}
}

func (x *Plan) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Plan) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Instance information for an element.
type Sobject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id that allows to distinguish it from other sobjects.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The (rough) pose of the element. In the layout process this will most likely be adjusted if not specified otherwise in the assembly.
	Pose *Pose `protobuf:"bytes,2,opt,name=pose,proto3" json:"pose,omitempty"`
	// The plan for the prototype.
	Plan *Plan `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	// Concept that are relevent for the sobject.
	Concepts []string `protobuf:"bytes,4,rep,name=concepts,proto3" json:"concepts,omitempty"`
}

func (x *Sobject) Reset() {
	*x = Sobject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sobject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sobject) ProtoMessage() {}

func (x *Sobject) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sobject.ProtoReflect.Descriptor instead.
func (*Sobject) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{6}
}

func (x *Sobject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sobject) GetPose() *Pose {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *Sobject) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *Sobject) GetConcepts() []string {
	if x != nil {
		return x.Concepts
	}
	return nil
}

// A link defines the parameters for a connectable.
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional representation protocol for the link.
	RepresentationProtocol RepresentationProtocol `protobuf:"varint,1,opt,name=representationProtocol,proto3,enum=semio.model.v1.RepresentationProtocol" json:"representationProtocol,omitempty"`
	// Optional port names to connect to. The hierarchy should matter.
	Ports []string `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	// Optional parameters to bias the connection.
	BiasParameters []*Parameter `protobuf:"bytes,3,rep,name=bias_parameters,json=biasParameters,proto3" json:"bias_parameters,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{7}
}

func (x *Link) GetRepresentationProtocol() RepresentationProtocol {
	if x != nil {
		return x.RepresentationProtocol
	}
	return RepresentationProtocol_REPRESENTATIONPROTOCOL_NONE
}

func (x *Link) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Link) GetBiasParameters() []*Parameter {
	if x != nil {
		return x.BiasParameters
	}
	return nil
}

// A connectable (sobject) connects in an connection process.
type Connectable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of connectable (sobject).
	SobjectId string `protobuf:"bytes,1,opt,name=sobject_id,json=sobjectId,proto3" json:"sobject_id,omitempty"`
	// A link for the connectable (sobject).
	Link *Link `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *Connectable) Reset() {
	*x = Connectable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connectable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connectable) ProtoMessage() {}

func (x *Connectable) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connectable.ProtoReflect.Descriptor instead.
func (*Connectable) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{8}
}

func (x *Connectable) GetSobjectId() string {
	if x != nil {
		return x.SobjectId
	}
	return ""
}

func (x *Connectable) GetLink() *Link {
	if x != nil {
		return x.Link
	}
	return nil
}

// An connection can be used to connect two connectables.
type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connecting sobject. It is interchangable with the connected.
	Connecting *Connectable `protobuf:"bytes,1,opt,name=connecting,proto3" json:"connecting,omitempty"`
	// The connected sobject. It is interchangable with the connecting.
	Connected *Connectable `protobuf:"bytes,2,opt,name=connected,proto3" json:"connected,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{9}
}

func (x *Connection) GetConnecting() *Connectable {
	if x != nil {
		return x.Connecting
	}
	return nil
}

func (x *Connection) GetConnected() *Connectable {
	if x != nil {
		return x.Connected
	}
	return nil
}

// An assembly (tree) defines a subset of a layout that can be assembled unambiguously.
type Assembly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the sobject to place.
	SobjectId string `protobuf:"bytes,1,opt,name=sobject_id,json=sobjectId,proto3" json:"sobject_id,omitempty"`
	// The parts of an assembly (tree) are again assemblies.
	Parts []*Assembly `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *Assembly) Reset() {
	*x = Assembly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assembly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assembly) ProtoMessage() {}

func (x *Assembly) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assembly.ProtoReflect.Descriptor instead.
func (*Assembly) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{10}
}

func (x *Assembly) GetSobjectId() string {
	if x != nil {
		return x.SobjectId
	}
	return ""
}

func (x *Assembly) GetParts() []*Assembly {
	if x != nil {
		return x.Parts
	}
	return nil
}

// A layout (graph) is a plan for a set of sobjects and their connections between each other.
type Layout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sobjects (nodes) that are part of the layout (graph).
	Sobjects []*Sobject `protobuf:"bytes,1,rep,name=sobjects,proto3" json:"sobjects,omitempty"`
	// Connections (edges) that are part of the layout (graph).
	Connections []*Connection  `protobuf:"bytes,2,rep,name=connections,proto3" json:"connections,omitempty"`
	Strategy    LayoutStrategy `protobuf:"varint,3,opt,name=strategy,proto3,enum=semio.model.v1.LayoutStrategy" json:"strategy,omitempty"`
	// Optional assemblies that can possibly unambiguously describe the layout order of sobjects.
	// Most of the time this field is only necissary when elements that don't work well together in a general way.
	// Therefore if you can update the element definitions to be more robust, rather use your time for that.
	Assemblies []*Assembly `protobuf:"bytes,4,rep,name=assemblies,proto3" json:"assemblies,omitempty"`
}

func (x *Layout) Reset() {
	*x = Layout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layout) ProtoMessage() {}

func (x *Layout) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layout.ProtoReflect.Descriptor instead.
func (*Layout) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{11}
}

func (x *Layout) GetSobjects() []*Sobject {
	if x != nil {
		return x.Sobjects
	}
	return nil
}

func (x *Layout) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *Layout) GetStrategy() LayoutStrategy {
	if x != nil {
		return x.Strategy
	}
	return LayoutStrategy_LAYOUTSTRATEGY_BREADTHFIRST
}

func (x *Layout) GetAssemblies() []*Assembly {
	if x != nil {
		return x.Assemblies
	}
	return nil
}

// A prototype acts as a template from which an element can be cloned.
type Prototype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the plan used for the construction of the prototype.
	PlanHash string `protobuf:"bytes,1,opt,name=plan_hash,json=planHash,proto3" json:"plan_hash,omitempty"`
	// Representations of the prototype.
	Representations []*Representation `protobuf:"bytes,2,rep,name=representations,proto3" json:"representations,omitempty"`
	// An optional human readable description of the prototype.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Prototype) Reset() {
	*x = Prototype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prototype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prototype) ProtoMessage() {}

func (x *Prototype) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prototype.ProtoReflect.Descriptor instead.
func (*Prototype) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{12}
}

func (x *Prototype) GetPlanHash() string {
	if x != nil {
		return x.PlanHash
	}
	return ""
}

func (x *Prototype) GetRepresentations() []*Representation {
	if x != nil {
		return x.Representations
	}
	return nil
}

func (x *Prototype) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// An element is the atom of a design. It has several representations and a pose.
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sobject id that was used to construct the element.
	SobjectId string `protobuf:"bytes,1,opt,name=sobject_id,json=sobjectId,proto3" json:"sobject_id,omitempty"`
	// The hash of the plan for the prototype of the element.
	PrototypePlanHash string `protobuf:"bytes,2,opt,name=prototype_plan_hash,json=prototypePlanHash,proto3" json:"prototype_plan_hash,omitempty"`
	// The pose of the element instance.
	Pose *Pose `protobuf:"bytes,3,opt,name=pose,proto3" json:"pose,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{13}
}

func (x *Element) GetSobjectId() string {
	if x != nil {
		return x.SobjectId
	}
	return ""
}

func (x *Element) GetPrototypePlanHash() string {
	if x != nil {
		return x.PrototypePlanHash
	}
	return ""
}

func (x *Element) GetPose() *Pose {
	if x != nil {
		return x.Pose
	}
	return nil
}

// A design is an aggregation of elements (actually element instances).
type Design struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prototypes []*Prototype `protobuf:"bytes,1,rep,name=prototypes,proto3" json:"prototypes,omitempty"`
	Elements   []*Element   `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *Design) Reset() {
	*x = Design{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Design) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Design) ProtoMessage() {}

func (x *Design) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Design.ProtoReflect.Descriptor instead.
func (*Design) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{14}
}

func (x *Design) GetPrototypes() []*Prototype {
	if x != nil {
		return x.Prototypes
	}
	return nil
}

func (x *Design) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

// A layout modification describes declaratively a layout and the layout after its modification. The rules on how to imperatively change such a layout need to be found by the transformation system.
type LayoutModification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         *Layout `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	ModifiedContext *Layout `protobuf:"bytes,2,opt,name=modified_context,json=modifiedContext,proto3" json:"modified_context,omitempty"`
}

func (x *LayoutModification) Reset() {
	*x = LayoutModification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayoutModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutModification) ProtoMessage() {}

func (x *LayoutModification) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutModification.ProtoReflect.Descriptor instead.
func (*LayoutModification) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{15}
}

func (x *LayoutModification) GetContext() *Layout {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *LayoutModification) GetModifiedContext() *Layout {
	if x != nil {
		return x.ModifiedContext
	}
	return nil
}

// A decision strategy holds information on how modifications are applied.
type LayoutModificationStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The match count describes how often a layout modification should be applied. It beeing finite will make sure that the system always terminates. Make sure to set the threshold high enough.
	MatchCount uint32 `protobuf:"varint,1,opt,name=match_count,json=matchCount,proto3" json:"match_count,omitempty"`
}

func (x *LayoutModificationStrategy) Reset() {
	*x = LayoutModificationStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayoutModificationStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutModificationStrategy) ProtoMessage() {}

func (x *LayoutModificationStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutModificationStrategy.ProtoReflect.Descriptor instead.
func (*LayoutModificationStrategy) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{16}
}

func (x *LayoutModificationStrategy) GetMatchCount() uint32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

// A decision is a layout modification with a strategy on how to apply it to a new layout.
type Decision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modification *LayoutModification         `protobuf:"bytes,1,opt,name=modification,proto3" json:"modification,omitempty"`
	Strategy     *LayoutModificationStrategy `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *Decision) Reset() {
	*x = Decision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_v1_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decision) ProtoMessage() {}

func (x *Decision) ProtoReflect() protoreflect.Message {
	mi := &file_model_v1_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decision.ProtoReflect.Descriptor instead.
func (*Decision) Descriptor() ([]byte, []int) {
	return file_model_v1_model_proto_rawDescGZIP(), []int{17}
}

func (x *Decision) GetModification() *LayoutModification {
	if x != nil {
		return x.Modification
	}
	return nil
}

func (x *Decision) GetStrategy() *LayoutModificationStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

var File_model_v1_model_proto protoreflect.FileDescriptor

var file_model_v1_model_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x77, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x12, 0x31, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x67,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65,
	0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x97, 0x02, 0x0a, 0x0e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65,
	0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6c, 0x6f, 0x64, 0x22, 0x37, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xc4,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x6d, 0x69,
	0x6f, 0x2e, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x53, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x5e,
	0x0a, 0x16, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x16, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x69, 0x61, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0x84, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x33, 0x0a,
	0x08, 0x73, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x38, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x48, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d,
	0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01,
	0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x70, 0x6f,
	0x73, 0x65, 0x22, 0x78, 0x0a, 0x06, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x6d, 0x69,
	0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x12, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3d, 0x0a, 0x1a, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x6d,
	0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x2a, 0x87, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x55, 0x46, 0x54, 0x38, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x55, 0x46, 0x54, 0x31, 0x36,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x55, 0x46, 0x54, 0x33, 0x32, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x41, 0x53, 0x43,
	0x49, 0x49, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x10, 0x04, 0x2a, 0xe9,
	0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x49, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x58, 0x4d, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x4d, 0x4c, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x49, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x59, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x10, 0x07, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x50, 0x50, 0x10,
	0x08, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x53,
	0x48, 0x41, 0x52, 0x50, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x4f, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x53, 0x54, 0x10, 0x0b, 0x2a, 0xad, 0x04, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x4f, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x4b, 0x4c, 0x45, 0x10,
	0xb0, 0xce, 0x8d, 0xfb, 0x05, 0x12, 0x16, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0xe4, 0x94, 0xeb, 0xdc, 0x03, 0x12, 0x19, 0x0a,
	0x11, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x56, 0x45, 0x52, 0x43, 0x48,
	0x4f, 0x4b, 0x10, 0xc8, 0xcb, 0xb5, 0xee, 0x01, 0x12, 0x1d, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x49, 0x46, 0x43, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x48, 0x45, 0x4c,
	0x4c, 0x10, 0xa0, 0xce, 0xd3, 0xe1, 0x03, 0x12, 0x19, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x41, 0x44, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x84, 0xae, 0xfe,
	0xfa, 0x05, 0x12, 0x18, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x43, 0x41, 0x44, 0x10, 0xe8, 0xdf, 0xe2, 0xfc, 0x01, 0x12, 0x19, 0x0a, 0x11,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x43, 0x41,
	0x44, 0x10, 0xcc, 0xe0, 0xe2, 0xfc, 0x01, 0x12, 0x16, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x4a, 0x53, 0x43, 0x41, 0x44, 0x10, 0xb0, 0xee, 0xa6, 0xcb, 0x05, 0x12,
	0x18, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x4f, 0x52, 0x4e,
	0x4a, 0x4f, 0x54, 0x10, 0xac, 0xe4, 0xcf, 0xaa, 0x06, 0x12, 0x16, 0x0a, 0x0e, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x55, 0x43, 0x4b, 0x10, 0x90, 0xe1, 0xa0, 0xcb,
	0x05, 0x12, 0x1b, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x4e,
	0x45, 0x52, 0x47, 0x59, 0x50, 0x4c, 0x55, 0x53, 0x10, 0xa4, 0x81, 0x8b, 0x8a, 0x07, 0x12, 0x1b,
	0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x53,
	0x54, 0x55, 0x44, 0x49, 0x4f, 0x10, 0xa5, 0xae, 0xed, 0x8e, 0x07, 0x12, 0x16, 0x0a, 0x0e, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x48, 0x49, 0x4e, 0x4f, 0x10, 0xe0, 0xc5,
	0xc9, 0xfc, 0x07, 0x12, 0x1c, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x47, 0x52, 0x41, 0x53, 0x53, 0x48, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10, 0xe1, 0xc5, 0xc9, 0xfc,
	0x07, 0x12, 0x16, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x54, 0x10, 0xc4, 0xc6, 0xc9, 0xfc, 0x07, 0x12, 0x17, 0x0a, 0x0f, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x4f, 0x10, 0xc5, 0xc6, 0xc9,
	0xfc, 0x07, 0x12, 0x19, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41,
	0x52, 0x43, 0x48, 0x49, 0x43, 0x41, 0x44, 0x10, 0xa8, 0xc7, 0xc9, 0xfc, 0x07, 0x12, 0x1b, 0x0a,
	0x13, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x45, 0x4e,
	0x47, 0x49, 0x4e, 0x45, 0x10, 0x8c, 0xc8, 0xc9, 0xfc, 0x07, 0x12, 0x16, 0x0a, 0x0e, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x10, 0xf0, 0xc8, 0xc9,
	0xfc, 0x07, 0x12, 0x16, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x48,
	0x59, 0x50, 0x41, 0x52, 0x10, 0x94, 0xcd, 0xcc, 0xfc, 0x07, 0x2a, 0x7d, 0x0a, 0x16, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0e, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x4c,
	0x41, 0x59, 0x4f, 0x55, 0x54, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x42, 0x52,
	0x45, 0x41, 0x44, 0x54, 0x48, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x44,
	0x45, 0x50, 0x54, 0x48, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x42, 0xab, 0x01, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x42, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x73, 0x61,
	0x6c, 0x75, 0x2f, 0x73, 0x65, 0x6d, 0x69, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x53, 0x4d, 0x58, 0xaa, 0x02, 0x0e, 0x53, 0x65, 0x6d, 0x69, 0x6f, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x53, 0x65, 0x6d, 0x69, 0x6f,
	0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x53, 0x65, 0x6d, 0x69,
	0x6f, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x53, 0x65, 0x6d, 0x69, 0x6f, 0x3a, 0x3a,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_model_v1_model_proto_rawDescOnce sync.Once
	file_model_v1_model_proto_rawDescData = file_model_v1_model_proto_rawDesc
)

func file_model_v1_model_proto_rawDescGZIP() []byte {
	file_model_v1_model_proto_rawDescOnce.Do(func() {
		file_model_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_v1_model_proto_rawDescData)
	})
	return file_model_v1_model_proto_rawDescData
}

var file_model_v1_model_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_model_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_model_v1_model_proto_goTypes = []interface{}{
	(Encoding)(0),                      // 0: semio.model.v1.Encoding
	(FileType)(0),                      // 1: semio.model.v1.FileType
	(Platform)(0),                      // 2: semio.model.v1.Platform
	(RepresentationProtocol)(0),        // 3: semio.model.v1.RepresentationProtocol
	(LayoutStrategy)(0),                // 4: semio.model.v1.LayoutStrategy
	(*Pose)(nil),                       // 5: semio.model.v1.Pose
	(*Representation)(nil),             // 6: semio.model.v1.Representation
	(*Scope)(nil),                      // 7: semio.model.v1.Scope
	(*Value)(nil),                      // 8: semio.model.v1.Value
	(*Parameter)(nil),                  // 9: semio.model.v1.Parameter
	(*Plan)(nil),                       // 10: semio.model.v1.Plan
	(*Sobject)(nil),                    // 11: semio.model.v1.Sobject
	(*Link)(nil),                       // 12: semio.model.v1.Link
	(*Connectable)(nil),                // 13: semio.model.v1.Connectable
	(*Connection)(nil),                 // 14: semio.model.v1.Connection
	(*Assembly)(nil),                   // 15: semio.model.v1.Assembly
	(*Layout)(nil),                     // 16: semio.model.v1.Layout
	(*Prototype)(nil),                  // 17: semio.model.v1.Prototype
	(*Element)(nil),                    // 18: semio.model.v1.Element
	(*Design)(nil),                     // 19: semio.model.v1.Design
	(*LayoutModification)(nil),         // 20: semio.model.v1.LayoutModification
	(*LayoutModificationStrategy)(nil), // 21: semio.model.v1.LayoutModificationStrategy
	(*Decision)(nil),                   // 22: semio.model.v1.Decision
	(*v1.Point)(nil),                   // 23: semio.geometry.v1.Point
	(*v1.Quaternion)(nil),              // 24: semio.geometry.v1.Quaternion
}
var file_model_v1_model_proto_depIdxs = []int32{
	23, // 0: semio.model.v1.Pose.point_of_view:type_name -> semio.geometry.v1.Point
	24, // 1: semio.model.v1.Pose.view:type_name -> semio.geometry.v1.Quaternion
	0,  // 2: semio.model.v1.Representation.encoding:type_name -> semio.model.v1.Encoding
	1,  // 3: semio.model.v1.Representation.file_type:type_name -> semio.model.v1.FileType
	2,  // 4: semio.model.v1.Representation.platform:type_name -> semio.model.v1.Platform
	23, // 5: semio.model.v1.Value.point:type_name -> semio.geometry.v1.Point
	7,  // 6: semio.model.v1.Parameter.context:type_name -> semio.model.v1.Scope
	8,  // 7: semio.model.v1.Parameter.value:type_name -> semio.model.v1.Value
	9,  // 8: semio.model.v1.Plan.parameters:type_name -> semio.model.v1.Parameter
	5,  // 9: semio.model.v1.Sobject.pose:type_name -> semio.model.v1.Pose
	10, // 10: semio.model.v1.Sobject.plan:type_name -> semio.model.v1.Plan
	3,  // 11: semio.model.v1.Link.representationProtocol:type_name -> semio.model.v1.RepresentationProtocol
	9,  // 12: semio.model.v1.Link.bias_parameters:type_name -> semio.model.v1.Parameter
	12, // 13: semio.model.v1.Connectable.link:type_name -> semio.model.v1.Link
	13, // 14: semio.model.v1.Connection.connecting:type_name -> semio.model.v1.Connectable
	13, // 15: semio.model.v1.Connection.connected:type_name -> semio.model.v1.Connectable
	15, // 16: semio.model.v1.Assembly.parts:type_name -> semio.model.v1.Assembly
	11, // 17: semio.model.v1.Layout.sobjects:type_name -> semio.model.v1.Sobject
	14, // 18: semio.model.v1.Layout.connections:type_name -> semio.model.v1.Connection
	4,  // 19: semio.model.v1.Layout.strategy:type_name -> semio.model.v1.LayoutStrategy
	15, // 20: semio.model.v1.Layout.assemblies:type_name -> semio.model.v1.Assembly
	6,  // 21: semio.model.v1.Prototype.representations:type_name -> semio.model.v1.Representation
	5,  // 22: semio.model.v1.Element.pose:type_name -> semio.model.v1.Pose
	17, // 23: semio.model.v1.Design.prototypes:type_name -> semio.model.v1.Prototype
	18, // 24: semio.model.v1.Design.elements:type_name -> semio.model.v1.Element
	16, // 25: semio.model.v1.LayoutModification.context:type_name -> semio.model.v1.Layout
	16, // 26: semio.model.v1.LayoutModification.modified_context:type_name -> semio.model.v1.Layout
	20, // 27: semio.model.v1.Decision.modification:type_name -> semio.model.v1.LayoutModification
	21, // 28: semio.model.v1.Decision.strategy:type_name -> semio.model.v1.LayoutModificationStrategy
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_model_v1_model_proto_init() }
func file_model_v1_model_proto_init() {
	if File_model_v1_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_v1_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Representation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sobject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connectable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assembly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prototype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Design); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayoutModification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayoutModificationStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_v1_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_model_v1_model_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Value_Text)(nil),
		(*Value_Number)(nil),
		(*Value_IntegerNumber)(nil),
		(*Value_NaturalNumber)(nil),
		(*Value_Point)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_v1_model_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_v1_model_proto_goTypes,
		DependencyIndexes: file_model_v1_model_proto_depIdxs,
		EnumInfos:         file_model_v1_model_proto_enumTypes,
		MessageInfos:      file_model_v1_model_proto_msgTypes,
	}.Build()
	File_model_v1_model_proto = out.File
	file_model_v1_model_proto_rawDesc = nil
	file_model_v1_model_proto_goTypes = nil
	file_model_v1_model_proto_depIdxs = nil
}
