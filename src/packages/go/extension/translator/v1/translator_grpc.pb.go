// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/usalu/semio/src/packages/go/model/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TranslatorServiceClient is the client API for TranslatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslatorServiceClient interface {
	// Translate a representation from one pose (coordinate system) into another one.
	TranslateRepresentation(ctx context.Context, in *TranslateRepresentationRequest, opts ...grpc.CallOption) (*v1.Representation, error)
}

type translatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslatorServiceClient(cc grpc.ClientConnInterface) TranslatorServiceClient {
	return &translatorServiceClient{cc}
}

func (c *translatorServiceClient) TranslateRepresentation(ctx context.Context, in *TranslateRepresentationRequest, opts ...grpc.CallOption) (*v1.Representation, error) {
	out := new(v1.Representation)
	err := c.cc.Invoke(ctx, "/semio.extension.translator.v1.TranslatorService/TranslateRepresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslatorServiceServer is the server API for TranslatorService service.
// All implementations must embed UnimplementedTranslatorServiceServer
// for forward compatibility
type TranslatorServiceServer interface {
	// Translate a representation from one pose (coordinate system) into another one.
	TranslateRepresentation(context.Context, *TranslateRepresentationRequest) (*v1.Representation, error)
	mustEmbedUnimplementedTranslatorServiceServer()
}

// UnimplementedTranslatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranslatorServiceServer struct {
}

func (UnimplementedTranslatorServiceServer) TranslateRepresentation(context.Context, *TranslateRepresentationRequest) (*v1.Representation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateRepresentation not implemented")
}
func (UnimplementedTranslatorServiceServer) mustEmbedUnimplementedTranslatorServiceServer() {}

// UnsafeTranslatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslatorServiceServer will
// result in compilation errors.
type UnsafeTranslatorServiceServer interface {
	mustEmbedUnimplementedTranslatorServiceServer()
}

func RegisterTranslatorServiceServer(s grpc.ServiceRegistrar, srv TranslatorServiceServer) {
	s.RegisterService(&TranslatorService_ServiceDesc, srv)
}

func _TranslatorService_TranslateRepresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateRepresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServiceServer).TranslateRepresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semio.extension.translator.v1.TranslatorService/TranslateRepresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServiceServer).TranslateRepresentation(ctx, req.(*TranslateRepresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranslatorService_ServiceDesc is the grpc.ServiceDesc for TranslatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranslatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "semio.extension.translator.v1.TranslatorService",
	HandlerType: (*TranslatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranslateRepresentation",
			Handler:    _TranslatorService_TranslateRepresentation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "extension/translator/v1/translator.proto",
}
