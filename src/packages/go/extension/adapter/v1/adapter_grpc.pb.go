// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/usalu/semio/src/packages/go/model/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdapterServiceClient is the client API for AdapterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdapterServiceClient interface {
	// Request an attraction point for the attracted.
	RequestAttractionPoint(ctx context.Context, in *AttractionPointRequest, opts ...grpc.CallOption) (*v1.Point, error)
	// Request a specific representation
	RequestRepresentation(ctx context.Context, in *RepresentationRequest, opts ...grpc.CallOption) (*v1.Representation, error)
	// Request potentially all representations
	RequestRepresentations(ctx context.Context, in *RepresentationsRequest, opts ...grpc.CallOption) (*RepresentationsResponse, error)
}

type adapterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdapterServiceClient(cc grpc.ClientConnInterface) AdapterServiceClient {
	return &adapterServiceClient{cc}
}

func (c *adapterServiceClient) RequestAttractionPoint(ctx context.Context, in *AttractionPointRequest, opts ...grpc.CallOption) (*v1.Point, error) {
	out := new(v1.Point)
	err := c.cc.Invoke(ctx, "/semio.extension.adapter.v1.AdapterService/RequestAttractionPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) RequestRepresentation(ctx context.Context, in *RepresentationRequest, opts ...grpc.CallOption) (*v1.Representation, error) {
	out := new(v1.Representation)
	err := c.cc.Invoke(ctx, "/semio.extension.adapter.v1.AdapterService/RequestRepresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterServiceClient) RequestRepresentations(ctx context.Context, in *RepresentationsRequest, opts ...grpc.CallOption) (*RepresentationsResponse, error) {
	out := new(RepresentationsResponse)
	err := c.cc.Invoke(ctx, "/semio.extension.adapter.v1.AdapterService/RequestRepresentations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdapterServiceServer is the server API for AdapterService service.
// All implementations must embed UnimplementedAdapterServiceServer
// for forward compatibility
type AdapterServiceServer interface {
	// Request an attraction point for the attracted.
	RequestAttractionPoint(context.Context, *AttractionPointRequest) (*v1.Point, error)
	// Request a specific representation
	RequestRepresentation(context.Context, *RepresentationRequest) (*v1.Representation, error)
	// Request potentially all representations
	RequestRepresentations(context.Context, *RepresentationsRequest) (*RepresentationsResponse, error)
	mustEmbedUnimplementedAdapterServiceServer()
}

// UnimplementedAdapterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdapterServiceServer struct {
}

func (UnimplementedAdapterServiceServer) RequestAttractionPoint(context.Context, *AttractionPointRequest) (*v1.Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAttractionPoint not implemented")
}
func (UnimplementedAdapterServiceServer) RequestRepresentation(context.Context, *RepresentationRequest) (*v1.Representation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRepresentation not implemented")
}
func (UnimplementedAdapterServiceServer) RequestRepresentations(context.Context, *RepresentationsRequest) (*RepresentationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRepresentations not implemented")
}
func (UnimplementedAdapterServiceServer) mustEmbedUnimplementedAdapterServiceServer() {}

// UnsafeAdapterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdapterServiceServer will
// result in compilation errors.
type UnsafeAdapterServiceServer interface {
	mustEmbedUnimplementedAdapterServiceServer()
}

func RegisterAdapterServiceServer(s grpc.ServiceRegistrar, srv AdapterServiceServer) {
	s.RegisterService(&AdapterService_ServiceDesc, srv)
}

func _AdapterService_RequestAttractionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttractionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).RequestAttractionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semio.extension.adapter.v1.AdapterService/RequestAttractionPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).RequestAttractionPoint(ctx, req.(*AttractionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_RequestRepresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).RequestRepresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semio.extension.adapter.v1.AdapterService/RequestRepresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).RequestRepresentation(ctx, req.(*RepresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterService_RequestRepresentations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepresentationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).RequestRepresentations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semio.extension.adapter.v1.AdapterService/RequestRepresentations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).RequestRepresentations(ctx, req.(*RepresentationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdapterService_ServiceDesc is the grpc.ServiceDesc for AdapterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdapterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "semio.extension.adapter.v1.AdapterService",
	HandlerType: (*AdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAttractionPoint",
			Handler:    _AdapterService_RequestAttractionPoint_Handler,
		},
		{
			MethodName: "RequestRepresentation",
			Handler:    _AdapterService_RequestRepresentation_Handler,
		},
		{
			MethodName: "RequestRepresentations",
			Handler:    _AdapterService_RequestRepresentations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "extension/adapter/v1/adapter.proto",
}
