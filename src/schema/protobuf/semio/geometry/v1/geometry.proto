// TODO: Make compliant to: https://www.iso.org/standard/84667.html
// For now it is enough to stay close to speckle as it can be used for translating between most platforms.
// https://github.com/specklesystems/speckle-sharp/tree/main/Objects
syntax = "proto3";

package semio.geometry.v1;

option go_package = "github.com/usalu/semio/src/packages/go/geometry/v1";
option csharp_namespace = "Semio.Geometry.V1";


// A 3d point with x,y,z coordinates.
message Point {
  // X coordinate.
  double x = 1;
  // Y coordinate
  double y = 2;
  // Z coordinate
  double z = 3;
}

// // A 3d point in spherical coordinates.
// message SphericalCoordinates {
//   double r = 1;
//   // Angle \phi (between x and y axis). Also called azimut angle
//   double phi = 2;
//   // Angle \theta (between phi axis and z axis).
//   double theta = 3;
// }

// A 3d vector with x,y,z components.
message Vector {
    // X component.
    double x = 1;
    // Y component
    double y = 2;
    // Z component
    double z = 3;
}

// // (Unit) quaternions represent (here) (rotational) orientation. It can be interpreted as the view of an object.  
// message Quaternion {
//   // The value of the real part of the quaternion.
//   double w = 1;
//   // The first value of the imaginary part of the quaternion.
//   double x = 2;
//   // The second value of the imaginary part of the quaternion.
//   double y = 3;
//   // The third value of the imaginary part of the quaternion.
//   double z = 4;
// }

// ‚á≤ Transform (tfm/Tm) is a 4x4 matrix that is used to describe transformations of objects in 3d space.
// The transform is in row dominant form.
message Transform {
  // The value of the first row and the first column.
  double m00 = 1;
  // The value of the first row and the second column.
  double m01 = 2;
  // The value of the first row and the third column.
  double m02 = 3;
  // The value of the first row and the fourth column.
  double m03 = 4;
  // The value of the second row and the first column.
  // It describes the x part of a translation of the origin.
  double m10 = 5;
  // The value of the second row and the second column.
  double m11 = 6;
  // The value of the second row and the third column.
  double m12 = 7;
  // The value of the second row and the fourth column.
  // It describes the y part of a translation of the origin.
  double m13 = 8;
  // The value of the third row and the first column. 
  double m20 = 9;
  // The value of the third row and the second column.
  double m21 = 10;
  // The value of the third row and the third column.
  double m22 = 11;
  // The value of the third row and the fourth column.
  // It describes the z part of a translation of the origin.
  double m23 = 12;
  // The value of the fourth row and the first column. 
  double m30 = 13;
  // The value of the fourth row and the second column.
  // It describes the x part of possible perspective distortion.
  // Default is usually 0.
  double m31 = 14;
  // The value of the fourth row and the third column.
  // It describes the y part of possible perspective distortion.
  // Default is usually 0.
  double m32 = 15;
  // The value of the fourth row and the fourth column.
  // This should always be 1.
  double m33 = 16;
}

// // (XYZ) Euler angles describe a rotation of an object in 3d.
// // See: https://en.wikipedia.org/wiki/Euler_angles
// message EulerAngles {
//   // Angle of rotation around x axis.
//   // This angle is applied first.
//   double x = 1;
//    // Angle of rotation around x axis.
//    // This angle is applied second (after x).
//    double y = 2;
//    // Angle of rotation around x axis.
//    // This angle is applied last (after x and y).
//    double z = 3;
//   }

//   // Nautic angles describe a rotation of an object in 3d. 
// // See: https://en.wikipedia.org/wiki/Aircraft_principal_axes
// message NauticAngles {
//   // Angle of rotation around the normal axis.
//   // Usually the z axis.
//   // This angle is applied first.
//   double yaw = 1;
//   // Angle of rotation around the transverse (also called lateral) axis.
//   // Usually the y axis.
//   // This angle is applied second (after yaw).
//   double pitch = 2;
//    // Angle of rotation around the longitudinal axis.
//    // Usually the x axis.
//    // This angle is applied last (after yaw and pitch).
//    double roll = 3;
// }


// // A pose is a static reference frame/coordinate system where all base vectors are orthonormal and the orientation is described by a quaternion.
// message Pose {
//   // Point of view (origin) from the pose (reference frame/coordinate system)
//   semio.geometry.v1.Point point_of_view = 1;
//   // View (orientation) from the pose (reference frame/coordinate system)
//   semio.geometry.v1.Quaternion view = 2;
// }

// A (reference) plane. Also called: reference frame, reference coordinate system
message Plane {
    // Origin
    Point org = 1;
    // X-Axis
    Vector x_axis = 2;
    // Y-Axis
    Vector y_axis = 3;
}

// // A part of a 3d circle.
// message Arc {
//     // Radius of the arc.
//     double radius = 1;
//     // Plane of the arc. The arcs center point is at the origin of the plane.
//     Plane plane = 2;
//     // The angle where the arc starts in radians.
//     double start_angle = 3;
//     // The angle where the arc starts in radians.
//     double end_angle = 4;
// }

// // A line with a start and end point.
// message Line {
//     // Starting point of the line.
//     Point start = 1;
//     // Ending point of the line.
//     Point end = 2;
// }

// // A polyline with a list of points.
// message Polyline {
//     repeated Point points = 1;
// }

// // An interval (range).
// message Interval {
//     // Start of the interval.
//     double start = 1;
//     // End of the interval.
//     double end = 2;
// }

// // A 3d box.
// message Box {
//     // The (reference) plane for the interval (coordinates). 
//     Plane plane = 1;
//     // An interval describing the start and the end x coordinate.
//     Interval x = 2;
//     // An interval describing the start and the end y coordinate.
//     Interval y = 3;
//     // An interval describing the start and the end z coordinate.
//     Interval z = 4;
// }

// // A (weighted) control point.
// message ControlPoint {
//     Point point = 1;
//     // The weight of the control point.
//     double weight = 2;
// }


// message Curve {

// }

// // A point cloud with optional color and size data.
// message PointCloud {
//     repeated Point points = 1;
//     // Optionally the colors for the points.
//     repeated Color colors = 2;
//     // Optionally the sizes for the points.
//     repeated double sizes = 3;
// }


// message Brep {
//     // Points
//     repeated Point vertices = 1;

// }

// message BrepEdge {

// }

// message BrepFace {

// }

// message BrepLoop {

// }

// message BrepTrim {

// }

// message Circle {

// }

// message Ellipse {

// }

// message Extrusion {

// }

// message Mesh {

// }

// message Polycurve {

// }

// message Spiral {

// }

// message Surface {

// }

// üåê Geometry (geo/Go) is oneof all data structures of the geometry namespace.
message Geometry {
  // Geometry
  oneof geo{
    // Point geometry
    Point pt = 1;
    // Vector geometry
    Vector vec = 2;
    // Transform geometry
    Transform trm = 3;
    // Plane geometry
    Plane pln = 4;
  }
}