// General abbreviations:
// 👤 Author (aut/Au)
// ✍️ Concept (cpt/Cp)
// 🗺️ Context (ctx/Cx)
// 📝 Description (dcp/Dp)
// 🆔 Identification (id/ID)
// 🗄️ Metadata (md,MD)
// ⏓ Order (odr,Or)
// ⏕ Ordering (odn,On)
// ⌚ Timestamp (ts,TS)

syntax = "proto3";

package semio.model.v1;

option go_package = "github.com/usalu/semio/src/packages/go/model/v1";
option csharp_namespace = "Semio.Model.V1";

import "google/protobuf/timestamp.proto";
import "geometry/v1/geometry.proto";

// 💯 Number (num,Nu) value.
message Number {
  oneof num {
    // 🧾 Decimal (dcm/DN) number value.
    float dcm = 1;
    // 🔢 Integer (int/IN) number value.
    int32 int = 2;
    // 🧮 Natural (nnr/NN) number value.
    int32 nnr = 3;
  }
}

// 🔤 Text (txt,Tx) value.
message Text {
  // Text value
  oneof txt {
    // Description text value.
    string dcp = 1;
    // ☶ Choice (chc/Cc) text value.
    string chc = 2;
    // ☑️ TrueOrFalse (tof/TF) text value.
    int32 tof = 3;
  }
}

// 🎚️ Value (val/V) that will be mapped to a native type in the corresponding platform.
message Value {
  // Value
  oneof val {
    // Number value
    Number num =1;
    // Text value
    Text txt = 2;
    // Geometry value
    semio.geometry.v1.Geometry geo = 3;
    // Model value
    Model mdl = 4;
    // Extended model value
    ExtendedModel ext_mdl = 5;
  }
  // Optional context of the value.
  // The purpose of a scope is to allow to reconstruct native collection types in each platform.
  // Example: Multiple rectangles for windows for a fassade of a standard box shaped building.
  // A windows belongs both to a fassade [north,west,east,south] and a floor [0,1,...].
  // Depending on the purpose of the script, you could need either a tree with storey as first branching and fassade as second branching
  // or the other way around. Depending on the platform that can be nested dictionaries, list of lists, native data trees, ...
  map <string,string> ctx = 6;
}

// A list of values.
message Values{
  // Values list
  repeated Value vals = 1;
}

// 🗃️ Namevaluespairs (nvp/NV) is pair of a name and values.
message Namevaluespairs{
  // Map of name as keys and values as value.
  map <string,Values> nvps = 1;
}

// 🔐 Encoding (enc/Ec) of a byte array.
enum Encoding {
  // Unicode Transformation Format – 8-bit
  ENCODING_UFT8 = 0;
  // Unicode Transformation Format – 8-bit with Byte Order Mark
  ENCODING_UFT8BOM = 1;
  // Unicode Transformation Format – 16-bit with Little Endian Byte Order Mark
  ENCODING_UFT16LE = 2;
  // Unicode Transformation Format – 16-bit with Big Endian Byte Order Mark
  ENCODING_UFT16BE = 3;
  // Unicode Transformation Format – 32-bit with Little Endian Byte Order Mark
  ENCODING_UFT32LE = 4;
  // Unicode Transformation Format – 32-bit with Big Endian Byte Order Mark
  ENCODING_UFT32BE = 5;
  // American Standard Code for Information Interchange
  ENCODING_ASCII = 6;
  // Also ASCII but with further base 64 encoding of the text.
  ENCODING_BASE64 = 7;
}

// ⚞ Serialization (slz/Sz) format of string.
enum Serialization {
  // When it is no common serialization format. 
  SERIALIZATION_BYTES = 0;
  // Custom text serialization according platform.
  // Often files have a platform specific extension but if you open them in a text editor you can see that they are serialized in a standard format.
  SERIALIZATION_TEXT = 1;
  SERIALIZATION_JSON = 2;
  SERIALIZATION_XML = 3;
  SERIALIZATION_YAML = 4;
  SERIALIZATION_TOML = 5;
  // https://www.iso.org/standard/63141.html
  SERIALIZATION_STEP = 6;
}

// 🚉 Platform (ptf/Pf) for a script. A platform determines where a script should be computed.
// Constants are encoded with pattern LICENSE [3] + OWNERTYPE [2] +  OWNERID [3] + PLATFORMID [2] < max (int32) = 2,147,483,647
// LICENSE (if possible after https://spdx.org/licenses/): 
// 0:AGPL-3.0-or-later,
// 50:GPL-3.0+,51:GPL-3.0,52:GPL-2.0+,53:GPL-2.0
// 100:LGPL-3.0-or-later,101:LGPL-3.0-only
// 150:MIT,160:Apache-2.0,
// 170:0BSD
// 190:EnergyPlus
// 214:Closed
// OWNERID after OWNERTYPE:
// 0:INDIVIDUALS: 0:usalu,1:mrdoob,2:nortikin,3:hannobraun,4:ricosjp
// 1:COLLECTIVE: 0:ifcopenshell,1:cadquery,2:freecad,3:openscad,4:jscad
// 2:NONPROFIT: 0:buildingsmart,1:nrel,2:w3c
// 3:COMPANY: 0:mcneel,1:autodesk,2:nemetschek,3:esri,4:microsoft, 500:speckle,501:hypar
enum Platform {
  // https://github.com/usalu/semio
  PLATFORM_SEMIO = 0;
  // https://github.com/specklesystems
  PLATFORM_SPECKLE = 1600350000;
  // https://github.com/mrdoob/three.js/
  PLATFORM_THREE = 1000000100;
  // https://github.com/nortikin/sverchok
  PLATFORM_SVERCHOK = 500000200;
  // https://github.com/IfcOpenShell
  PLATFORM_IFCOPENSHELL = 1010100000;
  // https://github.com/CadQuery
  PLATFORM_CADQUERY = 1600100100;
  // https://github.com/FreeCAD
  PLATFORM_FREECAD = 530100200;
  // https://github.com/openscad
  PLATFORM_OPENSCAD = 530100300;
  // https://github.com/jscad
  PLATFORM_JSCAD = 1500100400;
  // https://github.com/hannobraun/Fornjot
  PLATFORM_FORNJOT = 1700000300;
  // https://github.com/ricosjp/truck
  PLATFORM_TRUCK = 1500000400;
  // https://github.com/NREL/EnergyPlus
  PLATFORM_ENERGYPLUS = 1900200100;
  // https://github.com/NREL/OpenStudio
  PLATFORM_OPENSTUDIO = 1910200101;
  // https://www.rhino3d.com/
  PLATFORM_RHINO = 2140300000;
  // https://www.grasshopper3d.com/
  PLATFORM_GRASSHOPPER = 2140300001;
  // https://www.autodesk.de/products/revit/
  PLATFORM_REVIT = 2140300100;
  // https://dynamobim.org/
  PLATFORM_DYNAMO = 2140300101;
  // https://graphisoft.com/solutions/archicad
  PLATFORM_ARCHICAD = 2140300200;
  // https://www.esri.com/en-us/arcgis/products/arcgis-cityengine
  PLATFORM_CITYENGINE = 2140300300;
  // https://www.microsoft.com/en-us/microsoft-365/excel
  PLATFORM_EXCEL = 2140300400;
  // https://hypar.io/
  PLATFORM_HYPAR = 2140350100;
}

// 💬 Language (lng/Lg) of a representation. This is the schema of the dataof the representation.
// Constants are encoded with pattern ROYALTY [1] + ID [2] + OWNERTYPE [2] +  OWNERID [3] + PLATFORMID [2] < max (int32) = 2,147,483,647
// ROYALTY: FREE:0 PAYED:1
// OWNERTYPE, OWNERID and PLATFORMID same as in platform.
enum Language {
  // No machine readable language.
  LANGUAGE_CUSTOM = 0;
  // Industry Foundation Classes (IFC) from Building Information Modelling (BIM)
  // https://technical.buildingsmart.org/standards/ifc/ifc-schema-specifications/
  LANGUAGE_IFC = 200000;
  // Scalable Vector Graphics (SVG) from World Wide Web Consortium (W3C)
  // https://www.w3.org/TR/SVG2/
  LANGUAGE_SVG = 200200;
  // https://github.com/specklesystems
  LANGUAGE_SPECKLE = 350000;
  // https://www.rhino3d.com/
  LANGUAGE_3DM = 1000300000;
}

// 🏠 Representationresentation (rep/R) of an object. Basically a file with metadata.
message Representation {
  // 👕 Body (bdy/B) of representation
  bytes bdy = 1;
  // Optional encoding of the body if the representation is a text format.
  Encoding enc = 2;
  // Optional serialization if the representation is a text format.
  Serialization slz = 3;
  // Optional language of the representation.
  Language lng = 4;
  // Optional metadata for a representation
  message Metadata{
    // Name of the representation
    string name = 1;
    // Description of the representation for humans to understand what the purpose of this representation is.
    string dcp = 2;
    // Timestamp when the representation was created.
    google.protobuf.Timestamp ts_created = 3;
    // Platform in which the representation was created/authored.
    Platform aut_ptf = 4;
    // Author of the representation.
    string aut = 5;
    // Add a list of concepts that help filtering representations. This can be used for functional purpose (e.g. statical, energetical, ...) or for visualization purpose (e.g. volumetric,comic, , ...). 
    repeated string cpts = 6;
    // 🔍 LevelOfDetail (lod,LD) allows to further define representation details.
    // Like name this can be used either for visualization purpose (e.g. 200 (scale 1to200)) or functional purpose (e.g level of structural detail)
    // For architectural design it is recommended to choose the scale multiplier.
    // For BIM you might want to choose:
    // 100:Conceptual
    // 200:Approximate
    // 300:Precise
    // 400:Fabriaction
    // 500:Real
    int32 lod = 7;
  }
}

// A list of representations.
message Representations{
  repeated semio.model.v1.Representation reps = 1;
}

// 🔑 Key (key/K) for authentication of scripts.
message Key {
  oneof key {
    // Password (pwd/Pw) to unlock the script file.
    string pwd = 1;
    // Apikey (apik/AK) in order to use a script api.
    string api_key = 2;
  }
}

// 🛠️ Plan (pla,Pl) for a script.
message Plan {
  // 🔗 Uniqueresourceidentifier (uri/U) of the script.
  // The uniqueresourceidentifier has to be the url to fetch the file.
  // The extension(s) have to stand for the platform. Otherwise the adapter can't be determined.
  string uri = 1;
  // Optional version of the script.
  // If emtpy, latest will be used.
  string ver = 2;
  // Optional key in order to use the script.
  Key key = 3;
  // Optional parameters for the script with the name as a key and the values that belong to that key as value.
 Namevaluespairs prms = 4;
}

// 🤝 Decision (dcn,Dc) is an identifiable plan.
message Decision {
  // Identification that allows to distinguish it from other decisions.
  string id = 1;
  // Plan of decision
  Plan pla = 2;
}

// 🎞️ Arrangement (arr,Ar) is an identifiable sequence of decisions.
message Arrangement {
  // Identification that allows to distinguish it from other arrangements.
  string id = 1;
  // Decision sequence for the arrangement
  repeated Decision dcns = 2;
}

// 🛈 Sobject (sbj/S) of a layout.
// It has all semantical information for constructing an object.
message Sobject {
  // Identification that allows to distinguish it from other sobjects.
  string id = 1;
  // Plan for the definition script of the sobject.
  Plan def_pla = 2;
  // Plans for the modifications of the sobject. These modifications will be applied after the
  repeated Plan mods_plas = 3;
}

// ⚓ Port (pot/Po) for an attraction.
// A port is an abstract location inside or outside of a sobject where another sobject can connect to.
message Port {
  // Identification of the sobject which is the host of the port.
  string sbj_id = 1;
  // Parameters for the port.
 Namevaluespairs prms = 2;
}

// 🧑‍🤝‍🧑 Attraction (atr/A) for a layout.
// An attraction connects two ports where the 🧲 attracting (atn/An) sobject is attracting the 🪙 attracted (atd/Ad) sobject.
message Attraction {
  // Identification that allows to distinguish it from other attractions.
  string id = 1;
  // Port of the attracting sobject.
  Port atn_por = 2;
  // Port of the attracted sobject.
  Port atd_por = 3;
  // Optional transform for the attraction plane.
  semio.geometry.v1.Transform trm = 4;
}

// 🧑‍🏭 Assembly (asm/As) is a scene tree of sobjects.
message Assembly{
  // The id of the sobject to place.
  string sbj_id = 1;
  // Parts of an assembly are again assemblies.
  repeated Assembly parts = 2;
}

// 🖧 Layout (lyt/L) is a graph of sobjects (nodes) and attractions (slightly directed edges).
message Layout {
  // Sobjects (nodes) of the layout (graph).
  repeated Sobject sbjs = 1;
  // Attractions (edges) of the layout (graph).
  repeated Attraction atrs = 2;
}

// 🏘️ Type (typ,Ty) is a representation that was produced by a definition and a sequence of modifications.
// In conventional CAD programs, this is a block definition.
message Type {
  // Overall hash of the plans of definition and modifications.
  string plas_hsh = 1;
  // Hash of the plan of the definition.
  string def_pla_hsh = 2;
  // List of hashes of plans of the modifications.
  repeated string mods_plas_hshs = 3;
  // Representations of the type.
  repeated Representation reps = 4;
}

// ⌂ Object (obj/O) is an instance of a type.
// In conventional CAD programs, this is a block instance.
message Object {
  // Hash of the plan of the type for the object.
  string typ_plas_hsh = 1;
  // Identification of the sobject that was used to construct the object.
  string sbj_id = 2;
  // Plane of the object.
  semio.geometry.v1.Plane pln = 3;
}

// 🏙️ Design (dsn/D) is an aggregation of objects.
message Design {
  // Types from which objects occur inside of the design.
  repeated Type typs = 1;
  // Objects that form the design.
  repeated Object objs = 2;
}

// ⭕ Model (mdl/Ml) is oneof all data structures of the model namespace.
message Model {
  oneof mdl{
    Key key = 1;
    Plan pla = 2;
    Sobject sbj = 3;
    Port pot = 4;
    Attraction atr = 5;
    Assembly asm = 6;
    Layout lyt = 7;
    Type typ = 8;
    Object obj = 9;
    Design dsn = 10;
  }
}

// 🧬 Gene (gne,G) is an identifiable group of parameters.
message Gene {
  // Identification that allows to distinguish it from other genes.
  string id = 1;
  // Parameters of the gene.
 Namevaluespairs prms = 2;
}
  
// 📄 Specification (spc,Pl) of a plan.
message Specification {
  // Identification that allows to distinguish it from other specifications.
  string id = 1;
  // Optional extended plans of generations scripts.
  repeated ExtendedPlan ext_gnrs_plas = 2;
  // Optional identifications of genes.
  repeated string gnes_ids = 3;
  // Optional parameters for the script.
  Namevaluespairs prms = 4;
}

// A list of identifications of specifications.
message Specifications {
repeated string spcs_ids=1;
}

// Extended plan for a script.
message ExtendedPlan {
  // 🔗 Uniqueresourceidentifier (uri/U) of the script.
  // The uniqueresourceidentifier has to be the url to fetch the file.
  // The extension(s) have to stand for the platform. Otherwise the adapter can't be determined.
  string uri = 1;
  // Optional key in order to use the script.
  Key key = 2;
  // Optional identifiactions of specifications for the script.
  repeated string spcs_ids = 3;
}

// ☐ Prototype (ptp/P) is a (partial) set of specifications for an extended sobject.
message Prototype {
  // Identification that allows to distinguish it from other sobjects.
  string id = 1;
  // Optional identifiactions of specifications for the definition.
  repeated string def_spcs_ids = 2;
  // Optional map with uniqueresourceidentifier of modification as key and identifiactions of specifications for the modification as a key.
  map<string,Specifications> mods_spcs_ids = 3;
  // Optional plans of modifications.
  repeated ExtendedPlan mods_plas = 4;
}

// Extended sobject of an extended layout.
message ExtendedSobject {
  // Identification that allows to distinguish it from other extended sobjects.
  string id = 1;
  // Identifications for the prototypes of the sobject.
  repeated string ptys_ids = 2;
  // Extended plans for the factories of the sobject.
  repeated ExtendedPlan fcts_ext_plas = 3;
  // Extended plan for the definition script of the sobject.
  ExtendedPlan def_ext_pla = 4;
  // Extended plans for the modifications of the sobject. These modifications will be applied after the
  repeated ExtendedPlan mods_plas = 5;
}

// Extended port for an extended attraction.
message ExtendedPort {
  // Identification of the extended sobject which is the host of the extended port.
  string ext_sbj_id = 1;
  // Identifications of specifications of the port.
  repeated string spcs_ids = 2;
}

// 🪢 Knot (knt/Po) for an extended attraction.
// A knot is predefined
message Knot {
  // Identification that allows to distinguish it from other knots.
  string id = 1;
  // Identifications of specifications of the attracting (atn) sobject of the attraction.
  repeated string atn_spcs_ids = 2;
  // Identifications of specifications of the attracted (atd) sobject of the attraction.
  repeated string atd_spcs_ids = 3;
  // Optional transforms for the attraction plane.
  repeated semio.geometry.v1.Transform trms = 4;
}

// Extended attraction for an extended layout.
message ExtendedAttraction {
  // Identification that allows to distinguish it from other attractions.
  string id = 1;
  // Plans for stitchings of attraction.
  repeated ExtendedPlan stcs_ext_plas = 2;
  // Identifications of the knots of the attraction.
  repeated string knts_ids = 3;
  // Port of the attracting sobject.
  ExtendedPort atn_ext_por = 4;
  // Port of the attracted sobject.
  ExtendedPort atd_ext_por = 5;
}

// Extended layout is a graph of extended sobjects (nodes) and extended attractions (slightly directed edges).
message ExtendedLayout {
  // Sobjects (nodes) of the layout (graph).
  repeated ExtendedSobject ext_sbjs = 1;
  // Attractions (edges) of the layout (graph).
  repeated ExtendedAttraction ext_atrs = 2;
}

// Extended model is oneof all data structures of the extended model namespace.
message ExtendedModel {
  oneof ext_mdl{
    Gene gne = 1;
    Specification spc = 2;
    Specifications spcs = 3;
    ExtendedPlan ext_pla = 4;
    Prototype ptp = 5;
    ExtendedSobject ext_sbj = 6;
    ExtendedPort ext_pot = 7;
    Knot knt = 8;
    ExtendedAttraction ext_atr = 9;
    ExtendedLayout ext_lyt = 10;
  }
}

// 🖥️ Compuation (cmp/C) of a script.
// A look-up table for one computation of a script based on inputs there are outputs.
message Computation{
 Namevaluespairs in = 1;
 Namevaluespairs out = 2;
}

// 📖 Dictionary (dic/Di) of computations.
message Dictionary{
  // Dictionary of computations where the URI:VERSION is the key and Computation is the value.
  map <string,Computation> dic = 1;
}