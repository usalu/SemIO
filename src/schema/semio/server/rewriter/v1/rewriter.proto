syntax = "proto3";

package semio.server.rewriter.v1;

option go_package = "github.com/usalu/semio/src/packages/go/server/rewriter/v1";
option csharp_namespace = "Semio.Server.Rewriter.V1";

import "model/v1/model.proto";

// ➡️ Rewriter (trf/T) service rewrites (transforms) layouts (graphs).
service RewriterService {
  rpc RewriteLayout(RewriteLayoutRequest) returns (semio.model.v1.Layout);
}

// A rewrite layout request is a description for layout (graph) rewrites.
message RewriteLayoutRequest {
  semio.model.v1.Layout lyt = 1;
  repeated Rule trfs = 2;
}

enum RuleType {
    RULETYPE_MODIFICATION = 0;
    RULETYPE_STRICT = 1;
}

// Rewrite rule.
message Rule {
  // Left hand side of rewrite rule.
  semio.model.v1.Layout lhs = 1;
  // Right hand side of rewrite rule.
  semio.model.v1.Layout rhs = 2;
  // Rule type of rewrite rule
  semio.model.v1.RuleType rt = 3;
  // Define the way the transformation should be applied.
  oneof app{
      // Greedy will match as often as possible. This is dangerous because it can be stuck in recursion.
      bool gdy = 4;
      // Number of matches
      int32 num_mtchs = 5;
  }
}