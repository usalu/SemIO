syntax = "proto3";

package semio.manager.v1;

option go_package = "github.com/usalu/semio/src/schema/semio/manager/v1";

import "model/v1/model.proto";

// A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
service ManagerService {
  // Request an element from instance information and a traget type.
  rpc RequestElement(ElementRequest) returns (semio.model.v1.Representation);

  //Request the attracted element for an attraction.
  rpc RequestAttraction(AttractionRequest) returns (AttractionResponse);

  // Register a service to the server.
  rpc RegisterExtension(ExtensionRegistrationRequest) returns (ExtensionRegistrationResponse);

  // Get all registered extensions.
  rpc GetRegisteredExtensions(GetRegisteredExtensionsRequest) returns (ExtendingServices);
}

message ElementRequest{
  semio.model.v1.Sobject sobject = 1;
  string target_type_url = 2;
}

message AttractionRequest{
  semio.model.v1.Attraction attraction = 1;
  string target_type_url = 2;
}

message AttractionResponse{
  semio.model.v1.Pose attracted_pose = 1;
  semio.model.v1.Point attraction_point = 2;
}


message ConvertingService{
  string source_type_url = 1;
  string target_type_url = 2;
}

message TransformingService{
}

message ExtendingService{
  string name = 1;
  string address = 2;
  repeated AdaptingService adaptingServices = 3;
  repeated ConvertingService convertingServices = 4;
  repeated TransformingService transformingServices = 5;
  repeated TranslatingService translatingServices = 6;
}

message ExtendingServices {
  repeated ExtendingService extendingServices = 1;
}

message ExtensionRegistrationRequest{
  bool replace_existing = 1;
  ExtendingService extendingService = 2;
}

message ExtensionRegistrationResponse{
  bool success = 1;
  // The old address of the same service type if there was one.
  string old_address = 2;
}

message GetRegisteredExtensionsRequest{
}