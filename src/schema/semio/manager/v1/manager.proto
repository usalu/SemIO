syntax = "proto3";

package semio.manager.v1;

option go_package = "github.com/usalu/semio/src/packages/go/manager/v1";
option csharp_namespace = "Semio.Manager.V1";

import "model/v1/model.proto";
import "extension/v1/extension.proto";

// A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
service ManagerService {
  
  // Request an element from instance information and an optional traget representation parameters.
  rpc RequestElement(ElementRequest) returns (semio.model.v1.Element);

  // Get the connected pose and the connection point for a connection.
  rpc ConnectElement(ConnectElementRequest) returns (ConnectElementResponse);

  // Register a service to the server.
  rpc RegisterExtension(RegisterExtensionRequest) returns (RegisterExtensionResponse);

  // Get all registered extensions.
  rpc GetRegisteredExtensions(GetRegisteredExtensionsRequest) returns (RegisteredExtensionsResponse);
}

message ElementRequest{
  semio.model.v1.Sobject sobject = 1;
  // The target platform tries to be provided by one of the following strategies (lowest number wins).
  // 1. The element directly (1.1) or the extension can convert directly (1.2) or indirectly (1.3) 
  // 2. Another extension can convert these types directly (2.1) or indirectly (2.2)
  // 3. Multiple extensions together can convert directly (3.1) or indirectly (3.2).
  repeated semio.model.v1.Platform target_representation_platforms = 2;
  // Optional concepts for the representations. If this can't be unchieved, the default one will be picked unless the target required parameter is set to true.
  repeated string target_representation_concepts = 3;
  // An optional level of detail for the target representation. If this can't be unchieved, the closest one will be picked unless the target required parameter is set to true.
  repeated int32 target_representation_lods = 4;
  // Set this to true if all of the targets must be achived.
  bool targets_required = 5;
}

message ConnectElementRequest{
  semio.model.v1.Sobject connected_sobject = 1;
  semio.model.v1.Sobject connecting_sobject = 2;
  semio.model.v1.Connection connection = 3;
}

message ConnectElementResponse{
  semio.model.v1.Pose connected_element_pose = 1;
  semio.model.v1.Point connection_point = 2;
}

message RegisterExtensionRequest{
  semio.extension.v1.Extending extending = 1;
  bool replace_existing = 2;
}

message RegisterExtensionResponse{
  bool success = 1;
  // The old address of the same service type if there was one.
  string old_address = 2;
}

message GetRegisteredExtensionsRequest{
}

message RegisteredExtensionsResponse{
  // A map with extensions where the address is the key and the extension description is the value.
  map <string,semio.extension.v1.Extending> extensions = 1;
}