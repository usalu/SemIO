syntax = "proto3";

package semio.manager.v1;

option go_package = "github.com/usalu/semio/src/packages/go/manager/v1";
option csharp_namespace = "Semio.Manager.V1";

import "geometry/v1/geometry.proto";
import "model/v1/model.proto";
import "extension/v1/extension.proto";

// A manager service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
service ManagerService {
  
  // Request an element from instance information and an optional traget representation parameters.
  rpc RequestPrototype(PrototypeRequest) returns (semio.model.v1.Prototype);

  // Get the connected pose and the connection point for a connection.
  rpc ConnectElement(ConnectElementRequest) returns (ConnectElementResponse);

  // Register a service to the server.
  rpc RegisterExtension(RegisterExtensionRequest) returns (RegisterExtensionResponse);

  // Get all registered extensions.
  rpc GetRegisteredExtensions(GetRegisteredExtensionsRequest) returns (RegisteredExtensionsResponse);
}

message PrototypeRequest{
  semio.model.v1.Plan plan = 1;
  semio.model.v1.Platform target_platform = 2;
}

message ConnectElementRequest{
  semio.model.v1.Sobject connected_sobject = 1;
  semio.model.v1.Sobject connecting_sobject = 2;
  semio.model.v1.Connection connection = 3;
}

message ConnectElementResponse{
  semio.model.v1.Pose connected_element_pose = 1;
  semio.geometry.v1.Point connection_point = 2;
}

message RegisterExtensionRequest{
  semio.extension.v1.Extending extending = 1;
  bool replace_existing = 2;
}

message RegisterExtensionResponse{
  bool success = 1;
  // The old address of the same service type if there was one.
  string old_address = 2;
}

message GetRegisteredExtensionsRequest{
}

message RegisteredExtensionsResponse{
  // A map with extensions where the address is the key and the extension description is the value.
  map <string,semio.extension.v1.Extending> extensions = 1;
}