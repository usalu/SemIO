syntax = "proto3";

package semio.manager.v1;

option go_package = "github.com/usalu/semio/src/packages/go/manager/v1";
option csharp_namespace = "Semio.Manager.V1";

import "geometry/v1/geometry.proto";
import "model/v1/model.proto";
import "extension/v1/extension.proto";

// üßë‚Äçüíº Manager (mngr/Mr) service is responsible for calling extensions, storing/caching results while offering a cleaner interface to the server.
service ManagerService{
  // Compute a generation.
  rpc ComputeGeneration(semio.model.v1.Plan) returns (semio.model.v1.Gene);
  // Compute a scheme.
  rpc ComputeScheme(semio.model.v1.Plan) returns (semio.model.v1.Arrangement);
  // Compute a transformation.
  rpc ComputeTransformation(TransformationRequest) returns (semio.model.v1.Layout);
  // Compute a stitching.
  rpc ComputeStitching(semio.model.v1.Plan) returns (semio.model.v1.Knot);
  // Compute a factory.
  rpc ComputeFactory(PrototypeRequest) returns (semio.model.v1.Prototype);
  // Compute a representation from a definition.
  rpc ComputeDefinitionRepresentations(semio.model.v1.Plan) returns (ComputeDefinitionRepresentationsResponse);
  // Compute a connection plane from a definition.
  rpc ComputeDefinitionConnectionPlane(DefinitionConnectionPlaneRequest) returns (semio.geometry.v1.Plane);
  // Compute a modification.
  rpc ComputeModification(ModificationRequest) returns (semio.model.v1.Representation);

  // Register a service to the server.
  rpc RegisterExtension(RegisterExtensionRequest) returns (RegisterExtensionResponse);
  // Get all registered extensions.
  rpc GetRegisteredExtensions(GetRegisteredExtensionsRequest) returns (RegisteredExtensionsResponse);
}

message ComputeDefinitionRepresentationsRequest{
  semio.model.v1.Plan pln = 1;
  // Optional languages. If script doesn't provide then converters are used.
  // If the language can't be converted then an error is thrown.
  repeated semio.model.v1.Language lngs = 2;
}

message ComputeDefinitionRepresentationsResponse{
  repeated semio.model.v1.Representation reps = 1;
}

message TransformationRequest{
  semio.model.v1.Layout lyt = 1;
  semio.model.v1.Plan pln = 2;
}

message PrototypeRequest{
  semio.model.v1.Plan pln = 1;
}

message RegisterExtensionRequest{
  semio.extension.v1.Extending extending = 1;
  bool replace_existing = 2;
}

message RegisterExtensionResponse{
  bool success = 1;
  // The old address of the same service type if there was one.
  string old_address = 2;
}

message GetRegisteredExtensionsRequest{
}

message RegisteredExtensionsResponse{
  // A map with extensions where the address is the key and the extension description is the value.
  map <string,semio.extension.v1.Extending> extensions = 1;
}