syntax = "proto3";

package semio.model.v1;

option go_package = "github.com/usalu/semio/src/schema/semio/model/v1";

import "google/protobuf/any.proto";

message Point {
  double x = 1;
  double y = 2;
  double z = 3;
}

// Could reference the google.type.Quaternion with the difference that w is not at the beginning but end.
message Quaternion {
  double w = 1;
  double x = 2;
  double y = 3;
  double z = 4;
}

// A pose is a reference frame with an point of view (origin) and orientation (view).
message Pose {
  Point point_of_view = 1;
  Quaternion view = 2;
}

// A representation for an element.
message Representation {
  string name = 1;
  int64 lod = 2;
  google.protobuf.Any body = 3;
}

// Several representations for an element.
message Representations {
  repeated Representation representations = 1;
}

// Instance information of an element.
message Sobject {
  string id = 1;
  string url = 2;
  Pose pose = 3;
  map<string, google.protobuf.Any> parameters = 4;
}

message AttractionParameters {
   // An optional representation of the participant.
   google.protobuf.Any representation = 1;
   // An optional port name to connect to.
   string port = 2;
   // Optional parameters to bias the attraction.
   map<string, google.protobuf.Any> bias = 3;
}

// An attraction participant participates in an attraction process.
message AttractionParticipant {
  // Id of participating sobject.
  string patricipant_id = 1;
  AttractionParameters parameters = 2;
  
}

// An attraction can be used to attract an attracted attraction participant to an attractor attraction participant.
message Attraction {
  // Id of attraction.
  string id = 1;
  AttractionParticipant attractor = 2;
  AttractionParticipant attracted = 3;
}

// A layout strategy affects in which orders attractions are triggered.
enum LayoutStragey {
  LAYOUTSTRATEGY_BREADTHFIRST = 0;
  LAYOUTSTRATEGY_DEPTHFIRST = 1;
}

// A layout (graph) is an ambiguous and redudant assembly plan for a set of sobjects and their attractions between each other.
message Layout {
  repeated Sobject sobjects = 1;
  repeated Attraction attractions = 2;
  LayoutStragey stragegy = 3;
  // Optional attraction trees with root sobject id as key and attraction tree as value.
  map<string,AttractionTree> attractionTrees = 4;
}

message AttractionTree{
  string attraction_id = 1;
  repeated AttractionTree childrean = 2;
}

// An element is the atom of a design. It has several representations and a pose.
message Element {
  Pose pose = 1;
  Representations representations = 2;
}

// A design is an aggregation of elements.
message Design {
  repeated Element elements = 1;
}

// A layout modification describes declaratively a layout and the layout after its modification. The rules on how to imperatively change such a layout need to found by the transformation system.
message LayoutModification {
  Layout context = 1;
  Layout modified_context = 2;
}

// A decision strategy holds information on how modifications are applied.
message LayoutModificationStrategy {
  // The match count describes how often a layout modification should be applied. It beeing finite will make sure that the system always terminates. Make sure to set the threshold high enough.
  int64 match_count = 1;
}

// A decision is a layout modification with a strategy on how to apply it to a new layout.
message Decision {
  LayoutModification modification = 1;
  LayoutModificationStrategy strategy = 2;
}
