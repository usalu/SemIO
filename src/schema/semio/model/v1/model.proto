// General abbreviations:
// 👤 Author (aut/Au)
// ✍️ Concept (cpt/Cp)
// 🗺️ Context (ctx/Cx)
// 📝 Description (dcp/Dp)
// 🆔 Identification (id/ID)
// 🗄️ Metadata (md,MD)
// ⏓ Order (odr,Or)
// ⏕ Ordering (odn,On)
// ⌚ Timestamp (ts,TS)

syntax = "proto3";

package semio.model.v1;

option go_package = "github.com/usalu/semio/src/packages/go/model/v1";
option csharp_namespace = "Semio.Model.V1";

import "geometry/v1/geometry.proto";

// 🔑 Key (key/K) for authentication of scripts.
message Key {
  oneof key {
    // Password (pwd/Pw) to unlock the script file.
    string pwd = 1;
    // Apikey (apik/AK) in order to use a script api.
    string api_key = 2;
  }
}

// 🛠️ Plan (pla,Pl) for a script.
message Plan {
  // 🔗 Uniqueresourceidentifier (uri/U) of the script.
  // The uniqueresourceidentifier has to be the url to fetch the file.
  // The extension(s) have to stand for the platform. Otherwise the adapter can't be determined.
  string uri = 1;
  // Optional key in order to use the script.
  Key key = 2;
  // Optional namevaluepairs.
  repeated Namevaluepair nvps = 3;
}

// 🤝 Decision (dcn,Dc) is an identifiable plan.
message Decision {
  // Identification that allows to distinguish it from other decisions.
  string id = 1;
  // Plan of decision
  Plan pla = 2;
}

// 🎞️ Arrangement (arr,Ar) is a sequence of decisions.
message Arrangement {
  // Identification that allows to distinguish it from other arrangements.
  string id = 1;
  // Plan of arrangement
  repeated Decision dcns = 2;
}

// 🛈 Sobject (sbj/S) of a layout.
// It has all semantical information for constructing an object.
message Sobject {
  // Identification that allows to distinguish it from other sobjects.
  string id = 1;
  // Plan for the definition script of the sobject.
  Plan def_pla = 2;
  // Plans for the modifications of the sobject. These modifications will be applied after the
  repeated Plan mods_plas = 3;
}

// ⚓ Port (pot/Po) for an attraction.
// A port is an abstract location inside or outside of a sobject where another sobject can connect to.
message Port {
  // Identification of the sobject which is the host of the port.
  string sbj_id = 1;
  // Identifications of specifications of the port.
  repeated Namevaluepair nvps = 2;
}

// 🧑‍🤝‍🧑 Attraction (atr/A) for a layout.
// An attraction connects two ports where the 🧲 attracting (atn/An) sobject is attracting the 🪙 attracted (atd/Ad) sobject.
message Attraction {
  // Identification that allows to distinguish it from other attractions.
  string id = 1;
  // Port of the attracting sobject.
  Port atn_por = 2;
  // Port of the attracted sobject.
  Port atd_por = 3;
  // Optional transform for the attraction plane.
  semio.geometry.v1.Transform trm = 4;
}

// 🧑‍🏭 Assembly (asm/As) is a scene tree of sobjects.
message Assembly{
  // The id of the sobject to place.
  string sbj_id = 1;
  // Parts of an assembly are again assemblies.
  repeated Assembly parts = 2;
}

// 🖧 Layout (lyt/L) is a graph of sobjects (nodes) and attractions (slightly directed edges).
message Layout {
  // Sobjects (nodes) of the layout (graph).
  repeated Sobject sbjs = 1;
  // Attractions (edges) of the layout (graph).
  repeated Attraction atrs = 2;
}

// 🏘️ Type (typ,Ty) is a representation that was produced by a definition and a sequence of modifications.
// In conventional CAD programs, this is a block definition.
message Type {
  // Overall hash of the plans of definition and modifications.
  string plas_hsh = 1;
  // Hash of the plan of the definition.
  string def_pla_hsh = 2;
  // List of hashes of plans of the modifications.
  repeated string mods_plas_hshs = 3;
  // Representations of the type.
  repeated Representation reps = 4;
}

// ⌂ Object (obj/O) is an instance of a type.
// In conventional CAD programs, this is a block instance.
message Object {
  // Hash of the plan of the type for the object.
  string typ_plas_hsh = 1;
  // Identification of the sobject that was used to construct the object.
  string sbj_id = 2;
  // Plane of the object.
  semio.geometry.v1.Plane pln = 3;
}

// 🏙️ Design (dsn/D) is an aggregation of objects.
message Design {
  // Types from which objects occur inside of the design.
  repeated Type typs = 1;
  // Objects that form the design.
  repeated Object objs = 2;
}

// ⭕ Model (mdl/Ml) is oneof all data structures of the model namespace.
message Model {
  oneof mdl{
    Key key = 1;
    Plan pla = 2;
    Sobject sbj = 3;
    Port pot = 4;
    Attraction atr = 5;
    Assembly asm = 6;
    Layout lyt = 7;
    Type typ = 8;
    Object obj = 9;
    Design dsn = 10;
  }
}