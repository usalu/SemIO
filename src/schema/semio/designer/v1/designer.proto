syntax = "proto3";

package semio.designer.v1;

option go_package = "github.com/usalu/semio/src/packages/go/designer/v1";
option csharp_namespace = "Semio.Designer.V1";

import "model/v1/model.proto";

// ✏️ Designer (dsnr/Dr) service is responsible for synthesizing designs.
service DesignerService{
  // Synthesize a design
  rpc SynthesizeDesign(SynthesizeDesignRequest) returns (SynthesizeDesignResponse);
}

// Request for computing a script.
// Either a layout or a scheme or both is required to synthesize a design.
message SynthesizeDesignRequest {
  // Optional initial layout
  semio.model.v1.Layout ini_lyt = 1;
  // Optional plan of the scheme.
  semio.model.v1.Plan sme_pla = 2;
  // Optional specifications for the design
  repeated semio.model.v1.Specification spcs = 3;
  // Optional prototypes for the design
  repeated semio.model.v1.Prototype ptps = 4;
  // Optional knots for the design
  repeated semio.model.v1.Knot knts = 5;
  // Optional genes for the design
  repeated semio.model.v1.Gene gnes = 6;
}

// Response from computing a script.
message SynthesizeDesignResponse {
  // Synthesized design
  semio.model.v1.Design design = 1;
  // Map of identification of the attraction as a key and attraction plane as value.
  map<string,Plane> atrs_plns = 2;
}