syntax = "proto3";

package semio.model.v1;

import "google/protobuf/any.proto";

message Point{
    double x = 1;
    double y = 2;
    double z = 3;
}

// Could reference the google.type.Quaternion with the difference that w is not at the beginning but end.
message Quaternion{
    double w = 1;
    double x = 2;
    double y = 3;
    double z = 4;
}

message Pose{
    Point point_of_view = 1;
    Quaternion view = 2;
}

//Might just add verbosity and increase boilerplate code for clients
// message Parameter{
//     string name = 1;
//     google.protobuf.Any value = 2;
//     string type = 3;
// }

// A representation for an element.
message Representation{
    string type = 1;
    google.protobuf.Any body = 2;
    string name = 3;
    int64 lod = 4;
    google.protobuf.Any metadata = 5;
}

// Several representations for an element.
message Representations{
    repeated Representation representations = 1;
}

// Instance information of an element.
message Sobject{
    string id = 1;
    Pose pose = 2;
    map<string,google.protobuf.Any> parameters = 3;
}

// An attraction strategy of an attraction participant defines parameters that affect the attraction process.
message AttractionStragegy{
    // An optional representation of the participant. 
    Representation representation = 1;
    // An optional port name to connect to.
    string port = 2;
    // Optional parameters to bias the attraction.
    map<string,google.protobuf.Any> parameters = 3;
}

// An attraction participant participates in an attraction process.
message AttractionParticipant{
    // Participating sobject
    string sobject_id = 1;
    // Attraction strategy of participant
    AttractionStragegy strategy = 2;
}

// An attraction can be used to attract an attracted attraction participant to an attractor attraction participant.
message Attraction{
    AttractionParticipant attractor = 1;
    AttractionParticipant attracted = 2;
}

// A layout (graph) is an ambiguous and redudant assembly plan for a set of sobjects and their attractions between each other.
message Layout{
    repeated Sobject sobjects = 1;
    repeated Attraction attractions = 2;
}

// An attraction chain is list of attractions where each attraction depends on the previous attraction.
message AttractionChain{
    repeated Attraction attractions = 1;
}

message Choreography{
    repeated Sobject solitary_sobjects = 1;
    repeated AttractionChain attractionChains = 2;
}

message Element{
    Pose pose = 1;
    Representations representations = 2;
}

message Design{
    repeated Element elements = 1;
}

// TODO Think about a generalized, descriptive way of representing graph rewrite rules with the goal to depend on very little functionality to make it easier to implement this service.
// message LayoutModification{
//     Layout context_layout = 1;
//     Layout modified_context_layout = 2;
// }

// message DecisionStrategy{
//     bool expire
// }

// message Decision{
//     LayoutModification layout_modification = 1;

// }