{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/ResourceDescriptor",
    "definitions": {
        "ResourceDescriptor": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The resource type. It must be in the format of {service_name}/{resource_type_kind}. The `resource_type_kind` must be singular and must not include version numbers. Example: `storage.googleapis.com/Bucket` The value of the resource_type_kind must follow the regular expression /[A-Za-z][a-zA-Z0-9]+/. It should start with an upper case character and should use PascalCase (UpperCamelCase). The maximum number of characters allowed for the `resource_type_kind` is 100."
                },
                "pattern": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Optional. The relative resource name pattern associated with this resource type. The DNS prefix of the full resource name shouldn't be specified here. The path pattern must follow the syntax, which aligns with HTTP binding syntax:     Template = Segment { \"/\" Segment } ;     Segment = LITERAL | Variable ;     Variable = \"{\" LITERAL \"}\" ; Examples:     - \"projects/{project}/topics/{topic}\"     - \"projects/{project}/knowledgeBases/{knowledge_base}\" The components in braces correspond to the IDs for each resource in the hierarchy. It is expected that, if multiple patterns are provided, the same component name (e.g. \"project\") refers to IDs of the same type of resource."
                },
                "name_field": {
                    "type": "string",
                    "description": "Optional. The field on the resource that designates the resource name field. If omitted, this is assumed to be \"name\"."
                },
                "history": {
                    "enum": [
                        "HISTORY_UNSPECIFIED",
                        0,
                        "ORIGINALLY_SINGLE_PATTERN",
                        1,
                        "FUTURE_MULTI_PATTERN",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "History",
                    "description": "A description of the historical or future-looking state of the resource pattern."
                },
                "plural": {
                    "type": "string",
                    "description": "The plural name used in the resource name and permission names, such as 'projects' for the resource name of 'projects/{project}' and the permission name of 'cloudresourcemanager.googleapis.com/projects.get'. It is the same concept of the `plural` field in k8s CRD spec https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/ Note: The plural form is required even for singleton resources. See https://aip.dev/156"
                },
                "singular": {
                    "type": "string",
                    "description": "The same concept of the `singular` field in k8s CRD spec https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/ Such as \"project\" for the `resourcemanager.googleapis.com/Project` type."
                },
                "style": {
                    "items": {
                        "enum": [
                            "STYLE_UNSPECIFIED",
                            0,
                            "DECLARATIVE_FRIENDLY",
                            1
                        ]
                    },
                    "type": "array",
                    "title": "Style",
                    "description": "A flag representing a specific style that a resource claims to conform to."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Resource Descriptor",
            "description": "A simple descriptor of a resource type. ResourceDescriptor annotates a resource message (either by means of a protobuf annotation or use in the service config), and associates the resource's schema, the resource type, and the pattern of the resource name. Example:     message Topic {       // Indicates this message defines a resource schema.       // Declares the resource type in the format of {service}/{kind}.       // For Kubernetes resources, the format is {api group}/{kind}.       option (google.api.resource) = {         type: \"pubsub.googleapis.com/Topic\"         pattern: \"projects/{project}/topics/{topic}\"       };     } The ResourceDescriptor Yaml config will look like:     resources:     - type: \"pubsub.googleapis.com/Topic\"       pattern: \"projects/{project}/topics/{topic}\" Sometimes, resources have multiple patterns, typically because they can live under multiple parents. Example:     message LogEntry {       option (google.api.resource) = {         type: \"logging.googleapis.com/LogEntry\"         pattern: \"projects/{project}/logs/{log}\"         pattern: \"folders/{folder}/logs/{log}\"         pattern: \"organizations/{organization}/logs/{log}\"         pattern: \"billingAccounts/{billing_account}/logs/{log}\"       };     } The ResourceDescriptor Yaml config will look like:     resources:     - type: 'logging.googleapis.com/LogEntry'       pattern: \"projects/{project}/logs/{log}\"       pattern: \"folders/{folder}/logs/{log}\"       pattern: \"organizations/{organization}/logs/{log}\"       pattern: \"billingAccounts/{billing_account}/logs/{log}\""
        }
    }
}