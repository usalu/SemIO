type Query {
  loadLocalKit(directory: String!): LoadLocalKitResponse
  designToSceneFromLocalKit(directory: String!, designIdInput: DesignIdInput!): DesignToSceneFromLocalKitResponse
}

type LoadLocalKitResponse {
  kit: Kit
  error: LoadLocalKitError
}

"""üóÉÔ∏è A kit is a collection of types and designs."""
type Kit {
  name: String!
  description: String!
  icon: String!
  createdAt: DateTime!
  lastUpdateAt: DateTime!
  url: String!
  homepage: String!
  types: [Type!]!
  designs: [Design!]!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
üß© A type is a reusable element that can be connected with other types over ports.
"""
type Type {
  name: String!
  description: String!
  icon: String!
  variant: String!
  unit: String!
  createdAt: DateTime!
  lastUpdateAt: DateTime!
  kit: Kit
  representations: [Representation!]!
  ports: [Port!]!
  qualities: [Quality!]!
  pieces: [Piece!]!
}

"""
üíæ A representation is a link to a file that describes a type for a certain level of detail and tags.
"""
type Representation {
  url: String!
  mime: String!
  lod: String!
  type: Type
  tags: [String!]!
}

"""
üîå A port is a conceptual connection point (with a direction) of a type.
"""
type Port {
  type: Type
  locators: [Locator!]!
  connecteds: [Connection!]!
  connectings: [Connection!]!
  id: String!
  point: Point!
  direction: Vector!
  plane: Plane!
}

"""üó∫Ô∏è A locator is meta-data for grouping ports."""
type Locator {
  group: String!
  subgroup: String!
  port: Port
}

"""üñáÔ∏è A connection between two pieces of a design."""
type Connection {
  offset: Float!
  rotation: Float!
  design: Design
  connected: Side!
  connecting: Side!
}

"""üèôÔ∏è A design is a collection of pieces that are connected."""
type Design {
  name: String!
  description: String!
  icon: String!
  variant: String!
  unit: String!
  createdAt: DateTime!
  lastUpdateAt: DateTime!
  kit: Kit
  pieces: [Piece!]!
  connections: [Connection!]!
  qualities: [Quality!]!
}

"""‚≠ï A piece is a 3d-instance of a type in a design."""
type Piece {
  type: Type
  design: Design
  connectings: [Connection!]!
  connecteds: [Connection!]!
  id: String!
  root: PieceRoot
  diagram: PieceDiagram!
}

"""üå± A root piece in a design."""
type PieceRoot {
  plane: Plane!
}

"""‚ó≥ A plane is an origin (point) and an orientation (x-axis and y-axis)."""
type Plane {
  origin: Point!
  xAxis: Vector!
  yAxis: Vector!
}

"""‚úñÔ∏è A 3d-point (xyz) of floating point numbers."""
type Point {
  x: Float!
  y: Float!
  z: Float!
}

"""‚û°Ô∏è A 3d-vector (xyz) of floating point numbers."""
type Vector {
  x: Float!
  y: Float!
  z: Float!
}

"""‚úèÔ∏è The diagram indesign of a piece."""
type PieceDiagram {
  point: ScreenPoint!
}

"""üì∫ A 2d-point (xy) of integers in screen plane."""
type ScreenPoint {
  x: Int!
  y: Int!
}

"""üìè A quality is meta-data for decision making."""
type Quality {
  name: String!
  value: String!
  unit: String!
  definition: String!
  type: Type
  design: Design
}

"""üß± A side of a piece in a connection."""
type Side {
  piece: SidePiece!
}

"""
‚≠ï The piece indesign of a side. A piece is identified by an id (emtpy=default)).
"""
type SidePiece {
  id: String!
  type: SidePieceType!
}

"""üß© The type indesign of a piece of a side."""
type SidePieceType {
  port: Port
}

enum LoadLocalKitError {
  DIRECTORY_DOES_NOT_EXIST
  DIRECTORY_IS_NOT_A_DIRECTORY
  DIRECTORY_HAS_NO_KIT
  NO_PERMISSION_TO_READ_KIT
}

type DesignToSceneFromLocalKitResponse {
  scene: Scene
  error: DesignToSceneFromLocalKitResponseError
}

"""üåÜ A scene is a collection of objects."""
type Scene {
  objects: [Object]!
  design: Design
}

"""
üóø An object is a piece with a plane and a parent object (unless the piece is a root).
"""
type Object {
  plane: Plane!
  piece: Piece
  parent: Object
}

type DesignToSceneFromLocalKitResponseError {
  code: DesignToSceneFromLocalKitResponseErrorCode!
  message: String
}

enum DesignToSceneFromLocalKitResponseErrorCode {
  DIRECTORY_DOES_NOT_EXIST
  DIRECTORY_IS_NOT_A_DIRECTORY
  DIRECTORY_HAS_NO_KIT
  NO_PERMISSION_TO_READ_KIT
  DESIGN_DOES_NOT_EXIST
}

"""üèôÔ∏è A design is identified by a name and optional variant."""
input DesignIdInput {
  name: String!
  variant: String = ""
}

type Mutation {
  createLocalKit(directory: String!, kitInput: KitInput!): CreateLocalKitMutation
  updateLocalKitMetadata(directory: String!, kitMetadataInput: KitMetadataInput!): UpdateLocalKitMetadataMutation
  deleteLocalKit(directory: String!): DeleteLocalKitMutation
  addTypeToLocalKit(directory: String!, typeInput: TypeInput!): AddTypeToLocalKitMutation
  removeTypeFromLocalKit(directory: String!, typeId: TypeIdInput!): RemoveTypeFromLocalKitMutation
  addDesignToLocalKit(designInput: DesignInput!, directory: String!): AddDesignToLocalKitMutation
  removeDesignFromLocalKit(designId: DesignIdInput!, directory: String!): RemoveDesignFromLocalKitMutation
}

type CreateLocalKitMutation {
  kit: Kit
  error: CreateLocalKitError
}

type CreateLocalKitError {
  code: CreateLocalKitErrorCode!
  message: String
}

enum CreateLocalKitErrorCode {
  DIRECTORY_IS_NOT_A_DIRECTORY
  DIRECTORY_ALREADY_CONTAINS_A_KIT
  NO_PERMISSION_TO_CREATE_DIRECTORY
  NO_PERMISSION_TO_CREATE_KIT
  KIT_INPUT_IS_INVALID
}

"""üóÉÔ∏è A kit is a collection of types and designs."""
input KitInput {
  name: String!
  description: String
  icon: String
  url: String
  homepage: String
  types: [TypeInput!]
  designs: [DesignInput!]
}

"""
üß© A type is a reusable element that can be connected with other types over ports.
"""
input TypeInput {
  name: String!
  description: String
  icon: String
  variant: String = ""
  unit: String!
  representations: [RepresentationInput!]!
  ports: [PortInput!]!
  qualities: [QualityInput!]
}

"""
üíæ A representation is a link to a file that describes a type for a certain level of detail and tags.
"""
input RepresentationInput {
  url: String!
  mime: String
  lod: String
  tags: [String!]
}

"""
üîå A port is a conceptual connection point (with a direction) of a type.
"""
input PortInput {
  id: String = ""
  point: PointInput!
  direction: VectorInput!
  locators: [LocatorInput!]
}

"""‚úñÔ∏è A 3d-point (xyz) of floating point numbers."""
input PointInput {
  x: Float = 0
  y: Float = 0
  z: Float = 0
}

"""‚û°Ô∏è A 3d-vector (xyz) of floating point numbers."""
input VectorInput {
  x: Float = 0
  y: Float = 0
  z: Float = 0
}

"""üó∫Ô∏è A locator is meta-data for grouping ports."""
input LocatorInput {
  group: String!
  subgroup: String
}

"""üìè A quality is meta-data for decision making."""
input QualityInput {
  name: String!
  value: String
  unit: String
  definition: String
}

"""üèôÔ∏è A design is a collection of pieces that are connected."""
input DesignInput {
  name: String!
  description: String
  icon: String
  variant: String = ""
  unit: String!
  pieces: [PieceInput!]!
  connections: [ConnectionInput!]!
  qualities: [QualityInput!]
}

"""‚≠ï A piece is a 3d-instance of a type in a design."""
input PieceInput {
  id: String!
  type: TypeIdInput!
  root: PieceRootInput = null
  diagram: PieceDiagramInput!
}

"""üß© A type is identified by a name and variant (empty=default)."""
input TypeIdInput {
  name: String!
  variant: String = ""
}

"""üå± The root of a piece is a plane."""
input PieceRootInput {
  plane: PlaneInput!
}

"""‚ó≥ A plane is an origin (point) and an orientation (x-axis and y-axis)."""
input PlaneInput {
  origin: PointInput!
  xAxis: VectorInput!
  yAxis: VectorInput!
}

"""‚úèÔ∏è The diagram indesign of a piece."""
input PieceDiagramInput {
  point: ScreenPointInput!
}

"""üì∫ A 2d-point (xy) of integers in screen plane."""
input ScreenPointInput {
  x: Int = 0
  y: Int = 0
}

"""üñáÔ∏è A connection between two pieces of a design."""
input ConnectionInput {
  connecting: SideInput!
  connected: SideInput!
  offset: Float = 0
  rotation: Float = 0
}

"""üß± A side of a piece in a connection."""
input SideInput {
  piece: SidePieceInput!
}

"""
‚≠ï The piece indesign of a side. A piece is identified by an id (emtpy=default)).
"""
input SidePieceInput {
  id: String!
  type: SidePieceTypeInput = null
}

"""üß© The type indesign of a piece of a side."""
input SidePieceTypeInput {
  port: PortIdInput = null
}

"""üîå A port is identified by an id (emtpy=default))."""
input PortIdInput {
  id: String = ""
}

type UpdateLocalKitMetadataMutation {
  kit: Kit
  error: UpdateLocalKitMetadataError
}

type UpdateLocalKitMetadataError {
  code: UpdateLocalKitMetadataErrorCode!
  message: String
}

enum UpdateLocalKitMetadataErrorCode {
  DIRECTORY_DOES_NOT_EXIST
  DIRECTORY_IS_NOT_A_DIRECTORY
  DIRECTORY_HAS_NO_KIT
  NO_PERMISSION_TO_UPDATE_KIT
  KIT_METADATA_IS_INVALID
}

"""üóÉÔ∏è Meta-data of a kit."""
input KitMetadataInput {
  name: String
  description: String
  icon: String
  url: String
  homepage: String
}

type DeleteLocalKitMutation {
  error: DeleteLocalKitError
}

enum DeleteLocalKitError {
  DIRECTORY_DOES_NOT_EXIST
  DIRECTORY_HAS_NO_KIT
  NO_PERMISSION_TO_DELETE_KIT
}

type AddTypeToLocalKitMutation {
  type: Type
  error: AddTypeToLocalKitError
}

type AddTypeToLocalKitError {
  code: AddTypeToLocalKitErrorCode!
  message: String
}

enum AddTypeToLocalKitErrorCode {
  DIRECTORY_DOES_NOT_EXIST
  DIRECTORY_IS_NOT_A_DIRECTORY
  DIRECTORY_HAS_NO_KIT
  NO_PERMISSION_TO_MODIFY_KIT
  TYPE_INPUT_IS_INVALID
}

type RemoveTypeFromLocalKitMutation {
  error: RemoveTypeFromLocalKitError
}

type RemoveTypeFromLocalKitError {
  code: RemoveTypeFromLocalKitErrorCode!
  message: String
}

enum RemoveTypeFromLocalKitErrorCode {
  DIRECTORY_DOES_NOT_EXIST
  DIRECTORY_IS_NOT_A_DIRECTORY
  DIRECTORY_HAS_NO_KIT
  NO_PERMISSION_TO_MODIFY_KIT
  TYPE_DOES_NOT_EXIST
  DESIGN_DEPENDS_ON_TYPE
}

type AddDesignToLocalKitMutation {
  design: Design
  error: AddDesignToLocalKitError
}

type AddDesignToLocalKitError {
  code: AddDesignToLocalKitErrorCode!
  message: String
}

enum AddDesignToLocalKitErrorCode {
  DIRECTORY_DOES_NOT_EXIST
  DIRECTORY_IS_NOT_A_DIRECTORY
  DIRECTORY_HAS_NO_KIT
  NO_PERMISSION_TO_MODIFY_KIT
  DESIGN_INPUT_IS_INVALID
}

type RemoveDesignFromLocalKitMutation {
  error: RemoveDesignFromLocalKitError
}

type RemoveDesignFromLocalKitError {
  code: RemoveDesignFromLocalKitErrorCode!
  message: String
}

enum RemoveDesignFromLocalKitErrorCode {
  DIRECTORY_DOES_NOT_EXIST
  DIRECTORY_IS_NOT_A_DIRECTORY
  DIRECTORY_HAS_NO_KIT
  NO_PERMISSION_TO_MODIFY_KIT
  DESIGN_DOES_NOT_EXIST
}