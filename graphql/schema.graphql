type Query {
  node(
    """The ID of the object"""
    id: ID!
  ): Node
  kit(url: String!): Kit
}

interface Node {
  """The ID of the object"""
  id: ID!
}

type Kit implements Node {
  name: String!
  description: String!
  icon: String!
  createdAt: DateTime!
  lastUpdateAt: DateTime!
  url: String!
  homepage: String!
  types(before: String, after: String, first: Int, last: Int): TypeNodeConnection

  """The ID of the object"""
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type TypeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TypeNodeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `TypeNode` and its cursor."""
type TypeNodeEdge {
  """The item at the end of the edge"""
  node: Type

  """A cursor for use in pagination"""
  cursor: String!
}

type Type implements Node {
  name: String!
  description: String!
  icon: String!
  createdAt: DateTime!
  lastUpdateAt: DateTime!
  variant: String!
  representations(before: String, after: String, first: Int, last: Int): RepresentationNodeConnection
  ports(before: String, after: String, first: Int, last: Int): PortNodeConnection
  qualities(before: String, after: String, first: Int, last: Int): QualityNodeConnection
  kit: Kit

  """The ID of the object"""
  id: ID!
}

type RepresentationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [RepresentationNodeEdge]!
}

"""A Relay edge containing a `RepresentationNode` and its cursor."""
type RepresentationNodeEdge {
  """The item at the end of the edge"""
  node: Representation

  """A cursor for use in pagination"""
  cursor: String!
}

type Representation implements Node {
  url: String!
  lod: String!
  type: Type

  """The ID of the object"""
  id: ID!
  tags: [String!]!
}

type PortNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PortNodeEdge]!
}

"""A Relay edge containing a `PortNode` and its cursor."""
type PortNodeEdge {
  """The item at the end of the edge"""
  node: Port

  """A cursor for use in pagination"""
  cursor: String!
}

type Port implements Node {
  id_: String
  type: Type
  locators(before: String, after: String, first: Int, last: Int): LocatorNodeConnection

  """The ID of the object"""
  id: ID!
  point: PointNode!
  direction: VectorNode!
}

type LocatorNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LocatorNodeEdge]!
}

"""A Relay edge containing a `LocatorNode` and its cursor."""
type LocatorNodeEdge {
  """The item at the end of the edge"""
  node: Locator

  """A cursor for use in pagination"""
  cursor: String!
}

type Locator implements Node {
  subgroup: String!
  group: String!
  port: Port

  """The ID of the object"""
  id: ID!
}

"""✖️ A 3d-point (xyz) of floating point numbers."""
type PointNode {
  x: Float!
  y: Float!
  z: Float!
}

"""➡️ A 3d-vector (xyz) of floating point numbers."""
type VectorNode {
  x: Float!
  y: Float!
  z: Float!
}

type QualityNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [QualityNodeEdge]!
}

"""A Relay edge containing a `QualityNode` and its cursor."""
type QualityNodeEdge {
  """The item at the end of the edge"""
  node: Quality

  """A cursor for use in pagination"""
  cursor: String!
}

type Quality implements Node {
  name: String!
  value: String!
  definition: String!
  unit: String!
  type: Type

  """The ID of the object"""
  id: ID!
}

type Mutation {
  createKit(kit: KitInput!): Kit
}

input KitInput {
  name: String!
  description: String = ""
  icon: String = ""
  createdAt: DateTime = null
  lastUpdateAt: DateTime = null
  url: String = ""
  homepage: String = ""
  types: [TypeInput] = null
}

input TypeInput {
  name: String!
  description: String = ""
  icon: String = ""
  createdAt: DateTime = null
  lastUpdateAt: DateTime = null
  variant: String = ""
  representations: [RepresentationInput] = null
}

input RepresentationInput {
  url: String!
  lod: String = ""
  tags: [String] = null
}