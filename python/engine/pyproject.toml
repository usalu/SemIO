[tool.poetry]
name = "engine"
version = "2.0.1"
description = "The engine that powers semio."
authors = ["Ueli Saluz <semio-community@posteo.org>"]
maintainers = ["Ueli Saluz <semio-community@posteo.org>"]
license = "AGPL-3.0-or-later"
repository = "https://github.com/usalu/semio"
homepage = "https://usalu.github.io/semio"

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
sqlalchemy = "^2.0.23"
uvicorn = { extras = ["standard"], version = "^0.27.1" }
starlette = "^0.37.1"
graphene = "^3.3"
graphene-sqlalchemy = { version = "^3.0.0rc1", allow-prereleases = true }
starlette-graphene3 = "^0.6.0"
pydantic = ">=2.0"
graphene-pydantic = "^0.6.1"
pint = "^0.24.1"
networkx = "^3.2.1"
pytransform3d = "^3.5.0"
# pyside6 = "^6.7.2"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.1"
deepdiff = "^6.7.1"
pytest-cov = "^5.0.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.1"
black = "^23.11.0"


[tool.poetry.group.build.dependencies]
pyinstaller = "^6"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
engine = "engine:main" #doesn't work. Use instead: poetry run python engine.py

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "def __str__",
    "def client__str__",
    "def list_client__str__",

    "raise AssertionError",
    "raise NotImplementedError",
    "raise InvalidDatabase",
    "raise InvalidBackend",

    "if __name__ == .__main__.:",
    "def main():",
    "if app.debug:",

    "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[tool.tox]
legacy_tox_ini = """
    [tox]
    isolated_build = true

    [testenv]
    skip_install = true
    allowlist_externals = poetry
    commands_pre = poetry install
    commands = tests.sh
"""

[tool.pylint.'MESSAGES CONTROL']
extension-pkg-whitelist = "pydantic"
