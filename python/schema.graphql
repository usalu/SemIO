type Query {
  kits: [KitNode]
}

type KitNode {
  id: ID!
  uri: String!
  name: String!
  explanation: String!
  scripts: [ScriptNode!]!
  types: [TypeNode!]!
  formations: [FormationNode!]!
}

type ScriptNode {
  id: ID!
  name: String!
  explanation: String
  kind: ScriptKind!
  url: String!
  kitId: Int!
  kit: KitNode
  synthesizedProperties: [PropertyNode!]!
  prototypedTypes: [TypeNode!]!
  choreographedFormations: [FormationNode!]!
  transformedFormations: [FormationNode!]!
}

"""An enumeration."""
enum ScriptKind {
  SYNTHESIS
  PROTOTYPE
  MODIFICATION
  CHOREOGRAPHY
  TRANSFORMATION
}

type PropertyNode {
  id: ID!
  name: String!
  explanation: String
  datatype: String!
  value: String!
  synthesisScriptId: Int
  typeId: Int
  portId: Int
  synthesisScript: ScriptNode
  type: TypeNode
  port: PortNode
}

type TypeNode {
  id: ID!
  name: String!
  explanation: String
  kitId: Int!
  prototypeScriptId: Int
  ports: [PortNode!]!
  kit: KitNode
  prototypeScript: ScriptNode
  properties: [PropertyNode!]!
}

type PortNode {
  id: ID!
  name: String!
  explanation: String
  originX: Float
  originY: Float
  originZ: Float
  xAxisX: Float
  xAxisY: Float
  xAxisZ: Float
  yAxisX: Float
  yAxisY: Float
  yAxisZ: Float
  zAxisX: Float
  zAxisY: Float
  zAxisZ: Float
  typeId: Int!
  type: TypeNode
  properties: [PropertyNode!]!
  attractings: [AttractionNode!]!
  attracteds: [AttractionNode!]!
}

type AttractionNode {
  attractingPieceId: ID!
  attractingPieceTypePortId: ID!
  attractedPieceId: ID!
  attractedPieceTypePortId: ID!
  formationId: ID!
  attractingPiece: PieceNode
  attractingPieceTypePort: PortNode
  attractedPiece: PieceNode
  attractedPieceTypePort: PortNode
  formation: FormationNode
}

type PieceNode {
  id: ID!
  formationId: Int!
  attractings: [AttractionNode!]!
  attracteds: [AttractionNode!]!
  formation: FormationNode
}

type FormationNode {
  id: ID!
  name: String!
  explanation: String
  choreographyScriptId: Int
  transformationScriptId: Int
  kitId: Int!
  pieces: [PieceNode!]!
  attractions: [AttractionNode!]!
  choreographyScript: ScriptNode
  transformationScript: ScriptNode
  kit: KitNode
}

type Mutation {
  createKit(explanation: String, name: String!, uri: String!): KitNode
  updateKit(explanation: String, id: Int!, name: String, uri: String): KitNode
  deleteKit(id: Int!): DeleteKitMutation
}

type DeleteKitMutation {
  ok: Boolean
}